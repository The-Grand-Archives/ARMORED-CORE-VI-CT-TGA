/* This file was automatically generated from paramdef XMLs and game regulation data.*/
#ifndef _TGA_PARAMDEFS_H
#pragma once
#define _TGA_PARAMDEFS_H

typedef char s8;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef char fixstr;
typedef short fixstrW;
typedef float f32;
typedef double f64;
typedef unsigned char dummy8;

struct _ACTIONBUTTON_PARAM_ST {
	u8 regionType;
	u8 category;
	dummy8 padding1[2];
	s32 dummyPoly1;
	s32 dummyPoly2;
	f32 radius;
	s32 angle;
	f32 depth;
	f32 width;
	f32 height;
	f32 baseHeightOffset;
	u8 angleCheckType;
	dummy8 padding2[3];
	s32 allowAngle;
	s32 spotDummyPoly;
	u8 textBoxType;
	dummy8 padding3[2];
	dummy8 padding5: 1;
	u8 isInvalidForRide: 1;
	u8 isGrayoutForRide: 1;
	u8 isInvalidForCrouching: 1;
	u8 isGrayoutForCrouching: 1;
	dummy8 padding4: 3;
	s32 textId;
	u32 invalidFlag;
	u32 grayoutFlag;
	s32 overrideActionButtonIdForRide;
	f32 execInvalidTime;
	dummy8 padding6[28];
};
typedef struct _ACTIONBUTTON_PARAM_ST ACTIONBUTTON_PARAM_ST;

struct _AI_ANIM_TBL_PARAM {
	u16 atk0_EzStateId;
	u16 atk1_EzStateId;
	u16 atk2_EzStateId;
	u16 atk3_EzStateId;
	u16 atk4_EzStateId;
	u16 atk5_EzStateId;
	u16 atk6_EzStateId;
	u16 atk7_EzStateId;
	u16 atk8_EzStateId;
	u16 atk9_EzStateId;
	u16 atk10_EzStateId;
	u16 atk11_EzStateId;
	u16 atk12_EzStateId;
	u16 atk13_EzStateId;
	u16 atk14_EzStateId;
	u16 atk15_EzStateId;
	u16 atk16_EzStateId;
	u16 atk17_EzStateId;
	u16 atk18_EzStateId;
	u16 atk19_EzStateId;
	u16 atk20_EzStateId;
	u16 atk21_EzStateId;
	u16 atk22_EzStateId;
	u16 atk23_EzStateId;
	u16 atk24_EzStateId;
	u16 atk25_EzStateId;
	u16 atk26_EzStateId;
	u16 atk27_EzStateId;
	u16 atk28_EzStateId;
	u16 atk29_EzStateId;
	u16 atk0_MinDist;
	u16 atk1_MinDist;
	u16 atk2_MinDist;
	u16 atk3_MinDist;
	u16 atk4_MinDist;
	u16 atk5_MinDist;
	u16 atk6_MinDist;
	u16 atk7_MinDist;
	u16 atk8_MinDist;
	u16 atk9_MinDist;
	u16 atk10_MinDist;
	u16 atk11_MinDist;
	u16 atk12_MinDist;
	u16 atk13_MinDist;
	u16 atk14_MinDist;
	u16 atk15_MinDist;
	u16 atk16_MinDist;
	u16 atk17_MinDist;
	u16 atk18_MinDist;
	u16 atk19_MinDist;
	u16 atk20_MinDist;
	u16 atk21_MinDist;
	u16 atk22_MinDist;
	u16 atk23_MinDist;
	u16 atk24_MinDist;
	u16 atk25_MinDist;
	u16 atk26_MinDist;
	u16 atk27_MinDist;
	u16 atk28_MinDist;
	u16 atk29_MinDist;
	u16 atk0_MaxDist;
	u16 atk1_MaxDist;
	u16 atk2_MaxDist;
	u16 atk3_MaxDist;
	u16 atk4_MaxDist;
	u16 atk5_MaxDist;
	u16 atk6_MaxDist;
	u16 atk7_MaxDist;
	u16 atk8_MaxDist;
	u16 atk9_MaxDist;
	u16 atk10_MaxDist;
	u16 atk11_MaxDist;
	u16 atk12_MaxDist;
	u16 atk13_MaxDist;
	u16 atk14_MaxDist;
	u16 atk15_MaxDist;
	u16 atk16_MaxDist;
	u16 atk17_MaxDist;
	u16 atk18_MaxDist;
	u16 atk19_MaxDist;
	u16 atk20_MaxDist;
	u16 atk21_MaxDist;
	u16 atk22_MaxDist;
	u16 atk23_MaxDist;
	u16 atk24_MaxDist;
	u16 atk25_MaxDist;
	u16 atk26_MaxDist;
	u16 atk27_MaxDist;
	u16 atk28_MaxDist;
	u16 atk29_MaxDist;
	u8 atk0_AtkDistType: 4;
	u8 atk1_AtkDistType: 4;
	u8 atk2_AtkDistType: 4;
	u8 atk3_AtkDistType: 4;
	u8 atk4_AtkDistType: 4;
	u8 atk5_AtkDistType: 4;
	u8 atk6_AtkDistType: 4;
	u8 atk7_AtkDistType: 4;
	u8 atk8_AtkDistType: 4;
	u8 atk9_AtkDistType: 4;
	u8 atk10_AtkDistType: 4;
	u8 atk11_AtkDistType: 4;
	u8 atk12_AtkDistType: 4;
	u8 atk13_AtkDistType: 4;
	u8 atk14_AtkDistType: 4;
	u8 atk15_AtkDistType: 4;
	u8 atk16_AtkDistType: 4;
	u8 atk17_AtkDistType: 4;
	u8 atk18_AtkDistType: 4;
	u8 atk19_AtkDistType: 4;
	u8 atk20_AtkDistType: 4;
	u8 atk21_AtkDistType: 4;
	u8 atk22_AtkDistType: 4;
	u8 atk23_AtkDistType: 4;
	u8 atk24_AtkDistType: 4;
	u8 atk25_AtkDistType: 4;
	u8 atk26_AtkDistType: 4;
	u8 atk27_AtkDistType: 4;
	u8 atk28_AtkDistType: 4;
	u8 atk29_AtkDistType: 4;
	dummy8 pad0[13];
};
typedef struct _AI_ANIM_TBL_PARAM AI_ANIM_TBL_PARAM;

struct _AI_ATTACK_PARAM_ST {
	s32 attackTableId;
	s32 attackId;
	f32 successDistance;
	f32 turnTimeBeforeAttack;
	s16 frontAngleRange;
	s16 upAngleThreshold;
	s16 downAngleThershold;
	u8 isFirstAttack;
	u8 doesSelectOnOutRange;
	f32 minOptimalDistance;
	f32 maxOptimalDistance;
	s16 baseDirectionForOptimalAngle1;
	s16 optimalAttackAngleRange1;
	s16 baseDirectionForOptimalAngle2;
	s16 optimalAttackAngleRange2;
	f32 intervalForExec;
	f32 selectionTendency;
	f32 shortRangeTendency;
	f32 middleRangeTendency;
	f32 farRangeTendency;
	f32 outRangeTendency;
	s32 deriveAttackId1;
	s32 deriveAttackId2;
	s32 deriveAttackId3;
	s32 deriveAttackId4;
	s32 deriveAttackId5;
	s32 deriveAttackId6;
	s32 deriveAttackId7;
	s32 deriveAttackId8;
	s32 deriveAttackId9;
	s32 deriveAttackId10;
	s32 deriveAttackId11;
	s32 deriveAttackId12;
	s32 deriveAttackId13;
	s32 deriveAttackId14;
	s32 deriveAttackId15;
	s32 deriveAttackId16;
	f32 goalLifeMin;
	f32 goalLifeMax;
	u8 doesSelectOnInnerRange;
	u8 enableAttackOnBattleStart;
	u8 doesSelectOnTargetDown;
	dummy8 pad1[1];
	f32 minArriveDistance;
	f32 maxArriveDistance;
	f32 comboExecDistance;
	f32 comboExecRange;
};
typedef struct _AI_ATTACK_PARAM_ST AI_ATTACK_PARAM_ST;

struct _AI_ODDS_PARAM {
	u8 act0;
	u8 act1;
	u8 act2;
	u8 act3;
	u8 act4;
	u8 act5;
	u8 act6;
	u8 act7;
	u8 act8;
	u8 act9;
	u8 act10;
	u8 act11;
	u8 act12;
	u8 act13;
	u8 act14;
	u8 act15;
	u8 act16;
	u8 act17;
	u8 act18;
	u8 act19;
	u8 act20;
	u8 act21;
	u8 act22;
	u8 act23;
	u8 act24;
	u8 act25;
	u8 act26;
	u8 act27;
	u8 act28;
	u8 act29;
	u8 act30;
	u8 act31;
	u8 act32;
	u8 act33;
	u8 act34;
	u8 act35;
	u8 act36;
	u8 act37;
	u8 act38;
	u8 act39;
	u8 act40;
	u8 act41;
	u8 act42;
	u8 act43;
	u8 act44;
	u8 act45;
	u8 act46;
	u8 act47;
	u8 act48;
	u8 act49;
	u8 act50;
	u8 act51;
	u8 act52;
	u8 act53;
	u8 act54;
	u8 act55;
	u8 act56;
	u8 act57;
	u8 act58;
	u8 act59;
	u8 act60;
	u8 act61;
	u8 act62;
	u8 act63;
	u8 act64;
	u8 act65;
	u8 act66;
	u8 act67;
	u8 act68;
	u8 act69;
	u8 act70;
	u8 act71;
	u8 act72;
	u8 act73;
	u8 act74;
	u8 act75;
	u8 act76;
	u8 act77;
	u8 act78;
	u8 act79;
	u8 act80;
	u8 act81;
	u8 act82;
	u8 act83;
	u8 act84;
	u8 act85;
	u8 act86;
	u8 act87;
	u8 act88;
	u8 act89;
	u8 act90;
	u8 act91;
	u8 act92;
	u8 act93;
	u8 act94;
	u8 act95;
	u8 act96;
	u8 act97;
	u8 act98;
	u8 act99;
	dummy8 pad0[12];
};
typedef struct _AI_ODDS_PARAM AI_ODDS_PARAM;

struct _AI_SOUND_PARAM_ST {
	f32 radius;
	f32 lifeFrame;
	u8 bSpEffectEnable;
	u8 type;
	u8 opposeTarget: 1;
	u8 friendlyTarget: 1;
	u8 selfTarget: 1;
	u8 disableOnTargetPCompany: 1;
	u8 rank;
	f32 forgetTime;
	s32 priority;
	s32 soundBehaviorId;
	u8 aiSoundLevel;
	u8 replaningState;
	dummy8 pad1[6];
};
typedef struct _AI_SOUND_PARAM_ST AI_SOUND_PARAM_ST;

struct _AI_STANDARD_INFO_BANK {
	u16 RadarRange;
	u8 RadarAngleX;
	u8 RadarAngleY;
	u16 TerritorySize;
	u8 ThreatBeforeAttackRate;
	u8 ForceThreatOnFirstLocked;
	dummy8 reserve0[24];
	u16 Attack1_Distance;
	u16 Attack1_Margin;
	u8 Attack1_Rate;
	u8 Attack1_ActionID;
	u8 Attack1_DelayMin;
	u8 Attack1_DelayMax;
	u8 Attack1_ConeAngle;
	dummy8 reserve10[7];
	u16 Attack2_Distance;
	u16 Attack2_Margin;
	u8 Attack2_Rate;
	u8 Attack2_ActionID;
	u8 Attack2_DelayMin;
	u8 Attack2_DelayMax;
	u8 Attack2_ConeAngle;
	dummy8 reserve11[7];
	u16 Attack3_Distance;
	u16 Attack3_Margin;
	u8 Attack3_Rate;
	u8 Attack3_ActionID;
	u8 Attack3_DelayMin;
	u8 Attack3_DelayMax;
	u8 Attack3_ConeAngle;
	dummy8 reserve12[7];
	u16 Attack4_Distance;
	u16 Attack4_Margin;
	u8 Attack4_Rate;
	u8 Attack4_ActionID;
	u8 Attack4_DelayMin;
	u8 Attack4_DelayMax;
	u8 Attack4_ConeAngle;
	dummy8 reserve13[7];
	dummy8 reserve_last[32];
};
typedef struct _AI_STANDARD_INFO_BANK AI_STANDARD_INFO_BANK;

struct _ASSET_GEOMETORY_PARAM_ST {
	s32 soundBankId;
	s32 soundBreakSEId;
	s32 refDrawParamId;
	s8 hitCreateType;
	u8 behaviorType;
	u8 collisionType;
	u8 rainBlockingType;
	s16 hp;
	u16 defense;
	f32 breakStopTime;
	s32 breakSfxId;
	s32 breakSfxCpId;
	s32 breakLandingSfxId;
	s32 breakBulletBehaviorId;
	s32 breakBulletCpId;
	f32 FragmentInvisibleWaitTime;
	f32 FragmentInvisibleTime;
	s32 BreakAiSoundID;
	s8 breakItemLotType;
	u8 animBreakIdMax;
	s8 breakBulletAttributeDamageType;
	u8 isBreakByPlayerCollide: 1;
	u8 isBreakByEnemyCollide: 1;
	u8 isBreak_ByChrRide: 1;
	u8 isDisableBreakForFirstAppear: 1;
	u8 isAnimBreak: 1;
	u8 isDamageCover: 1;
	u8 isAttackBacklash: 1;
	dummy8 Reserve_2: 1;
	u8 isLadder: 1;
	u8 isMoveObj: 1;
	u8 isSkydomeFlag: 1;
	u8 isAnimPauseOnRemoPlay: 1;
	u8 isBurn: 1;
	u8 isEnableRepick: 1;
	u8 isBreakOnPickUp: 1;
	u8 isBreakByHugeenemyCollide: 1;
	u8 navimeshFlag;
	u16 burnBulletInterval;
	f32 clothUpdateDist;
	f32 lifeTime_forRuntimeCreate;
	s32 contactSeId;
	s32 repickAnimIdOffset;
	f32 windEffectRate_0;
	f32 windEffectRate_1;
	u8 windEffectType_0;
	u8 windEffectType_1;
	s16 overrideMaterialId;
	f32 autoCreateOffsetHeight;
	f32 burnTime;
	f32 burnBraekRate;
	s32 burnSfxId;
	s32 burnSfxId_1;
	s32 burnSfxId_2;
	s32 burnSfxId_3;
	f32 burnSfxDelayTimeMin;
	f32 burnSfxDelayTimeMin_1;
	f32 burnSfxDelayTimeMin_2;
	f32 burnSfxDelayTimeMin_3;
	f32 burnSfxDelayTimeMax;
	f32 burnSfxDelayTimeMax_1;
	f32 burnSfxDelayTimeMax_2;
	f32 burnSfxDelayTimeMax_3;
	s32 burnBulletBehaviorId;
	s32 burnBulletBehaviorId_1;
	s32 burnBulletBehaviorId_2;
	s32 burnBulletBehaviorId_3;
	f32 burnBulletDelayTime;
	u16 paintDecalTargetTextureSize;
	u8 navimeshFlag_after;
	s8 camNearBehaviorType;
	s32 breakItemLotParamId;
	s32 pickUpActionButtonParamId;
	s32 pickUpItemLotParamId;
	u8 autoDrawGroupBackFaceCheck;
	u8 autoDrawGroupDepthWrite;
	u8 autoDrawGroupShadowTest;
	u8 debug_isHeightCheckEnable;
	u8 hitCarverCancelAreaFlag;
	u8 assetNavimeshNoCombine;
	u8 navimeshFlagApply;
	u8 navimeshFlagApply_after;
	f32 autoDrawGroupPassPixelNum;
	u32 pickUpReplacementEventFlag;
	s32 pickUpReplacementAnimIdOffset;
	s32 pickUpReplacementActionButtonParamId;
	s32 pickUpReplacementItemLotParamId;
	u8 slidingBulletHitType;
	u8 isBushesForDamage;
	u8 penetrationBulletType;
	dummy8 Reserve_3[1];
	dummy8 Reserve_4[4];
	s32 soundBreakSECpId;
	f32 debug_HeightCheckCapacityMin;
	f32 debug_HeightCheckCapacityMax;
	s32 repickActionButtonParamId;
	s32 repickItemLotParamId;
	s32 repickReplacementAnimIdOffset;
	s32 repickReplacementActionButtonParamId;
	s32 repickReplacementItemLotParamId;
	u8 noGenerateCarver;
	u8 noHitHugeAfterBreak;
	u8 isEnabledBreakSync: 1;
	u8 isHiddenOnRepick: 1;
	u8 isCreateMultiPlayOnly: 1;
	u8 isDisableBulletHitSfx: 1;
	u8 isEnableSignPreBreak: 1;
	u8 isEnableSignPostBreak: 1;
	dummy8 Reserve_1: 2;
	u8 generateMultiForbiddenRegion;
	s32 residentSeId0;
	s32 residentSeId1;
	s32 residentSeId2;
	s32 residentSeId3;
	s16 residentSeDmypolyId0;
	s16 residentSeDmypolyId1;
	s16 residentSeDmypolyId2;
	s16 residentSeDmypolyId3;
	u8 excludeActivateRatio_Xboxone_Grid;
	u8 excludeActivateRatio_Xboxone_Legacy;
	u8 excludeActivateRatio_PS4_Grid;
	u8 excludeActivateRatio_PS4_Legacy;
	dummy8 Reserve_0[32];
};
typedef struct _ASSET_GEOMETORY_PARAM_ST ASSET_GEOMETORY_PARAM_ST;

struct _ASSET_MATERIAL_SFX_PARAM_ST {
	u32 sfxId_00;
	u32 sfxId_01;
	u32 sfxId_02;
	u32 sfxId_03;
	u32 sfxId_04;
	u32 sfxId_05;
	u32 sfxId_06;
	u32 sfxId_07;
	u32 sfxId_08;
	u32 sfxId_09;
	u32 sfxId_10;
	u32 sfxId_11;
	u32 sfxId_12;
	u32 sfxId_13;
	u32 sfxId_14;
	u32 sfxId_15;
	u32 sfxId_16;
	u32 sfxId_17;
	u32 sfxId_18;
	u32 sfxId_19;
	u32 sfxId_20;
	u32 sfxId_21;
	u32 sfxId_22;
	u32 sfxId_23;
	u32 sfxId_24;
	u32 sfxId_25;
	u32 sfxId_26;
	u32 sfxId_27;
	u32 sfxId_28;
	u32 sfxId_29;
	u32 sfxId_30;
	u32 sfxId_31;
};
typedef struct _ASSET_MATERIAL_SFX_PARAM_ST ASSET_MATERIAL_SFX_PARAM_ST;

struct _ASSET_MODEL_SFX_PARAM_ST {
	s32 sfxId_0;
	s32 dmypolyId_0;
	dummy8 reserve_0[8];
	s32 sfxId_1;
	s32 dmypolyId_1;
	dummy8 reserve_1[8];
	s32 sfxId_2;
	s32 dmypolyId_2;
	dummy8 reserve_2[8];
	s32 sfxId_3;
	s32 dmypolyId_3;
	dummy8 reserve_3[8];
	s32 sfxId_4;
	s32 dmypolyId_4;
	dummy8 reserve_4[8];
	s32 sfxId_5;
	s32 dmypolyId_5;
	dummy8 reserve_5[8];
	s32 sfxId_6;
	s32 dmypolyId_6;
	dummy8 reserve_6[8];
	s32 sfxId_7;
	s32 dmypolyId_7;
	u8 isDisableIV;
	dummy8 reserve_7[7];
};
typedef struct _ASSET_MODEL_SFX_PARAM_ST ASSET_MODEL_SFX_PARAM_ST;

struct _ATK_PARAM_ST {
	f32 hit0_Radius;
	f32 hit1_Radius;
	f32 hit2_Radius;
	f32 hit3_Radius;
	f32 knockbackDist;
	f32 hitStopTime;
	s32 spEffectId0;
	s32 spEffectId1;
	s32 spEffectId2;
	s32 spEffectId3;
	s32 spEffectId4;
	s16 hit0_DmyPoly1;
	s16 hit1_DmyPoly1;
	s16 hit2_DmyPoly1;
	s16 hit3_DmyPoly1;
	s16 hit0_DmyPoly2;
	s16 hit1_DmyPoly2;
	s16 hit2_DmyPoly2;
	s16 hit3_DmyPoly2;
	u16 blowingCorrection;
	u16 atkPhysCorrection;
	u16 atkMagCorrection;
	u16 atkFireCorrection;
	u16 atkThunCorrection;
	u16 atkStamCorrection;
	u16 guardAtkRateCorrection;
	u16 guardBreakCorrection;
	u16 atkThrowEscapeCorrection;
	u8 subCategory1;
	u8 subCategory2;
	u16 atkPhys;
	u16 atkMag;
	u16 atkFire;
	u16 atkThun;
	u16 atkStam;
	u16 guardAtkRate;
	u16 guardBreakRate;
	dummy8 pad6[1];
	u8 isEnableCalcDamageForBushesObj;
	u16 atkThrowEscape;
	u16 atkObj;
	s16 guardStaminaCutRate;
	s16 guardRate;
	u16 throwTypeId;
	u8 hit0_hitType;
	u8 hit1_hitType;
	u8 hit2_hitType;
	u8 hit3_hitType;
	u8 hti0_Priority;
	u8 hti1_Priority;
	u8 hti2_Priority;
	u8 hti3_Priority;
	u8 dmgLevel;
	u8 mapHitType;
	s8 guardCutCancelRate;
	u8 atkAttribute;
	u8 spAttribute;
	u8 atkType;
	u8 atkMaterial;
	u8 guardRangeType;
	u16 defSeMaterial1;
	u8 hitSourceType;
	u8 throwFlag;
	u8 disableGuard: 1;
	u8 disableStaminaAttack: 1;
	u8 disableHitSpEffect: 1;
	u8 IgnoreNotifyMissSwingForAI: 1;
	u8 repeatHitSfx: 1;
	u8 isArrowAtk: 1;
	u8 isGhostAtk: 1;
	u8 isDisableNoDamage: 1;
	s8 atkPow_forSfx;
	s8 atkDir_forSfx;
	u8 opposeTarget: 1;
	u8 friendlyTarget: 1;
	u8 selfTarget: 1;
	u8 isCheckDoorPenetration: 1;
	u8 isVsRideAtk: 1;
	u8 isAddBaseAtk: 1;
	u8 excludeThreatLvNotify: 1;
	dummy8 pad1: 1;
	u8 atkBehaviorId;
	s8 atkPow_forSe;
	f32 atkSuperArmor;
	s32 decalId1;
	s32 decalId2;
	s32 AppearAiSoundId;
	s32 HitAiSoundId;
	s32 HitRumbleId;
	s32 HitRumbleIdByNormal;
	s32 HitRumbleIdByMiddle;
	s32 HitRumbleIdByRoot;
	s32 traceSfxId0;
	s32 traceDmyIdHead0;
	s32 traceDmyIdTail0;
	s32 traceSfxId1;
	s32 traceDmyIdHead1;
	s32 traceDmyIdTail1;
	s32 traceSfxId2;
	s32 traceDmyIdHead2;
	s32 traceDmyIdTail2;
	s32 traceSfxId3;
	s32 traceDmyIdHead3;
	s32 traceDmyIdTail3;
	s32 traceSfxId4;
	s32 traceDmyIdHead4;
	s32 traceDmyIdTail4;
	s32 traceSfxId5;
	s32 traceDmyIdHead5;
	s32 traceDmyIdTail5;
	s32 traceSfxId6;
	s32 traceDmyIdHead6;
	s32 traceDmyIdTail6;
	s32 traceSfxId7;
	s32 traceDmyIdHead7;
	s32 traceDmyIdTail7;
	f32 hit4_Radius;
	f32 hit5_Radius;
	f32 hit6_Radius;
	f32 hit7_Radius;
	f32 hit8_Radius;
	f32 hit9_Radius;
	f32 hit10_Radius;
	f32 hit11_Radius;
	f32 hit12_Radius;
	f32 hit13_Radius;
	f32 hit14_Radius;
	f32 hit15_Radius;
	s16 hit4_DmyPoly1;
	s16 hit5_DmyPoly1;
	s16 hit6_DmyPoly1;
	s16 hit7_DmyPoly1;
	s16 hit8_DmyPoly1;
	s16 hit9_DmyPoly1;
	s16 hit10_DmyPoly1;
	s16 hit11_DmyPoly1;
	s16 hit12_DmyPoly1;
	s16 hit13_DmyPoly1;
	s16 hit14_DmyPoly1;
	s16 hit15_DmyPoly1;
	s16 hit4_DmyPoly2;
	s16 hit5_DmyPoly2;
	s16 hit6_DmyPoly2;
	s16 hit7_DmyPoly2;
	s16 hit8_DmyPoly2;
	s16 hit9_DmyPoly2;
	s16 hit10_DmyPoly2;
	s16 hit11_DmyPoly2;
	s16 hit12_DmyPoly2;
	s16 hit13_DmyPoly2;
	s16 hit14_DmyPoly2;
	s16 hit15_DmyPoly2;
	u8 hit4_hitType;
	u8 hit5_hitType;
	u8 hit6_hitType;
	u8 hit7_hitType;
	u8 hit8_hitType;
	u8 hit9_hitType;
	u8 hit10_hitType;
	u8 hit11_hitType;
	u8 hit12_hitType;
	u8 hit13_hitType;
	u8 hit14_hitType;
	u8 hit15_hitType;
	u8 hti4_Priority;
	u8 hti5_Priority;
	u8 hti6_Priority;
	u8 hti7_Priority;
	u8 hti8_Priority;
	u8 hti9_Priority;
	u8 hti10_Priority;
	u8 hti11_Priority;
	u8 hti12_Priority;
	u8 hti13_Priority;
	u8 hti14_Priority;
	u8 hti15_Priority;
	u16 defSfxMaterial1;
	u16 defSeMaterial2;
	u16 defSfxMaterial2;
	u16 atkDarkCorrection;
	u16 atkDark;
	dummy8 pad5: 1;
	u8 isDisableParry: 1;
	u8 isDisableBothHandsAtkBonus: 1;
	u8 isInvalidatedByNoDamageInAir: 1;
	dummy8 pad2: 4;
	s8 dmgLevel_vsPlayer;
	u16 statusAilmentAtkPowerCorrectRate;
	u16 spEffectAtkPowerCorrectRate_byPoint;
	u16 spEffectAtkPowerCorrectRate_byRate;
	u16 spEffectAtkPowerCorrectRate_byDmg;
	u8 atkBehaviorId_2;
	u8 throwDamageAttribute;
	u16 statusAilmentAtkPowerCorrectRate_byPoint;
	s32 overwriteAttackElementCorrectId;
	s16 decalBaseId1;
	s16 decalBaseId2;
	u16 wepRegainHpScale;
	u16 atkRegainHp;
	f32 regainableTimeScale;
	f32 regainableHpRateScale;
	s8 regainableSlotId;
	u8 spAttributeVariationValue;
	s16 parryForwardOffset;
	f32 atkSuperArmorCorrection;
	u8 defSfxMaterialVariationValue;
	dummy8 pad4[3];
	s32 finalDamageRateId;
	dummy8 pad7[12];
};
typedef struct _ATK_PARAM_ST ATK_PARAM_ST;

struct _ATTACK_ELEMENT_CORRECT_PARAM_ST {
	u8 isStrengthCorrect_byPhysics: 1;
	u8 isDexterityCorrect_byPhysics: 1;
	u8 isMagicCorrect_byPhysics: 1;
	u8 isFaithCorrect_byPhysics: 1;
	u8 isLuckCorrect_byPhysics: 1;
	u8 isStrengthCorrect_byMagic: 1;
	u8 isDexterityCorrect_byMagic: 1;
	u8 isMagicCorrect_byMagic: 1;
	u8 isFaithCorrect_byMagic: 1;
	u8 isLuckCorrect_byMagic: 1;
	u8 isStrengthCorrect_byFire: 1;
	u8 isDexterityCorrect_byFire: 1;
	u8 isMagicCorrect_byFire: 1;
	u8 isFaithCorrect_byFire: 1;
	u8 isLuckCorrect_byFire: 1;
	u8 isStrengthCorrect_byThunder: 1;
	u8 isDexterityCorrect_byThunder: 1;
	u8 isMagicCorrect_byThunder: 1;
	u8 isFaithCorrect_byThunder: 1;
	u8 isLuckCorrect_byThunder: 1;
	u8 isStrengthCorrect_byDark: 1;
	u8 isDexterityCorrect_byDark: 1;
	u8 isMagicCorrect_byDark: 1;
	u8 isFaithCorrect_byDark: 1;
	u8 isLuckCorrect_byDark: 1;
	dummy8 pad1: 7;
	s16 overwriteStrengthCorrectRate_byPhysics;
	s16 overwriteDexterityCorrectRate_byPhysics;
	s16 overwriteMagicCorrectRate_byPhysics;
	s16 overwriteFaithCorrectRate_byPhysics;
	s16 overwriteLuckCorrectRate_byPhysics;
	s16 overwriteStrengthCorrectRate_byMagic;
	s16 overwriteDexterityCorrectRate_byMagic;
	s16 overwriteMagicCorrectRate_byMagic;
	s16 overwriteFaithCorrectRate_byMagic;
	s16 overwriteLuckCorrectRate_byMagic;
	s16 overwriteStrengthCorrectRate_byFire;
	s16 overwriteDexterityCorrectRate_byFire;
	s16 overwriteMagicCorrectRate_byFire;
	s16 overwriteFaithCorrectRate_byFire;
	s16 overwriteLuckCorrectRate_byFire;
	s16 overwriteStrengthCorrectRate_byThunder;
	s16 overwriteDexterityCorrectRate_byThunder;
	s16 overwriteMagicCorrectRate_byThunder;
	s16 overwriteFaithCorrectRate_byThunder;
	s16 overwriteLuckCorrectRate_byThunder;
	s16 overwriteStrengthCorrectRate_byDark;
	s16 overwriteDexterityCorrectRate_byDark;
	s16 overwriteMagicCorrectRate_byDark;
	s16 overwriteFaithCorrectRate_byDark;
	s16 overwriteLuckCorrectRate_byDark;
	s16 InfluenceStrengthCorrectRate_byPhysics;
	s16 InfluenceDexterityCorrectRate_byPhysics;
	s16 InfluenceMagicCorrectRate_byPhysics;
	s16 InfluenceFaithCorrectRate_byPhysics;
	s16 InfluenceLuckCorrectRate_byPhysics;
	s16 InfluenceStrengthCorrectRate_byMagic;
	s16 InfluenceDexterityCorrectRate_byMagic;
	s16 InfluenceMagicCorrectRate_byMagic;
	s16 InfluenceFaithCorrectRate_byMagic;
	s16 InfluenceLuckCorrectRate_byMagic;
	s16 InfluenceStrengthCorrectRate_byFire;
	s16 InfluenceDexterityCorrectRate_byFire;
	s16 InfluenceMagicCorrectRate_byFire;
	s16 InfluenceFaithCorrectRate_byFire;
	s16 InfluenceLuckCorrectRate_byFire;
	s16 InfluenceStrengthCorrectRate_byThunder;
	s16 InfluenceDexterityCorrectRate_byThunder;
	s16 InfluenceMagicCorrectRate_byThunder;
	s16 InfluenceFaithCorrectRate_byThunder;
	s16 InfluenceLuckCorrectRate_byThunder;
	s16 InfluenceStrengthCorrectRate_byDark;
	s16 InfluenceDexterityCorrectRate_byDark;
	s16 InfluenceMagicCorrectRate_byDark;
	s16 InfluenceFaithCorrectRate_byDark;
	s16 InfluenceLuckCorrectRate_byDark;
	dummy8 pad2[24];
};
typedef struct _ATTACK_ELEMENT_CORRECT_PARAM_ST ATTACK_ELEMENT_CORRECT_PARAM_ST;

struct _AUTO_CREATE_ENV_SOUND_PARAM_ST {
	f32 RangeMin;
	f32 RangeMax;
	f32 LifeTimeMin;
	f32 LifeTimeMax;
	f32 DeleteDist;
	f32 NearDist;
	f32 LimiteRotateMin;
	f32 LimiteRotateMax;
};
typedef struct _AUTO_CREATE_ENV_SOUND_PARAM_ST AUTO_CREATE_ENV_SOUND_PARAM_ST;

struct _BASECHR_SELECT_MENU_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 chrInitParam;
	u32 originChrInitParam;
	s32 imageId;
	s32 textId;
	dummy8 reserve[12];
};
typedef struct _BASECHR_SELECT_MENU_PARAM_ST BASECHR_SELECT_MENU_PARAM_ST;

struct _BEHAVIOR_PARAM_ST {
	s32 variationId;
	s32 behaviorJudgeId;
	u8 ezStateBehaviorType_old;
	u8 refType;
	dummy8 pad2[2];
	s32 refId;
	f32 consumeSA;
	s32 stamina;
	s32 consumeDurability;
	u8 category;
	u8 heroPoint;
	dummy8 pad1[2];
};
typedef struct _BEHAVIOR_PARAM_ST BEHAVIOR_PARAM_ST;

struct _BONFIRE_WARP_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 eventflagId;
	u32 bonfireEntityId;
	dummy8 pad4[2];
	u16 bonfireSubCategorySortId;
	u16 forbiddenIconId;
	u8 dispMinZoomStep;
	u8 selectMinZoomStep;
	s32 bonfireSubCategoryId;
	u32 clearedEventFlagId;
	u16 iconId;
	u8 dispMask00: 1;
	u8 dispMask01: 1;
	dummy8 pad1: 6;
	dummy8 pad2[1];
	u8 areaNo;
	u8 gridXNo;
	u8 gridZNo;
	dummy8 pad3[1];
	f32 posX;
	f32 posY;
	f32 posZ;
	s32 textId1;
	u32 textEnableFlagId1;
	u32 textDisableFlagId1;
	s32 textId2;
	u32 textEnableFlagId2;
	u32 textDisableFlagId2;
	s32 textId3;
	u32 textEnableFlagId3;
	u32 textDisableFlagId3;
	s32 textId4;
	u32 textEnableFlagId4;
	u32 textDisableFlagId4;
	s32 textId5;
	u32 textEnableFlagId5;
	u32 textDisableFlagId5;
	s32 textId6;
	u32 textEnableFlagId6;
	u32 textDisableFlagId6;
	s32 textId7;
	u32 textEnableFlagId7;
	u32 textDisableFlagId7;
	s32 textId8;
	u32 textEnableFlagId8;
	u32 textDisableFlagId8;
	u8 textType1;
	u8 textType2;
	u8 textType3;
	u8 textType4;
	u8 textType5;
	u8 textType6;
	u8 textType7;
	u8 textType8;
	s32 noIgnitionSfxDmypolyId_0;
	s32 noIgnitionSfxId_0;
	s32 noIgnitionSfxDmypolyId_1;
	s32 noIgnitionSfxId_1;
	s32 unkA8;
	s32 unkAC;
	s32 unkB0;
	s32 unkB4;
	s32 unkB8;
	s32 unkBC;
	s32 unkC0;
	s32 unkC4;
	s32 unkC8;
	s32 unkCC;
	s32 unkD0;
	s32 unkD4;
	s32 unkD8;
	s32 unkDC;
	s32 unkE0;
	s32 unkE4;
	s32 unkE8;
};
typedef struct _BONFIRE_WARP_PARAM_ST BONFIRE_WARP_PARAM_ST;

struct _BONFIRE_WARP_SUB_CATEGORY_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 textId;
	u16 tabId;
	u16 sortId;
	dummy8 pad[4];
};
typedef struct _BONFIRE_WARP_SUB_CATEGORY_PARAM_ST BONFIRE_WARP_SUB_CATEGORY_PARAM_ST;

struct _BONFIRE_WARP_TAB_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 textId;
	s32 sortId;
	u16 iconId;
	dummy8 pad[2];
};
typedef struct _BONFIRE_WARP_TAB_PARAM_ST BONFIRE_WARP_TAB_PARAM_ST;

struct _BUDDY_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 triggerSpEffectId;
	s32 npcParamId;
	s32 npcThinkParamId;
	s32 npcParamId_ridden;
	s32 npcThinkParamId_ridden;
	f32 x_offset;
	f32 z_offset;
	f32 y_angle;
	u8 appearOnAroundSekihi;
	u8 disablePCTargetShare;
	u8 pcFollowType;
	dummy8 Reserve[1];
	s32 dopingSpEffect_lv0;
	s32 dopingSpEffect_lv1;
	s32 dopingSpEffect_lv2;
	s32 dopingSpEffect_lv3;
	s32 dopingSpEffect_lv4;
	s32 dopingSpEffect_lv5;
	s32 dopingSpEffect_lv6;
	s32 dopingSpEffect_lv7;
	s32 dopingSpEffect_lv8;
	s32 dopingSpEffect_lv9;
	s32 dopingSpEffect_lv10;
	s32 npcPlayerInitParamId;
	s32 generateAnimId;
	dummy8 Reserve2[4];
};
typedef struct _BUDDY_PARAM_ST BUDDY_PARAM_ST;

struct _BUDDY_STONE_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 talkChrEntityId;
	u32 eliminateTargetEntityId;
	u32 summonedEventFlagId;
	u8 isSpecial: 1;
	dummy8 pad1: 7;
	dummy8 pad2[3];
	s32 buddyId;
	s32 dopingSpEffectId;
	u16 activateRange;
	s16 overwriteReturnRange;
	u32 overwriteActivateRegionEntityId;
	u32 warnRegionEntityId;
	dummy8 pad3[24];
};
typedef struct _BUDDY_STONE_PARAM_ST BUDDY_STONE_PARAM_ST;

struct _BUDGET_PARAM_ST {
	f32 vram_all;
	f32 vram_mapobj_tex;
	f32 vram_mapobj_mdl;
	f32 vram_map;
	f32 vram_chr;
	f32 vram_parts;
	f32 vram_sfx;
	f32 vram_chr_tex;
	f32 vram_chr_mdl;
	f32 vram_parts_tex;
	f32 vram_parts_mdl;
	f32 vram_sfx_tex;
	f32 vram_sfx_mdl;
	f32 vram_gi;
	f32 vram_menu_tex;
	f32 vram_decal_rt;
	f32 vram_decal;
	dummy8 reserve_0[4];
	f32 vram_other_tex;
	f32 vram_other_mdl;
	f32 havok_anim;
	f32 havok_ins;
	f32 havok_hit;
	f32 vram_other;
	f32 vram_detail_all;
	f32 vram_chr_and_parts;
	f32 havok_navimesh;
	dummy8 reserve_1[24];
};
typedef struct _BUDGET_PARAM_ST BUDGET_PARAM_ST;

struct _BULLET_CREATE_LIMIT_PARAM_ST {
	u8 limitNum_byGroup;
	u8 isLimitEachOwner: 1;
	dummy8 pad2: 7;
	dummy8 pad[30];
};
typedef struct _BULLET_CREATE_LIMIT_PARAM_ST BULLET_CREATE_LIMIT_PARAM_ST;

struct _BULLET_PARAM_ST {
	s32 atkId_Bullet;
	s32 sfxId_Bullet;
	s32 sfxId_Hit;
	s32 sfxId_Flick;
	f32 life;
	f32 dist;
	f32 shootInterval;
	f32 gravityInRange;
	f32 gravityOutRange;
	f32 hormingStopRange;
	f32 initVellocity;
	f32 accelInRange;
	f32 accelOutRange;
	f32 maxVellocity;
	f32 minVellocity;
	f32 accelTime;
	f32 homingBeginDist;
	f32 hitRadius;
	f32 hitRadiusMax;
	f32 spreadTime;
	f32 expDelay;
	f32 hormingOffsetRange;
	f32 dmgHitRecordLifeTime;
	f32 externalForce;
	s32 spEffectIDForShooter;
	s32 autoSearchNPCThinkID;
	s32 HitBulletID;
	s32 spEffectId0;
	s32 spEffectId1;
	s32 spEffectId2;
	s32 spEffectId3;
	s32 spEffectId4;
	u16 numShoot;
	s16 homingAngle;
	s16 shootAngle;
	s16 shootAngleInterval;
	s16 shootAngleXInterval;
	s8 damageDamp;
	s8 spelDamageDamp;
	s8 fireDamageDamp;
	s8 thunderDamageDamp;
	s8 staminaDamp;
	s8 knockbackDamp;
	s8 shootAngleXZ;
	u8 lockShootLimitAng;
	dummy8 pad2[1];
	u8 prevVelocityDirRate;
	u8 atkAttribute;
	u8 spAttribute;
	u8 Material_AttackType;
	u8 Material_AttackMaterial;
	u8 isPenetrateChr: 1;
	u8 isPenetrateObj: 1;
	dummy8 pad: 6;
	u8 launchConditionType;
	u8 FollowType: 3;
	u8 EmittePosType: 3;
	u8 isAttackSFX: 1;
	u8 isEndlessHit: 1;
	u8 isPenetrateMap: 1;
	u8 isHitBothTeam: 1;
	u8 isUseSharedHitList: 1;
	u8 isUseMultiDmyPolyIfPlace: 1;
	u8 isHitOtherBulletForceEraseA: 1;
	u8 isHitOtherBulletForceEraseB: 1;
	u8 isHitForceMagic: 1;
	u8 isIgnoreSfxIfHitWater: 1;
	u8 isIgnoreMoveStateIfHitWater: 1;
	u8 isHitDarkForceMagic: 1;
	u8 dmgCalcSide: 2;
	u8 isEnableAutoHoming: 1;
	u8 isSyncBulletCulcDumypolyPos: 1;
	u8 isOwnerOverrideInitAngle: 1;
	u8 isInheritSfxToChild: 1;
	s8 darkDamageDamp;
	s8 bulletSfxDeleteType_byHit;
	s8 bulletSfxDeleteType_byLifeDead;
	f32 targetYOffsetRange;
	f32 shootAngleYMaxRandom;
	f32 shootAngleXMaxRandom;
	s32 intervalCreateBulletId;
	f32 intervalCreateTimeMin;
	f32 intervalCreateTimeMax;
	f32 predictionShootObserveTime;
	f32 intervalCreateWaitTime;
	u8 sfxPostureType;
	u8 createLimitGroupId;
	dummy8 pad5[1];
	u8 isInheritSpeedToChild: 1;
	u8 isDisableHitSfx_byChrAndObj: 1;
	u8 isCheckWall_byCenterRay: 1;
	u8 isHitFlare: 1;
	u8 isUseBulletWallFilter: 1;
	dummy8 pad1: 1;
	u8 isNonDependenceMagicForFunnleNum: 1;
	u8 isAiInterruptShootNoDamageBullet: 1;
	f32 randomCreateRadius;
	f32 followOffset_BaseHeight;
	s32 assetNo_Hit;
	f32 lifeRandomRange;
	s16 homingAngleX;
	u8 ballisticCalcType;
	u8 attachEffectType;
	s32 seId_Bullet1;
	s32 seId_Bullet2;
	s32 seId_Hit;
	s32 seId_Flick;
	s16 howitzerShootAngleXMin;
	s16 howitzerShootAngleXMax;
	f32 howitzerInitMinVelocity;
	f32 howitzerInitMaxVelocity;
	s32 sfxId_ForceErase;
	s8 bulletSfxDeleteType_byForceErase;
	dummy8 pad3[1];
	s16 followDmypoly_forSfxPose;
	f32 followOffset_Radius;
	f32 spBulletDistUpRate;
	f32 nolockTargetDist;
	dummy8 pad4[8];
};
typedef struct _BULLET_PARAM_ST BULLET_PARAM_ST;

struct _CACL_CORRECT_GRAPH_ST {
	f32 stageMaxVal0;
	f32 stageMaxVal1;
	f32 stageMaxVal2;
	f32 stageMaxVal3;
	f32 stageMaxVal4;
	f32 stageMaxGrowVal0;
	f32 stageMaxGrowVal1;
	f32 stageMaxGrowVal2;
	f32 stageMaxGrowVal3;
	f32 stageMaxGrowVal4;
	f32 adjPt_maxGrowVal0;
	f32 adjPt_maxGrowVal1;
	f32 adjPt_maxGrowVal2;
	f32 adjPt_maxGrowVal3;
	f32 adjPt_maxGrowVal4;
	f32 init_inclination_soul;
	f32 adjustment_value;
	f32 boundry_inclination_soul;
	f32 boundry_value;
	dummy8 pad[4];
};
typedef struct _CACL_CORRECT_GRAPH_ST CACL_CORRECT_GRAPH_ST;

struct _CAMERA_FADE_PARAM_ST {
	f32 NearMinDist;
	f32 NearMaxDist;
	f32 FarMinDist;
	f32 FarMaxDist;
	f32 MiddleAlpha;
	dummy8 dummy[12];
};
typedef struct _CAMERA_FADE_PARAM_ST CAMERA_FADE_PARAM_ST;

struct _CEREMONY_PARAM_ST {
	s32 eventLayerId;
	s32 mapStudioLayerId;
	s32 multiPlayAreaOffset;
	s32 overrideMapPlaceNameId;
	s32 overrideSaveMapNameId;
	dummy8 pad2[16];
};
typedef struct _CEREMONY_PARAM_ST CEREMONY_PARAM_ST;

struct _CHARACTER_INIT_PARAM {
	f32 baseRec_mp;
	f32 baseRec_sp;
	f32 red_Falldam;
	s32 soul;
	s32 equip_Wep_Right;
	s32 equip_Subwep_Right;
	s32 equip_Wep_Left;
	s32 equip_Subwep_Left;
	s32 equip_Helm;
	s32 equip_Armer;
	s32 equip_Gaunt;
	s32 equip_Leg;
	s32 equip_Arrow;
	s32 equip_Bolt;
	s32 equip_SubArrow;
	s32 equip_SubBolt;
	s32 equip_Accessory01;
	s32 equip_Accessory02;
	s32 equip_Accessory03;
	s32 equip_Accessory04;
	dummy8 pad8[4];
	s32 elixir_material00;
	s32 elixir_material01;
	s32 elixir_material02;
	s32 equip_Spell_01;
	s32 equip_Spell_02;
	s32 equip_Spell_03;
	s32 equip_Spell_04;
	s32 equip_Spell_05;
	s32 equip_Spell_06;
	s32 equip_Spell_07;
	s32 item_01;
	s32 item_02;
	s32 item_03;
	s32 item_04;
	s32 item_05;
	s32 item_06;
	s32 item_07;
	s32 item_08;
	s32 item_09;
	s32 item_10;
	s32 npcPlayerFaceGenId;
	s32 npcPlayerThinkId;
	u16 baseHp;
	u16 baseMp;
	u16 baseSp;
	u16 arrowNum;
	u16 boltNum;
	u16 subArrowNum;
	u16 subBoltNum;
	dummy8 pad4[6];
	s16 soulLv;
	u8 baseVit;
	u8 baseWil;
	u8 baseEnd;
	u8 baseStr;
	u8 baseDex;
	u8 baseMag;
	u8 baseFai;
	u8 baseLuc;
	u8 baseHeroPoint;
	u8 baseDurability;
	u8 itemNum_01;
	u8 itemNum_02;
	u8 itemNum_03;
	u8 itemNum_04;
	u8 itemNum_05;
	u8 itemNum_06;
	u8 itemNum_07;
	u8 itemNum_08;
	u8 itemNum_09;
	u8 itemNum_10;
	dummy8 pad5[5];
	s8 gestureId0;
	s8 gestureId1;
	s8 gestureId2;
	s8 gestureId3;
	s8 gestureId4;
	s8 gestureId5;
	s8 gestureId6;
	u8 npcPlayerType;
	s8 npcPlayerDrawType;
	u8 npcPlayerSex;
	u8 vowType: 4;
	u8 isSyncTarget: 1;
	dummy8 pad: 3;
	dummy8 pad6[2];
	u8 wepParamType_Right1;
	u8 wepParamType_Right2;
	u8 wepParamType_Right3;
	u8 wepParamType_Left1;
	u8 wepParamType_Left2;
	u8 wepParamType_Left3;
	dummy8 pad2[26];
	s32 equip_Subwep_Right3;
	s32 equip_Subwep_Left3;
	dummy8 pad3[4];
	s32 secondaryItem_01;
	s32 secondaryItem_02;
	s32 secondaryItem_03;
	s32 secondaryItem_04;
	s32 secondaryItem_05;
	s32 secondaryItem_06;
	u8 secondaryItemNum_01;
	u8 secondaryItemNum_02;
	u8 secondaryItemNum_03;
	u8 secondaryItemNum_04;
	u8 secondaryItemNum_05;
	u8 secondaryItemNum_06;
	s8 HpEstMax;
	s8 MpEstMax;
	dummy8 pad7[5];
	u8 voiceType;
	dummy8 reserve[6];
};
typedef struct _CHARACTER_INIT_PARAM CHARACTER_INIT_PARAM;

struct _CHARMAKEMENU_LISTITEM_PARAM_ST {
	s32 value;
	s32 captionId;
	u8 iconId;
	dummy8 reserved[7];
};
typedef struct _CHARMAKEMENU_LISTITEM_PARAM_ST CHARMAKEMENU_LISTITEM_PARAM_ST;

struct _CHARMAKEMENUTOP_PARAM_ST {
	s32 commandType;
	s32 captionId;
	s32 faceParamId;
	s32 tableId;
	s32 viewCondition;
	s8 previewMode;
	dummy8 reserved2[3];
	s32 tableId2;
	s32 refFaceParamId;
	s32 refTextId;
	s32 helpTextId;
	u32 unlockEventFlagId;
	dummy8 reserved[4];
};
typedef struct _CHARMAKEMENUTOP_PARAM_ST CHARMAKEMENUTOP_PARAM_ST;

struct _CHR_ACTIVATE_CONDITION_PARAM_ST {
	u8 weatherSunny: 1;
	u8 weatherClearSky: 1;
	u8 weatherWeakCloudy: 1;
	u8 weatherCloudy: 1;
	u8 weatherRain: 1;
	u8 weatherHeavyRain: 1;
	u8 weatherStorm: 1;
	u8 weatherStormForBattle: 1;
	u8 weatherSnow: 1;
	u8 weatherHeavySnow: 1;
	u8 weatherFog: 1;
	u8 weatherHeavyFog: 1;
	u8 weatherHeavyFogRain: 1;
	u8 weatherSandStorm: 1;
	dummy8 pad1: 2;
	u8 timeStartHour;
	u8 timeStartMin;
	u8 timeEndHour;
	u8 timeEndMin;
	dummy8 pad2[2];
};
typedef struct _CHR_ACTIVATE_CONDITION_PARAM_ST CHR_ACTIVATE_CONDITION_PARAM_ST;

struct _CHR_MODEL_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 modelMemoryType;
	u8 texMemoryType;
	s16 cameraDitherFadeId;
	f32 reportAnimMemSizeMb;
};
typedef struct _CHR_MODEL_PARAM_ST CHR_MODEL_PARAM_ST;

struct _CLEAR_COUNT_CORRECT_PARAM_ST {
	f32 MaxHpRate;
	f32 MaxMpRate;
	f32 MaxStaminaRate;
	f32 PhysicsAttackRate;
	f32 SlashAttackRate;
	f32 BlowAttackRate;
	f32 ThrustAttackRate;
	f32 NeturalAttackRate;
	f32 MagicAttackRate;
	f32 FireAttackRate;
	f32 ThunderAttackRate;
	f32 DarkAttackRate;
	f32 PhysicsDefenseRate;
	f32 MagicDefenseRate;
	f32 FireDefenseRate;
	f32 ThunderDefenseRate;
	f32 DarkDefenseRate;
	f32 StaminaAttackRate;
	f32 SoulRate;
	f32 PoisionResistRate;
	f32 DiseaseResistRate;
	f32 BloodResistRate;
	f32 CurseResistRate;
	f32 FreezeResistRate;
	f32 BloodDamageRate;
	f32 SuperArmorDamageRate;
	f32 FreezeDamageRate;
	f32 SleepResistRate;
	f32 MadnessResistRate;
	f32 SleepDamageRate;
	f32 MadnessDamageRate;
	dummy8 pad1[4];
};
typedef struct _CLEAR_COUNT_CORRECT_PARAM_ST CLEAR_COUNT_CORRECT_PARAM_ST;

struct _COMMON_SYSTEM_PARAM_ST {
	u32 mapSaveMapNameIdOnGameStart;
	dummy8 reserve0[60];
};
typedef struct _COMMON_SYSTEM_PARAM_ST COMMON_SYSTEM_PARAM_ST;

struct _COOL_TIME_PARAM_ST {
	f32 limitationTime_0;
	f32 observeTime_0;
	f32 limitationTime_1;
	f32 observeTime_1;
	f32 limitationTime_2;
	f32 observeTime_2;
	f32 limitationTime_3;
	f32 observeTime_3;
};
typedef struct _COOL_TIME_PARAM_ST COOL_TIME_PARAM_ST;

struct _CUTSCENE_GPARAM_TIME_PARAM_ST {
	u8 disableParam_NT: 1;
	u8 disableParam_Debug: 1;
	dummy8 disableParamReserve1: 6;
	dummy8 disableParamReserve2[3];
	u8 DstTimezone_Morning;
	u8 DstTimezone_Noon;
	u8 DstTimezone_AfterNoon;
	u8 DstTimezone_Evening;
	u8 DstTimezone_Night;
	u8 DstTimezone_DeepNightA;
	u8 DstTimezone_DeepNightB;
	dummy8 reserved[1];
	f32 PostPlayIngameTime;
};
typedef struct _CUTSCENE_GPARAM_TIME_PARAM_ST CUTSCENE_GPARAM_TIME_PARAM_ST;

struct _CUTSCENE_GPARAM_WEATHER_PARAM_ST {
	u8 disableParam_NT: 1;
	u8 disableParam_Debug: 1;
	dummy8 disableParamReserve1: 6;
	dummy8 disableParamReserve2[3];
	s16 DstWeather_Sunny;
	s16 DstWeather_ClearSky;
	s16 DstWeather_WeakCloudy;
	s16 DstWeather_Cloud;
	s16 DstWeather_Rain;
	s16 DstWeather_HeavyRain;
	s16 DstWeather_Storm;
	s16 DstWeather_StormForBattle;
	s16 DstWeather_Snow;
	s16 DstWeather_HeavySnow;
	s16 DstWeather_Fog;
	s16 DstWeather_HeavyFog;
	s16 DstWeather_SandStorm;
	s16 DstWeather_HeavyFogRain;
	s16 PostPlayIngameWeather;
	u8 IndoorOutdoorType;
	u8 TakeOverDstWeather_Sunny;
	u8 TakeOverDstWeather_ClearSky;
	u8 TakeOverDstWeather_WeakCloudy;
	u8 TakeOverDstWeather_Cloud;
	u8 TakeOverDstWeather_Rain;
	u8 TakeOverDstWeather_HeavyRain;
	u8 TakeOverDstWeather_Storm;
	u8 TakeOverDstWeather_StormForBattle;
	u8 TakeOverDstWeather_Snow;
	u8 TakeOverDstWeather_HeavySnow;
	u8 TakeOverDstWeather_Fog;
	u8 TakeOverDstWeather_HeavyFog;
	u8 TakeOverDstWeather_SandStorm;
	u8 TakeOverDstWeather_HeavyFogRain;
	dummy8 reserved[7];
	s16 DstWeather_Snowstorm;
	s16 DstWeather_LightningStorm;
	s16 DstWeather_Reserved3;
	s16 DstWeather_Reserved4;
	s16 DstWeather_Reserved5;
	s16 DstWeather_Reserved6;
	s16 DstWeather_Reserved7;
	s16 DstWeather_Reserved8;
	u8 TakeOverDstWeather_Snowstorm;
	u8 TakeOverDstWeather_LightningStorm;
	u8 TakeOverDstWeather_Reserved3;
	u8 TakeOverDstWeather_Reserved4;
	u8 TakeOverDstWeather_Reserved5;
	u8 TakeOverDstWeather_Reserved6;
	u8 TakeOverDstWeather_Reserved7;
	u8 TakeOverDstWeather_Reserved8;
	u8 IsEnableApplyMapGdRegionIdForGparam;
	dummy8 reserved2[1];
	s16 OverrideMapGdRegionId;
	dummy8 reserved1[12];
};
typedef struct _CUTSCENE_GPARAM_WEATHER_PARAM_ST CUTSCENE_GPARAM_WEATHER_PARAM_ST;

struct _CUTSCENE_MAP_ID_PARAM_ST {
	u8 disableParam_NT: 1;
	u8 disableParam_Debug: 1;
	dummy8 disableParamReserve1: 6;
	dummy8 disableParamReserve2[3];
	u32 PlayMapId;
	u32 RequireMapId0;
	u32 RequireMapId1;
	u32 RequireMapId2;
	s32 RefCamPosHitPartsID;
	dummy8 reserved_2[12];
	u16 ClientDisableViewTimeForProgress;
	dummy8 reserved[2];
	s32 HitParts_0;
	s32 HitParts_1;
};
typedef struct _CUTSCENE_MAP_ID_PARAM_ST CUTSCENE_MAP_ID_PARAM_ST;

struct _CUTSCENE_TEXTURE_LOAD_PARAM_ST {
	u8 disableParam_NT: 1;
	u8 disableParam_Debug: 1;
	dummy8 disableParamReserve1: 6;
	dummy8 disableParamReserve2[3];
	fixstr texName_00[16];
	fixstr texName_01[16];
	fixstr texName_02[16];
	fixstr texName_03[16];
	fixstr texName_04[16];
	fixstr texName_05[16];
	fixstr texName_06[16];
	fixstr texName_07[16];
	fixstr texName_08[16];
	fixstr texName_09[16];
	fixstr texName_10[16];
	fixstr texName_11[16];
	fixstr texName_12[16];
	fixstr texName_13[16];
	fixstr texName_14[16];
	fixstr texName_15[16];
};
typedef struct _CUTSCENE_TEXTURE_LOAD_PARAM_ST CUTSCENE_TEXTURE_LOAD_PARAM_ST;

struct _CUTSCENE_TIMEZONE_CONVERT_PARAM_ST {
	f32 SrcTimezoneStart;
	f32 DstCutscenTime;
};
typedef struct _CUTSCENE_TIMEZONE_CONVERT_PARAM_ST CUTSCENE_TIMEZONE_CONVERT_PARAM_ST;

struct _CUTSCENE_WEATHER_OVERRIDE_GPARAM_ID_CONVERT_PARAM_ST {
	u32 weatherOverrideGparamId;
};
typedef struct _CUTSCENE_WEATHER_OVERRIDE_GPARAM_ID_CONVERT_PARAM_ST CUTSCENE_WEATHER_OVERRIDE_GPARAM_ID_CONVERT_PARAM_ST;

struct _DECAL_PARAM_ST {
	s32 textureId;
	s32 dmypolyId;
	f32 pitchAngle;
	f32 yawAngle;
	f32 nearDistance;
	f32 farDistance;
	f32 nearSize;
	f32 farSize;
	s32 maskSpeffectId;
	u32 pad_10: 4;
	u32 replaceTextureId_byMaterial: 1;
	u32 dmypolyCategory: 2;
	u32 pad_05: 4;
	u32 useDeferredDecal: 1;
	u32 usePaintDecal: 1;
	u32 bloodTypeEnable: 1;
	u32 bUseNormal: 1;
	u32 pad_08: 1;
	u32 pad_09: 1;
	u32 usePom: 1;
	u32 useEmissive: 1;
	u32 putVertical: 1;
	s16 randomSizeMin;
	s16 randomSizeMax;
	f32 randomRollMin;
	f32 randomRollMax;
	f32 randomPitchMin;
	f32 randomPitchMax;
	f32 randomYawMin;
	f32 randomYawMax;
	f32 pomHightScale;
	u8 pomSampleMin;
	u8 pomSampleMax;
	s8 blendMode;
	s8 appearDirType;
	f32 emissiveValueBegin;
	f32 emissiveValueEnd;
	f32 emissiveTime;
	u8 bIntpEnable;
	dummy8 pad_01[3];
	f32 intpIntervalDist;
	s32 beginIntpTextureId;
	s32 endIntpTextureId;
	s32 appearSfxId;
	f32 appearSfxOffsetPos;
	s32 maskTextureId;
	s32 diffuseTextureId;
	s32 reflecTextureId;
	f32 maskScale;
	s32 normalTextureId;
	s32 heightTextureId;
	s32 emissiveTextureId;
	u8 diffuseColorR;
	u8 diffuseColorG;
	u8 diffuseColorB;
	dummy8 pad_03[1];
	u8 reflecColorR;
	u8 reflecColorG;
	u8 reflecColorB;
	u8 bLifeEnable;
	f32 siniScale;
	f32 lifeTimeSec;
	f32 fadeOutTimeSec;
	s16 priority;
	u8 bDistThinOutEnable;
	u8 bAlignedTexRandomVariationEnable;
	f32 distThinOutCheckDist;
	f32 distThinOutCheckAngleDeg;
	u8 distThinOutMaxNum;
	u8 distThinOutCheckNum;
	s16 delayAppearFrame;
	u32 randVaria_Diffuse: 4;
	u32 randVaria_Mask: 4;
	u32 randVaria_Reflec: 4;
	u32 pad_12: 4;
	u32 randVaria_Normal: 4;
	u32 randVaria_Height: 4;
	u32 randVaria_Emissive: 4;
	u32 pad_11: 4;
	f32 fadeInTimeSec;
	f32 thinOutOverlapMultiRadius;
	f32 thinOutNeighborAddRadius;
	u32 thinOutOverlapLimitNum;
	u32 thinOutNeighborLimitNum;
	s8 thinOutMode;
	u8 emissiveColorR;
	u8 emissiveColorG;
	u8 emissiveColorB;
	f32 maxDecalSfxCreatableSlopeAngleDeg;
	dummy8 pad_02[40];
};
typedef struct _DECAL_PARAM_ST DECAL_PARAM_ST;

struct _DEFAULT_KEY_ASSIGN {
	u8 priority0: 1;
	u8 priority1: 1;
	u8 priority2: 1;
	u8 priority3: 1;
	u8 priority4: 1;
	u8 priority5: 1;
	u8 priority6: 1;
	u8 priority7: 1;
	u8 priority8: 1;
	u8 priority9: 1;
	u8 priority10: 1;
	u8 priority11: 1;
	u8 priority12: 1;
	u8 priority13: 1;
	u8 priority14: 1;
	u8 priority15: 1;
	u8 priority16: 1;
	u8 priority17: 1;
	u8 priority18: 1;
	u8 priority19: 1;
	u8 priority20: 1;
	u8 priority21: 1;
	u8 priority22: 1;
	u8 priority23: 1;
	u8 priority24: 1;
	u8 priority25: 1;
	u8 priority26: 1;
	u8 priority27: 1;
	u8 priority28: 1;
	u8 priority29: 1;
	u8 priority30: 1;
	u8 priority31: 1;
	dummy8 dummy[12];
	s32 phyisicalKey_0;
	u8 traitsType_0;
	u8 a2dOperator_0;
	u8 applyTarget_0;
	u8 isAnalog_0: 1;
	u8 enableWin64_0: 1;
	u8 enablePS4_0: 1;
	u8 enableXboxOne_0: 1;
	f32 time1_0;
	f32 time2_0;
	f32 a2dThreshold_0;
	s32 phyisicalKey_1;
	u8 traitsType_1;
	u8 a2dOperator_1;
	u8 applyTarget_1;
	u8 isAnalog_1: 1;
	u8 enableWin64_1: 1;
	u8 enablePS4_1: 1;
	u8 enableXboxOne_1: 1;
	f32 time1_1;
	f32 time2_1;
	f32 a2dThreshold_1;
	s32 phyisicalKey_2;
	u8 traitsType_2;
	u8 a2dOperator_2;
	u8 applyTarget_2;
	u8 isAnalog_2: 1;
	u8 enableWin64_2: 1;
	u8 enablePS4_2: 1;
	u8 enableXboxOne_2: 1;
	f32 time1_2;
	f32 time2_2;
	f32 a2dThreshold_2;
	s32 phyisicalKey_3;
	u8 traitsType_3;
	u8 a2dOperator_3;
	u8 applyTarget_3;
	u8 isAnalog_3: 1;
	u8 enableWin64_3: 1;
	u8 enablePS4_3: 1;
	u8 enableXboxOne_3: 1;
	f32 time1_3;
	f32 time2_3;
	f32 a2dThreshold_3;
	s32 phyisicalKey_4;
	u8 traitsType_4;
	u8 a2dOperator_4;
	u8 applyTarget_4;
	u8 isAnalog_4: 1;
	u8 enableWin64_4: 1;
	u8 enablePS4_4: 1;
	u8 enableXboxOne_4: 1;
	f32 time1_4;
	f32 time2_4;
	f32 a2dThreshold_4;
	s32 phyisicalKey_5;
	u8 traitsType_5;
	u8 a2dOperator_5;
	u8 applyTarget_5;
	u8 isAnalog_5: 1;
	u8 enableWin64_5: 1;
	u8 enablePS4_5: 1;
	u8 enableXboxOne_5: 1;
	f32 time1_5;
	f32 time2_5;
	f32 a2dThreshold_5;
	s32 phyisicalKey_6;
	u8 traitsType_6;
	u8 a2dOperator_6;
	u8 applyTarget_6;
	u8 isAnalog_6: 1;
	u8 enableWin64_6: 1;
	u8 enablePS4_6: 1;
	u8 enableXboxOne_6: 1;
	f32 time1_6;
	f32 time2_6;
	f32 a2dThreshold_6;
	s32 phyisicalKey_7;
	u8 traitsType_7;
	u8 a2dOperator_7;
	u8 applyTarget_7;
	u8 isAnalog_7: 1;
	u8 enableWin64_7: 1;
	u8 enablePS4_7: 1;
	u8 enableXboxOne_7: 1;
	f32 time1_7;
	f32 time2_7;
	f32 a2dThreshold_7;
};
typedef struct _DEFAULT_KEY_ASSIGN DEFAULT_KEY_ASSIGN;

struct _DIRECTION_CAMERA_PARAM_ST {
	u8 isUseOption: 1;
	dummy8 pad2: 3;
	dummy8 pad1[15];
};
typedef struct _DIRECTION_CAMERA_PARAM_ST DIRECTION_CAMERA_PARAM_ST;

struct _ENEMY_COMMON_PARAM_ST {
	dummy8 reserved0[8];
	s32 soundTargetTryApproachTime;
	s32 searchTargetTryApproachTime;
	s32 memoryTargetTryApproachTime;
	dummy8 reserved5[40];
	s32 activateChrByTime_PhantomId;
	f32 findUnfavorableFailedPointDist;
	f32 findUnfavorableFailedPointHeight;
	dummy8 reserved18[184];
};
typedef struct _ENEMY_COMMON_PARAM_ST ENEMY_COMMON_PARAM_ST;

struct _ENEMY_STANDARD_INFO_BANK {
	s32 EnemyBehaviorID;
	u16 HP;
	u16 AttackPower;
	s32 ChrType;
	f32 HitHeight;
	f32 HitRadius;
	f32 Weight;
	f32 DynamicFriction;
	f32 StaticFriction;
	s32 UpperDefState;
	s32 ActionDefState;
	f32 RotY_per_Second;
	dummy8 reserve0[20];
	u8 RotY_per_Second_old;
	u8 EnableSideStep;
	u8 UseRagdollHit;
	dummy8 reserve_last[5];
	u16 stamina;
	u16 staminaRecover;
	u16 staminaConsumption;
	u16 deffenct_Phys;
	dummy8 reserve_last2[48];
};
typedef struct _ENEMY_STANDARD_INFO_BANK ENEMY_STANDARD_INFO_BANK;

struct _ENV_OBJ_LOT_PARAM_ST {
	s32 AssetId_0;
	s32 AssetId_1;
	s32 AssetId_2;
	s32 AssetId_3;
	s32 AssetId_4;
	s32 AssetId_5;
	s32 AssetId_6;
	s32 AssetId_7;
	u8 CreateWeight_0;
	u8 CreateWeight_1;
	u8 CreateWeight_2;
	u8 CreateWeight_3;
	u8 CreateWeight_4;
	u8 CreateWeight_5;
	u8 CreateWeight_6;
	u8 CreateWeight_7;
	dummy8 Reserve_0[24];
};
typedef struct _ENV_OBJ_LOT_PARAM_ST ENV_OBJ_LOT_PARAM_ST;

struct _EQUIP_MTRL_SET_PARAM_ST {
	s32 materialId01;
	s32 materialId02;
	s32 materialId03;
	s32 materialId04;
	s32 materialId05;
	s32 materialId06;
	dummy8 pad_id[8];
	s8 itemNum01;
	s8 itemNum02;
	s8 itemNum03;
	s8 itemNum04;
	s8 itemNum05;
	s8 itemNum06;
	dummy8 pad_num[2];
	u8 materialCate01;
	u8 materialCate02;
	u8 materialCate03;
	u8 materialCate04;
	u8 materialCate05;
	u8 materialCate06;
	dummy8 pad_cate[2];
	u8 isDisableDispNum01: 1;
	u8 isDisableDispNum02: 1;
	u8 isDisableDispNum03: 1;
	u8 isDisableDispNum04: 1;
	u8 isDisableDispNum05: 1;
	u8 isDisableDispNum06: 1;
	dummy8 pad[3];
};
typedef struct _EQUIP_MTRL_SET_PARAM_ST EQUIP_MTRL_SET_PARAM_ST;

struct _EQUIP_PARAM_ACCESSORY_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 refId;
	s32 sfxVariationId;
	f32 weight;
	s32 behaviorId;
	s32 basicPrice;
	s32 sellValue;
	s32 sortId;
	s32 qwcId;
	u16 equipModelId;
	u16 iconId;
	s16 shopLv;
	s16 trophySGradeId;
	s16 trophySeqId;
	u8 equipModelCategory;
	u8 equipModelGender;
	u8 accessoryCategory;
	u8 refCategory;
	u8 spEffectCategory;
	u8 sortGroupId;
	s32 vagrantItemLotId;
	s32 vagrantBonusEneDropItemLotId;
	s32 vagrantItemEneDropItemLotId;
	u8 isDeposit: 1;
	u8 isEquipOutBrake: 1;
	u8 disableMultiDropShare: 1;
	u8 isDiscard: 1;
	u8 isDrop: 1;
	u8 showLogCondType: 1;
	u8 showDialogCondType: 2;
	u8 rarity;
	dummy8 pad2[2];
	s32 saleValue;
	s16 accessoryGroup;
	dummy8 pad3[1];
	s8 compTrophySedId;
	s32 residentSpEffectId1;
	s32 residentSpEffectId2;
	s32 residentSpEffectId3;
	s32 residentSpEffectId4;
	dummy8 pad1[4];
};
typedef struct _EQUIP_PARAM_ACCESSORY_ST EQUIP_PARAM_ACCESSORY_ST;

struct _EQUIP_PARAM_CUSTOM_WEAPON_ST {
	s32 baseWepId;
	s32 gemId;
	u8 reinforceLv;
	dummy8 pad[7];
};
typedef struct _EQUIP_PARAM_CUSTOM_WEAPON_ST EQUIP_PARAM_CUSTOM_WEAPON_ST;

struct _EQUIP_PARAM_GEM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u16 iconId;
	s8 rank;
	u8 sortGroupId;
	s32 spEffectId0;
	s32 spEffectId1;
	s32 spEffectId2;
	u32 itemGetTutorialFlagId;
	s32 swordArtsParamId;
	s32 mountValue;
	s32 sellValue;
	s32 saleValue;
	s32 sortId;
	s16 compTrophySedId;
	s16 trophySeqId;
	u8 configurableWepAttr00: 1;
	u8 configurableWepAttr01: 1;
	u8 configurableWepAttr02: 1;
	u8 configurableWepAttr03: 1;
	u8 configurableWepAttr04: 1;
	u8 configurableWepAttr05: 1;
	u8 configurableWepAttr06: 1;
	u8 configurableWepAttr07: 1;
	u8 configurableWepAttr08: 1;
	u8 configurableWepAttr09: 1;
	u8 configurableWepAttr10: 1;
	u8 configurableWepAttr11: 1;
	u8 configurableWepAttr12: 1;
	u8 configurableWepAttr13: 1;
	u8 configurableWepAttr14: 1;
	u8 configurableWepAttr15: 1;
	u8 rarity;
	u8 configurableWepAttr16: 1;
	u8 configurableWepAttr17: 1;
	u8 configurableWepAttr18: 1;
	u8 configurableWepAttr19: 1;
	u8 configurableWepAttr20: 1;
	u8 configurableWepAttr21: 1;
	u8 configurableWepAttr22: 1;
	u8 configurableWepAttr23: 1;
	u8 isDiscard: 1;
	u8 isDrop: 1;
	u8 isDeposit: 1;
	u8 disableMultiDropShare: 1;
	u8 showDialogCondType: 2;
	u8 showLogCondType: 1;
	dummy8 pad: 1;
	u8 defaultWepAttr;
	dummy8 pad2[2];
	u8 canMountWep_Dagger: 1;
	u8 canMountWep_SwordNormal: 1;
	u8 canMountWep_SwordLarge: 1;
	u8 canMountWep_SwordGigantic: 1;
	u8 canMountWep_SaberNormal: 1;
	u8 canMountWep_SaberLarge: 1;
	u8 canMountWep_katana: 1;
	u8 canMountWep_SwordDoubleEdge: 1;
	u8 canMountWep_SwordPierce: 1;
	u8 canMountWep_RapierHeavy: 1;
	u8 canMountWep_AxeNormal: 1;
	u8 canMountWep_AxeLarge: 1;
	u8 canMountWep_HammerNormal: 1;
	u8 canMountWep_HammerLarge: 1;
	u8 canMountWep_Flail: 1;
	u8 canMountWep_SpearNormal: 1;
	u8 canMountWep_SpearLarge: 1;
	u8 canMountWep_SpearHeavy: 1;
	u8 canMountWep_SpearAxe: 1;
	u8 canMountWep_Sickle: 1;
	u8 canMountWep_Knuckle: 1;
	u8 canMountWep_Claw: 1;
	u8 canMountWep_Whip: 1;
	u8 canMountWep_AxhammerLarge: 1;
	u8 canMountWep_BowSmall: 1;
	u8 canMountWep_BowNormal: 1;
	u8 canMountWep_BowLarge: 1;
	u8 canMountWep_ClossBow: 1;
	u8 canMountWep_Ballista: 1;
	u8 canMountWep_Staff: 1;
	u8 canMountWep_Sorcery: 1;
	u8 canMountWep_Talisman: 1;
	u8 canMountWep_ShieldSmall: 1;
	u8 canMountWep_ShieldNormal: 1;
	u8 canMountWep_ShieldLarge: 1;
	u8 canMountWep_Torch: 1;
	dummy8 reserved_canMountWep: 4;
	dummy8 reserved2_canMountWep[3];
	s32 spEffectMsgId0;
	s32 spEffectMsgId1;
	s32 spEffectId_forAtk0;
	s32 spEffectId_forAtk1;
	s32 spEffectId_forAtk2;
	s32 mountWepTextId;
	dummy8 pad6[8];
};
typedef struct _EQUIP_PARAM_GEM_ST EQUIP_PARAM_GEM_ST;

struct _EQUIP_PARAM_GOODS_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 refId_default;
	s32 sfxVariationId;
	f32 weight;
	s32 basicPrice;
	s32 sellValue;
	s32 behaviorId;
	s32 replaceItemId;
	s32 sortId;
	s32 appearanceReplaceItemId;
	s32 yesNoDialogMessageId;
	u16 useEnableSpEffectType;
	s8 potGroupId;
	dummy8 pad[1];
	u16 iconId;
	u16 modelId;
	s16 shopLv;
	s16 compTrophySedId;
	s16 trophySeqId;
	s16 maxNum;
	u8 consumeHeroPoint;
	u8 overDexterity;
	u8 goodsType;
	u8 refCategory;
	u8 spEffectCategory;
	dummy8 pad3[1];
	u8 goodsUseAnim;
	u8 opmeMenuType;
	u8 useLimitCategory;
	u8 replaceCategory;
	dummy8 reserve4[2];
	u8 enable_live: 1;
	u8 enable_gray: 1;
	u8 enable_white: 1;
	u8 enable_black: 1;
	u8 enable_multi: 1;
	u8 disable_offline: 1;
	u8 isEquip: 1;
	u8 isConsume: 1;
	u8 isAutoEquip: 1;
	u8 isEstablishment: 1;
	u8 isOnlyOne: 1;
	u8 isDiscard: 1;
	u8 isDeposit: 1;
	u8 isDisableHand: 1;
	u8 isRemoveItem_forGameClear: 1;
	u8 isSuppleItem: 1;
	u8 isFullSuppleItem: 1;
	u8 isEnhance: 1;
	u8 isFixItem: 1;
	u8 disableMultiDropShare: 1;
	u8 disableUseAtColiseum: 1;
	u8 disableUseAtOutOfColiseum: 1;
	u8 isEnableFastUseItem: 1;
	u8 isApplySpecialEffect: 1;
	u8 syncNumVaryId;
	s32 refId_1;
	s32 refVirtualWepId;
	s32 vagrantItemLotId;
	s32 vagrantBonusEneDropItemLotId;
	s32 vagrantItemEneDropItemLotId;
	s32 castSfxId;
	s32 fireSfxId;
	s32 effectSfxId;
	u8 enable_ActiveBigRune: 1;
	u8 isBonfireWarpItem: 1;
	u8 enable_Ladder: 1;
	u8 isUseMultiPlayPreparation: 1;
	u8 canMultiUse: 1;
	u8 isShieldEnchant: 1;
	u8 isWarpProhibited: 1;
	u8 isUseMultiPenaltyOnly: 1;
	u8 suppleType;
	u8 autoReplenishType;
	u8 isDrop: 1;
	u8 showLogCondType: 1;
	u8 isSummonHorse: 1;
	u8 showDialogCondType: 2;
	u8 isSleepCollectionItem: 1;
	u8 enableRiding: 1;
	u8 disableRiding: 1;
	s16 maxRepositoryNum;
	u8 sortGroupId;
	u8 isUseNoAttackRegion: 1;
	dummy8 pad1: 7;
	s32 saleValue;
	u8 rarity;
	u8 useLimitSummonBuddy;
	u16 useLimitSpEffectType;
	s32 aiUseJudgeId;
	s16 consumeMP;
	s16 consumeHP;
	s32 reinforceGoodsId;
	s32 reinforceMaterialId;
	s32 reinforcePrice;
	s8 useLevel_vowType0;
	s8 useLevel_vowType1;
	s8 useLevel_vowType2;
	s8 useLevel_vowType3;
	s8 useLevel_vowType4;
	s8 useLevel_vowType5;
	s8 useLevel_vowType6;
	s8 useLevel_vowType7;
	s8 useLevel_vowType8;
	s8 useLevel_vowType9;
	s8 useLevel_vowType10;
	s8 useLevel_vowType11;
	s8 useLevel_vowType12;
	s8 useLevel_vowType13;
	s8 useLevel_vowType14;
	s8 useLevel_vowType15;
	u16 useLevel;
	dummy8 reserve5[2];
	u32 itemGetTutorialFlagId;
	dummy8 reserve3[8];
};
typedef struct _EQUIP_PARAM_GOODS_ST EQUIP_PARAM_GOODS_ST;

struct _EQUIP_PARAM_PROTECTOR_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 sortId;
	u32 wanderingEquipId;
	u16 resistSleep;
	u16 resistMadness;
	f32 saDurability;
	f32 toughnessCorrectRate;
	s32 fixPrice;
	s32 basicPrice;
	s32 sellValue;
	f32 weight;
	s32 residentSpEffectId;
	s32 residentSpEffectId2;
	s32 residentSpEffectId3;
	s32 materialSetId;
	f32 partsDamageRate;
	f32 corectSARecover;
	s32 originEquipPro;
	s32 originEquipPro1;
	s32 originEquipPro2;
	s32 originEquipPro3;
	s32 originEquipPro4;
	s32 originEquipPro5;
	s32 originEquipPro6;
	s32 originEquipPro7;
	s32 originEquipPro8;
	s32 originEquipPro9;
	s32 originEquipPro10;
	s32 originEquipPro11;
	s32 originEquipPro12;
	s32 originEquipPro13;
	s32 originEquipPro14;
	s32 originEquipPro15;
	f32 faceScaleM_ScaleX;
	f32 faceScaleM_ScaleZ;
	f32 faceScaleM_MaxX;
	f32 faceScaleM_MaxZ;
	f32 faceScaleF_ScaleX;
	f32 faceScaleF_ScaleZ;
	f32 faceScaleF_MaxX;
	f32 faceScaleF_MaxZ;
	s32 qwcId;
	u16 equipModelId;
	u16 iconIdM;
	u16 iconIdF;
	u16 knockBack;
	u16 knockbackBounceRate;
	u16 durability;
	u16 durabilityMax;
	dummy8 pad03[2];
	u16 defFlickPower;
	u16 defensePhysics;
	u16 defenseMagic;
	u16 defenseFire;
	u16 defenseThunder;
	s16 defenseSlash;
	s16 defenseBlow;
	s16 defenseThrust;
	u16 resistPoison;
	u16 resistDisease;
	u16 resistBlood;
	u16 resistCurse;
	s16 reinforceTypeId;
	s16 trophySGradeId;
	s16 shopLv;
	u8 knockbackParamId;
	u8 flickDamageCutRate;
	u8 equipModelCategory;
	u8 equipModelGender;
	u8 protectorCategory;
	u8 rarity;
	u8 sortGroupId;
	u8 partsDmgType;
	dummy8 pad04[2];
	u8 isDeposit: 1;
	u8 headEquip: 1;
	u8 bodyEquip: 1;
	u8 armEquip: 1;
	u8 legEquip: 1;
	u8 useFaceScale: 1;
	u8 isSkipWeakDamageAnim: 1;
	dummy8 pad06: 1;
	u8 defenseMaterialVariationValue_Weak;
	s16 autoFootEffectDecalBaseId2;
	s16 autoFootEffectDecalBaseId3;
	u8 defenseMaterialVariationValue;
	u8 isDiscard: 1;
	u8 isDrop: 1;
	u8 disableMultiDropShare: 1;
	u8 simpleModelForDlc: 1;
	u8 showLogCondType: 1;
	u8 showDialogCondType: 2;
	dummy8 pad: 1;
	f32 neutralDamageCutRate;
	f32 slashDamageCutRate;
	f32 blowDamageCutRate;
	f32 thrustDamageCutRate;
	f32 magicDamageCutRate;
	f32 fireDamageCutRate;
	f32 thunderDamageCutRate;
	u16 defenseMaterialSfx1;
	u16 defenseMaterialSfx_Weak1;
	u16 defenseMaterial1;
	u16 defenseMaterial_Weak1;
	u16 defenseMaterialSfx2;
	u16 defenseMaterialSfx_Weak2;
	u16 footMaterialSe;
	u16 defenseMaterial_Weak2;
	s32 autoFootEffectDecalBaseId1;
	f32 toughnessDamageCutRate;
	f32 toughnessRecoverCorrection;
	f32 darkDamageCutRate;
	u16 defenseDark;
	dummy8 invisibleFlag48: 1;
	dummy8 invisibleFlag49: 1;
	dummy8 invisibleFlag50: 1;
	dummy8 invisibleFlag51: 1;
	dummy8 invisibleFlag52: 1;
	dummy8 invisibleFlag53: 1;
	dummy8 invisibleFlag54: 1;
	dummy8 invisibleFlag55: 1;
	dummy8 invisibleFlag56: 1;
	dummy8 invisibleFlag57: 1;
	dummy8 invisibleFlag58: 1;
	dummy8 invisibleFlag59: 1;
	dummy8 invisibleFlag60: 1;
	dummy8 invisibleFlag61: 1;
	dummy8 invisibleFlag62: 1;
	dummy8 invisibleFlag63: 1;
	dummy8 invisibleFlag64: 1;
	dummy8 invisibleFlag65: 1;
	dummy8 invisibleFlag66: 1;
	dummy8 invisibleFlag67: 1;
	dummy8 invisibleFlag68: 1;
	dummy8 invisibleFlag69: 1;
	dummy8 invisibleFlag70: 1;
	dummy8 invisibleFlag71: 1;
	dummy8 invisibleFlag72: 1;
	dummy8 invisibleFlag73: 1;
	dummy8 invisibleFlag74: 1;
	dummy8 invisibleFlag75: 1;
	dummy8 invisibleFlag76: 1;
	dummy8 invisibleFlag77: 1;
	dummy8 invisibleFlag78: 1;
	dummy8 invisibleFlag79: 1;
	dummy8 invisibleFlag80: 1;
	dummy8 padbit: 7;
	u8 postureControlId;
	dummy8 pad2[4];
	s32 saleValue;
	u16 resistFreeze;
	u8 invisibleFlag_SexVer00;
	u8 invisibleFlag_SexVer01;
	u8 invisibleFlag_SexVer02;
	u8 invisibleFlag_SexVer03;
	u8 invisibleFlag_SexVer04;
	u8 invisibleFlag_SexVer05;
	u8 invisibleFlag_SexVer06;
	u8 invisibleFlag_SexVer07;
	u8 invisibleFlag_SexVer08;
	u8 invisibleFlag_SexVer09;
	u8 invisibleFlag_SexVer10;
	u8 invisibleFlag_SexVer11;
	u8 invisibleFlag_SexVer12;
	u8 invisibleFlag_SexVer13;
	u8 invisibleFlag_SexVer14;
	u8 invisibleFlag_SexVer15;
	u8 invisibleFlag_SexVer16;
	u8 invisibleFlag_SexVer17;
	u8 invisibleFlag_SexVer18;
	u8 invisibleFlag_SexVer19;
	u8 invisibleFlag_SexVer20;
	u8 invisibleFlag_SexVer21;
	u8 invisibleFlag_SexVer22;
	u8 invisibleFlag_SexVer23;
	u8 invisibleFlag_SexVer24;
	u8 invisibleFlag_SexVer25;
	u8 invisibleFlag_SexVer26;
	u8 invisibleFlag_SexVer27;
	u8 invisibleFlag_SexVer28;
	u8 invisibleFlag_SexVer29;
	u8 invisibleFlag_SexVer30;
	u8 invisibleFlag_SexVer31;
	u8 invisibleFlag_SexVer32;
	u8 invisibleFlag_SexVer33;
	u8 invisibleFlag_SexVer34;
	u8 invisibleFlag_SexVer35;
	u8 invisibleFlag_SexVer36;
	u8 invisibleFlag_SexVer37;
	u8 invisibleFlag_SexVer38;
	u8 invisibleFlag_SexVer39;
	u8 invisibleFlag_SexVer40;
	u8 invisibleFlag_SexVer41;
	u8 invisibleFlag_SexVer42;
	u8 invisibleFlag_SexVer43;
	u8 invisibleFlag_SexVer44;
	u8 invisibleFlag_SexVer45;
	u8 invisibleFlag_SexVer46;
	u8 invisibleFlag_SexVer47;
	u8 invisibleFlag_SexVer48;
	u8 invisibleFlag_SexVer49;
	u8 invisibleFlag_SexVer50;
	u8 invisibleFlag_SexVer51;
	u8 invisibleFlag_SexVer52;
	u8 invisibleFlag_SexVer53;
	u8 invisibleFlag_SexVer54;
	u8 invisibleFlag_SexVer55;
	u8 invisibleFlag_SexVer56;
	u8 invisibleFlag_SexVer57;
	u8 invisibleFlag_SexVer58;
	u8 invisibleFlag_SexVer59;
	u8 invisibleFlag_SexVer60;
	u8 invisibleFlag_SexVer61;
	u8 invisibleFlag_SexVer62;
	u8 invisibleFlag_SexVer63;
	u8 invisibleFlag_SexVer64;
	u8 invisibleFlag_SexVer65;
	u8 invisibleFlag_SexVer66;
	u8 invisibleFlag_SexVer67;
	u8 invisibleFlag_SexVer68;
	u8 invisibleFlag_SexVer69;
	u8 invisibleFlag_SexVer70;
	u8 invisibleFlag_SexVer71;
	u8 invisibleFlag_SexVer72;
	u8 invisibleFlag_SexVer73;
	u8 invisibleFlag_SexVer74;
	u8 invisibleFlag_SexVer75;
	u8 invisibleFlag_SexVer76;
	u8 invisibleFlag_SexVer77;
	u8 invisibleFlag_SexVer78;
	u8 invisibleFlag_SexVer79;
	u8 invisibleFlag_SexVer80;
	u8 invisibleFlag_SexVer81;
	u8 invisibleFlag_SexVer82;
	u8 invisibleFlag_SexVer83;
	u8 invisibleFlag_SexVer84;
	u8 invisibleFlag_SexVer85;
	u8 invisibleFlag_SexVer86;
	u8 invisibleFlag_SexVer87;
	u8 invisibleFlag_SexVer88;
	u8 invisibleFlag_SexVer89;
	u8 invisibleFlag_SexVer90;
	u8 invisibleFlag_SexVer91;
	u8 invisibleFlag_SexVer92;
	u8 invisibleFlag_SexVer93;
	u8 invisibleFlag_SexVer94;
	u8 invisibleFlag_SexVer95;
	dummy8 pad404[14];
};
typedef struct _EQUIP_PARAM_PROTECTOR_ST EQUIP_PARAM_PROTECTOR_ST;

struct _EQUIP_PARAM_WEAPON_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 behaviorVariationId;
	s32 sortId;
	u32 wanderingEquipId;
	f32 weight;
	f32 weaponWeightRate;
	s32 fixPrice;
	s32 reinforcePrice;
	s32 sellValue;
	f32 correctStrength;
	f32 correctAgility;
	f32 correctMagic;
	f32 correctFaith;
	f32 physGuardCutRate;
	f32 magGuardCutRate;
	f32 fireGuardCutRate;
	f32 thunGuardCutRate;
	s32 spEffectBehaviorId0;
	s32 spEffectBehaviorId1;
	s32 spEffectBehaviorId2;
	s32 residentSpEffectId;
	s32 residentSpEffectId1;
	s32 residentSpEffectId2;
	s32 materialSetId;
	s32 originEquipWep;
	s32 originEquipWep1;
	s32 originEquipWep2;
	s32 originEquipWep3;
	s32 originEquipWep4;
	s32 originEquipWep5;
	s32 originEquipWep6;
	s32 originEquipWep7;
	s32 originEquipWep8;
	s32 originEquipWep9;
	s32 originEquipWep10;
	s32 originEquipWep11;
	s32 originEquipWep12;
	s32 originEquipWep13;
	s32 originEquipWep14;
	s32 originEquipWep15;
	f32 weakA_DamageRate;
	f32 weakB_DamageRate;
	f32 weakC_DamageRate;
	f32 weakD_DamageRate;
	f32 sleepGuardResist_MaxCorrect;
	f32 madnessGuardResist_MaxCorrect;
	f32 saWeaponDamage;
	u16 equipModelId;
	u16 iconId;
	u16 durability;
	u16 durabilityMax;
	u16 attackThrowEscape;
	s16 parryDamageLife;
	u16 attackBasePhysics;
	u16 attackBaseMagic;
	u16 attackBaseFire;
	u16 attackBaseThunder;
	u16 attackBaseStamina;
	s16 guardAngle;
	f32 saDurability;
	s16 staminaGuardDef;
	s16 reinforceTypeId;
	s16 trophySGradeId;
	s16 trophySeqId;
	s16 throwAtkRate;
	s16 bowDistRate;
	u8 equipModelCategory;
	u8 equipModelGender;
	u8 weaponCategory;
	u8 wepmotionCategory;
	u8 guardmotionCategory;
	u8 atkMaterial;
	u16 defSeMaterial1;
	u8 correctType_Physics;
	u8 spAttribute;
	u16 spAtkcategory;
	u8 wepmotionOneHandId;
	u8 wepmotionBothHandId;
	u8 properStrength;
	u8 properAgility;
	u8 properMagic;
	u8 properFaith;
	u8 overStrength;
	u8 attackBaseParry;
	u8 defenseBaseParry;
	u8 guardBaseRepel;
	u8 attackBaseRepel;
	s8 guardCutCancelRate;
	s8 guardLevel;
	s8 slashGuardCutRate;
	s8 blowGuardCutRate;
	s8 thrustGuardCutRate;
	s8 poisonGuardResist;
	s8 diseaseGuardResist;
	s8 bloodGuardResist;
	s8 curseGuardResist;
	u8 atkAttribute;
	u8 rightHandEquipable: 1;
	u8 leftHandEquipable: 1;
	u8 bothHandEquipable: 1;
	u8 arrowSlotEquipable: 1;
	u8 boltSlotEquipable: 1;
	u8 enableGuard: 1;
	u8 enableParry: 1;
	u8 enableMagic: 1;
	u8 enableSorcery: 1;
	u8 enableMiracle: 1;
	u8 enableVowMagic: 1;
	u8 isNormalAttackType: 1;
	u8 isBlowAttackType: 1;
	u8 isSlashAttackType: 1;
	u8 isThrustAttackType: 1;
	u8 isEnhance: 1;
	u8 isHeroPointCorrect: 1;
	u8 isCustom: 1;
	u8 disableBaseChangeReset: 1;
	u8 disableRepair: 1;
	u8 isDarkHand: 1;
	u8 simpleModelForDlc: 1;
	u8 lanternWep: 1;
	u8 isVersusGhostWep: 1;
	u8 baseChangeCategory: 6;
	u8 isDragonSlayer: 1;
	u8 isDeposit: 1;
	u8 disableMultiDropShare: 1;
	u8 isDiscard: 1;
	u8 isDrop: 1;
	u8 showLogCondType: 1;
	u8 enableThrow: 1;
	u8 showDialogCondType: 2;
	u8 disableGemAttr: 1;
	u16 defSfxMaterial1;
	u8 wepCollidableType0;
	u8 wepCollidableType1;
	u8 postureControlId_Right;
	u8 postureControlId_Left;
	s32 traceSfxId0;
	s32 traceDmyIdHead0;
	s32 traceDmyIdTail0;
	s32 traceSfxId1;
	s32 traceDmyIdHead1;
	s32 traceDmyIdTail1;
	s32 traceSfxId2;
	s32 traceDmyIdHead2;
	s32 traceDmyIdTail2;
	s32 traceSfxId3;
	s32 traceDmyIdHead3;
	s32 traceDmyIdTail3;
	s32 traceSfxId4;
	s32 traceDmyIdHead4;
	s32 traceDmyIdTail4;
	s32 traceSfxId5;
	s32 traceDmyIdHead5;
	s32 traceDmyIdTail5;
	s32 traceSfxId6;
	s32 traceDmyIdHead6;
	s32 traceDmyIdTail6;
	s32 traceSfxId7;
	s32 traceDmyIdHead7;
	s32 traceDmyIdTail7;
	u16 defSfxMaterial2;
	u16 defSeMaterial2;
	s32 absorpParamId;
	f32 toughnessCorrectRate;
	u8 isValidTough_ProtSADmg: 1;
	u8 isDualBlade: 1;
	u8 isAutoEquip: 1;
	u8 isEnableEmergencyStep: 1;
	u8 invisibleOnRemo: 1;
	dummy8 pad2: 3;
	u8 correctType_Magic;
	u8 correctType_Fire;
	u8 correctType_Thunder;
	f32 weakE_DamageRate;
	f32 weakF_DamageRate;
	f32 darkGuardCutRate;
	u16 attackBaseDark;
	u8 correctType_Dark;
	u8 correctType_Poison;
	u8 sortGroupId;
	u8 atkAttribute2;
	s8 sleepGuardResist;
	s8 madnessGuardResist;
	u8 correctType_Blood;
	u8 properLuck;
	s8 freezeGuardResist;
	u8 autoReplenishType;
	s32 swordArtsParamId;
	f32 correctLuck;
	u32 arrowBoltEquipId;
	u8 DerivationLevelType;
	u8 enchantSfxSize;
	u16 wepType;
	f32 physGuardCutRate_MaxCorrect;
	f32 magGuardCutRate_MaxCorrect;
	f32 fireGuardCutRate_MaxCorrect;
	f32 thunGuardCutRate_MaxCorrect;
	f32 darkGuardCutRate_MaxCorrect;
	f32 poisonGuardResist_MaxCorrect;
	f32 diseaseGuardResist_MaxCorrect;
	f32 bloodGuardResist_MaxCorrect;
	f32 curseGuardResist_MaxCorrect;
	f32 freezeGuardResist_MaxCorrect;
	f32 staminaGuardDef_MaxCorrect;
	s32 residentSfxId_1;
	s32 residentSfxId_2;
	s32 residentSfxId_3;
	s32 residentSfxId_4;
	s32 residentSfx_DmyId_1;
	s32 residentSfx_DmyId_2;
	s32 residentSfx_DmyId_3;
	s32 residentSfx_DmyId_4;
	f32 staminaConsumptionRate;
	f32 vsPlayerDmgCorrectRate_Physics;
	f32 vsPlayerDmgCorrectRate_Magic;
	f32 vsPlayerDmgCorrectRate_Fire;
	f32 vsPlayerDmgCorrectRate_Thunder;
	f32 vsPlayerDmgCorrectRate_Dark;
	f32 vsPlayerDmgCorrectRate_Poison;
	f32 vsPlayerDmgCorrectRate_Blood;
	f32 vsPlayerDmgCorrectRate_Freeze;
	s32 attainmentWepStatusStr;
	s32 attainmentWepStatusDex;
	s32 attainmentWepStatusMag;
	s32 attainmentWepStatusFai;
	s32 attainmentWepStatusLuc;
	s32 attackElementCorrectId;
	s32 saleValue;
	u8 reinforceShopCategory;
	u8 maxArrowQuantity;
	u8 residentSfx_1_IsVisibleForHang: 1;
	u8 residentSfx_2_IsVisibleForHang: 1;
	u8 residentSfx_3_IsVisibleForHang: 1;
	u8 residentSfx_4_IsVisibleForHang: 1;
	u8 isSoulParamIdChange_model0: 1;
	u8 isSoulParamIdChange_model1: 1;
	u8 isSoulParamIdChange_model2: 1;
	u8 isSoulParamIdChange_model3: 1;
	s8 wepSeIdOffset;
	s32 baseChangePrice;
	s16 levelSyncCorrectId;
	u8 correctType_Sleep;
	u8 correctType_Madness;
	u8 rarity;
	u8 gemMountType;
	u16 wepRegainHp;
	s32 spEffectMsgId0;
	s32 spEffectMsgId1;
	s32 spEffectMsgId2;
	s32 originEquipWep16;
	s32 originEquipWep17;
	s32 originEquipWep18;
	s32 originEquipWep19;
	s32 originEquipWep20;
	s32 originEquipWep21;
	s32 originEquipWep22;
	s32 originEquipWep23;
	s32 originEquipWep24;
	s32 originEquipWep25;
	f32 vsPlayerDmgCorrectRate_Sleep;
	f32 vsPlayerDmgCorrectRate_Madness;
	f32 saGuardCutRate;
	u8 defMaterialVariationValue;
	u8 spAttributeVariationValue;
	s16 stealthAtkRate;
	f32 vsPlayerDmgCorrectRate_Disease;
	f32 vsPlayerDmgCorrectRate_Curse;
	dummy8 pad[8];
};
typedef struct _EQUIP_PARAM_WEAPON_ST EQUIP_PARAM_WEAPON_ST;

struct _ESTUS_FLASK_RECOVERY_PARAM_ST {
	u8 host;
	u8 invadeOrb_None;
	u8 invadeOrb_Umbasa;
	u8 invadeOrb_Berserker;
	u8 invadeOrb_Sinners;
	u8 invadeSign_None;
	u8 invadeSign_Umbasa;
	u8 invadeSign_Berserker;
	u8 invadeSign_Sinners;
	u8 invadeRing_Sinners;
	u8 invadeRing_Rosalia;
	u8 invadeRing_Forest;
	u8 coopSign_None;
	u8 coopSign_Umbasa;
	u8 coopSign_Berserker;
	u8 coopSign_Sinners;
	u8 coopRing_RedHunter;
	u8 invadeRing_Anor;
	u16 paramReplaceRate;
	s32 paramReplaceId;
	dummy8 pad[8];
};
typedef struct _ESTUS_FLASK_RECOVERY_PARAM_ST ESTUS_FLASK_RECOVERY_PARAM_ST;

struct _EVENT_FLAG_USAGE_PARAM_ST {
	u8 usageType;
	u8 playlogCategory;
	dummy8 padding1[2];
	s32 flagNum;
	dummy8 padding2[24];
};
typedef struct _EVENT_FLAG_USAGE_PARAM_ST EVENT_FLAG_USAGE_PARAM_ST;

struct _FACE_PARAM_ST {
	u8 face_partsId;
	u8 skin_color_R;
	u8 skin_color_G;
	u8 skin_color_B;
	u8 skin_gloss;
	u8 skin_pores;
	u8 face_beard;
	u8 face_aroundEye;
	u8 face_aroundEyeColor_R;
	u8 face_aroundEyeColor_G;
	u8 face_aroundEyeColor_B;
	u8 face_cheek;
	u8 face_cheekColor_R;
	u8 face_cheekColor_G;
	u8 face_cheekColor_B;
	u8 face_eyeLine;
	u8 face_eyeLineColor_R;
	u8 face_eyeLineColor_G;
	u8 face_eyeLineColor_B;
	u8 face_eyeShadowDown;
	u8 face_eyeShadowDownColor_R;
	u8 face_eyeShadowDownColor_G;
	u8 face_eyeShadowDownColor_B;
	u8 face_eyeShadowUp;
	u8 face_eyeShadowUpColor_R;
	u8 face_eyeShadowUpColor_G;
	u8 face_eyeShadowUpColor_B;
	u8 face_lip;
	u8 face_lipColor_R;
	u8 face_lipColor_G;
	u8 face_lipColor_B;
	u8 body_hair;
	u8 body_hairColor_R;
	u8 body_hairColor_G;
	u8 body_hairColor_B;
	u8 eye_partsId;
	u8 eyeR_irisColor_R;
	u8 eyeR_irisColor_G;
	u8 eyeR_irisColor_B;
	u8 eyeR_irisScale;
	u8 eyeR_cataract;
	u8 eyeR_cataractColor_R;
	u8 eyeR_cataractColor_G;
	u8 eyeR_cataractColor_B;
	u8 eyeR_scleraColor_R;
	u8 eyeR_scleraColor_G;
	u8 eyeR_scleraColor_B;
	u8 eyeR_irisDistance;
	u8 eyeL_irisColor_R;
	u8 eyeL_irisColor_G;
	u8 eyeL_irisColor_B;
	u8 eyeL_irisScale;
	u8 eyeL_cataract;
	u8 eyeL_cataractColor_R;
	u8 eyeL_cataractColor_G;
	u8 eyeL_cataractColor_B;
	u8 eyeL_scleraColor_R;
	u8 eyeL_scleraColor_G;
	u8 eyeL_scleraColor_B;
	u8 eyeL_irisDistance;
	u8 hair_partsId;
	u8 hair_color_R;
	u8 hair_color_G;
	u8 hair_color_B;
	u8 hair_shininess;
	u8 hair_rootBlack;
	u8 hair_whiteDensity;
	u8 beard_partsId;
	u8 beard_color_R;
	u8 beard_color_G;
	u8 beard_color_B;
	u8 beard_shininess;
	u8 beard_rootBlack;
	u8 beard_whiteDensity;
	u8 eyebrow_partsId;
	u8 eyebrow_color_R;
	u8 eyebrow_color_G;
	u8 eyebrow_color_B;
	u8 eyebrow_shininess;
	u8 eyebrow_rootBlack;
	u8 eyebrow_whiteDensity;
	u8 eyelash_partsId;
	u8 eyelash_color_R;
	u8 eyelash_color_G;
	u8 eyelash_color_B;
	u8 accessories_partsId;
	u8 accessories_color_R;
	u8 accessories_color_G;
	u8 accessories_color_B;
	u8 decal_partsId;
	u8 decal_posX;
	u8 decal_posY;
	u8 decal_angle;
	u8 decal_scale;
	u8 decal_color_R;
	u8 decal_color_G;
	u8 decal_color_B;
	u8 decal_gloss;
	u8 decal_mirror;
	u8 chrBodyScaleHead;
	u8 chrBodyScaleBreast;
	u8 chrBodyScaleAbdomen;
	u8 chrBodyScaleRArm;
	u8 chrBodyScaleRLeg;
	u8 chrBodyScaleLArm;
	u8 chrBodyScaleLLeg;
	u8 burn_scar;
	u8 override_eye_partsId: 1;
	u8 override_eye_irisColor: 1;
	u8 override_eye_cataract: 1;
	u8 override_eye_cataractColor: 1;
	u8 override_eye_scleraColor: 1;
	u8 override_burn_scar: 1;
	dummy8 pad2: 2;
	dummy8 pad[5];
	u8 age;
	u8 gender;
	u8 caricatureGeometry;
	u8 caricatureTexture;
	u8 faceGeoData00;
	u8 faceGeoData01;
	u8 faceGeoData02;
	u8 faceGeoData03;
	u8 faceGeoData04;
	u8 faceGeoData05;
	u8 faceGeoData06;
	u8 faceGeoData07;
	u8 faceGeoData08;
	u8 faceGeoData09;
	u8 faceGeoData10;
	u8 faceGeoData11;
	u8 faceGeoData12;
	u8 faceGeoData13;
	u8 faceGeoData14;
	u8 faceGeoData15;
	u8 faceGeoData16;
	u8 faceGeoData17;
	u8 faceGeoData18;
	u8 faceGeoData19;
	u8 faceGeoData20;
	u8 faceGeoData21;
	u8 faceGeoData22;
	u8 faceGeoData23;
	u8 faceGeoData24;
	u8 faceGeoData25;
	u8 faceGeoData26;
	u8 faceGeoData27;
	u8 faceGeoData28;
	u8 faceGeoData29;
	u8 faceGeoData30;
	u8 faceGeoData31;
	u8 faceGeoData32;
	u8 faceGeoData33;
	u8 faceGeoData34;
	u8 faceGeoData35;
	u8 faceGeoData36;
	u8 faceGeoData37;
	u8 faceGeoData38;
	u8 faceGeoData39;
	u8 faceGeoData40;
	u8 faceGeoData41;
	u8 faceGeoData42;
	u8 faceGeoData43;
	u8 faceGeoData44;
	u8 faceGeoData45;
	u8 faceGeoData46;
	u8 faceGeoData47;
	u8 faceGeoData48;
	u8 faceGeoData49;
	u8 faceGeoData50;
	u8 faceGeoData51;
	u8 faceGeoData52;
	u8 faceGeoData53;
	u8 faceGeoData54;
	u8 faceGeoData55;
	u8 faceGeoData56;
	u8 faceGeoData57;
	u8 faceGeoData58;
	u8 faceGeoData59;
	u8 faceGeoData60;
	u8 faceTexData00;
	u8 faceTexData01;
	u8 faceTexData02;
	u8 faceTexData03;
	u8 faceTexData04;
	u8 faceTexData05;
	u8 faceTexData06;
	u8 faceTexData07;
	u8 faceTexData08;
	u8 faceTexData09;
	u8 faceTexData10;
	u8 faceTexData11;
	u8 faceTexData12;
	u8 faceTexData13;
	u8 faceTexData14;
	u8 faceTexData15;
	u8 faceTexData16;
	u8 faceTexData17;
	u8 faceTexData18;
	u8 faceTexData19;
	u8 faceTexData20;
	u8 faceTexData21;
	u8 faceTexData22;
	u8 faceTexData23;
	u8 faceTexData24;
	u8 faceTexData25;
	u8 faceTexData26;
	u8 faceTexData27;
	u8 faceTexData28;
	u8 faceTexData29;
	u8 faceTexData30;
	u8 faceTexData31;
	u8 faceTexData32;
	u8 faceTexData33;
	u8 faceTexData34;
	u8 faceTexData35;
	u8 faceGeoAsymData00;
	u8 faceGeoAsymData01;
	u8 faceGeoAsymData02;
	u8 faceGeoAsymData03;
	u8 faceGeoAsymData04;
	u8 faceGeoAsymData05;
	u8 faceGeoAsymData06;
	u8 faceGeoAsymData07;
	u8 faceGeoAsymData08;
	u8 faceGeoAsymData09;
	u8 faceGeoAsymData10;
	u8 faceGeoAsymData11;
	u8 faceGeoAsymData12;
	u8 faceGeoAsymData13;
	u8 faceGeoAsymData14;
	u8 faceGeoAsymData15;
	u8 faceGeoAsymData16;
	u8 faceGeoAsymData17;
	u8 faceGeoAsymData18;
	u8 faceGeoAsymData19;
	u8 faceGeoAsymData20;
	u8 faceGeoAsymData21;
	u8 faceGeoAsymData22;
	u8 faceGeoAsymData23;
	u8 faceGeoAsymData24;
	u8 faceGeoAsymData25;
};
typedef struct _FACE_PARAM_ST FACE_PARAM_ST;

struct _FACE_RANGE_PARAM_ST {
	f32 face_partsId;
	f32 skin_color_R;
	f32 skin_color_G;
	f32 skin_color_B;
	f32 skin_gloss;
	f32 skin_pores;
	f32 face_beard;
	f32 face_aroundEye;
	f32 face_aroundEyeColor_R;
	f32 face_aroundEyeColor_G;
	f32 face_aroundEyeColor_B;
	f32 face_cheek;
	f32 face_cheekColor_R;
	f32 face_cheekColor_G;
	f32 face_cheekColor_B;
	f32 face_eyeLine;
	f32 face_eyeLineColor_R;
	f32 face_eyeLineColor_G;
	f32 face_eyeLineColor_B;
	f32 face_eyeShadowDown;
	f32 face_eyeShadowDownColor_R;
	f32 face_eyeShadowDownColor_G;
	f32 face_eyeShadowDownColor_B;
	f32 face_eyeShadowUp;
	f32 face_eyeShadowUpColor_R;
	f32 face_eyeShadowUpColor_G;
	f32 face_eyeShadowUpColor_B;
	f32 face_lip;
	f32 face_lipColor_R;
	f32 face_lipColor_G;
	f32 face_lipColor_B;
	f32 body_hair;
	f32 body_hairColor_R;
	f32 body_hairColor_G;
	f32 body_hairColor_B;
	f32 eye_partsId;
	f32 eyeR_irisColor_R;
	f32 eyeR_irisColor_G;
	f32 eyeR_irisColor_B;
	f32 eyeR_irisScale;
	f32 eyeR_cataract;
	f32 eyeR_cataractColor_R;
	f32 eyeR_cataractColor_G;
	f32 eyeR_cataractColor_B;
	f32 eyeR_scleraColor_R;
	f32 eyeR_scleraColor_G;
	f32 eyeR_scleraColor_B;
	f32 eyeR_irisDistance;
	f32 eyeL_irisColor_R;
	f32 eyeL_irisColor_G;
	f32 eyeL_irisColor_B;
	f32 eyeL_irisScale;
	f32 eyeL_cataract;
	f32 eyeL_cataractColor_R;
	f32 eyeL_cataractColor_G;
	f32 eyeL_cataractColor_B;
	f32 eyeL_scleraColor_R;
	f32 eyeL_scleraColor_G;
	f32 eyeL_scleraColor_B;
	f32 eyeL_irisDistance;
	f32 hair_partsId;
	f32 hair_color_R;
	f32 hair_color_G;
	f32 hair_color_B;
	f32 hair_shininess;
	f32 hair_rootBlack;
	f32 hair_whiteDensity;
	f32 beard_partsId;
	f32 beard_color_R;
	f32 beard_color_G;
	f32 beard_color_B;
	f32 beard_shininess;
	f32 beard_rootBlack;
	f32 beard_whiteDensity;
	f32 eyebrow_partsId;
	f32 eyebrow_color_R;
	f32 eyebrow_color_G;
	f32 eyebrow_color_B;
	f32 eyebrow_shininess;
	f32 eyebrow_rootBlack;
	f32 eyebrow_whiteDensity;
	f32 eyelash_partsId;
	f32 eyelash_color_R;
	f32 eyelash_color_G;
	f32 eyelash_color_B;
	f32 accessories_partsId;
	f32 accessories_color_R;
	f32 accessories_color_G;
	f32 accessories_color_B;
	f32 decal_partsId;
	f32 decal_posX;
	f32 decal_posY;
	f32 decal_angle;
	f32 decal_scale;
	f32 decal_color_R;
	f32 decal_color_G;
	f32 decal_color_B;
	f32 decal_gloss;
	f32 decal_mirror;
	f32 chrBodyScaleHead;
	f32 chrBodyScaleBreast;
	f32 chrBodyScaleAbdomen;
	f32 chrBodyScaleArm;
	f32 chrBodyScaleLeg;
	f32 age;
	f32 gender;
	f32 caricatureGeometry;
	f32 caricatureTexture;
	f32 faceGeoData00;
	f32 faceGeoData01;
	f32 faceGeoData02;
	f32 faceGeoData03;
	f32 faceGeoData04;
	f32 faceGeoData05;
	f32 faceGeoData06;
	f32 faceGeoData07;
	f32 faceGeoData08;
	f32 faceGeoData09;
	f32 faceGeoData10;
	f32 faceGeoData11;
	f32 faceGeoData12;
	f32 faceGeoData13;
	f32 faceGeoData14;
	f32 faceGeoData15;
	f32 faceGeoData16;
	f32 faceGeoData17;
	f32 faceGeoData18;
	f32 faceGeoData19;
	f32 faceGeoData20;
	f32 faceGeoData21;
	f32 faceGeoData22;
	f32 faceGeoData23;
	f32 faceGeoData24;
	f32 faceGeoData25;
	f32 faceGeoData26;
	f32 faceGeoData27;
	f32 faceGeoData28;
	f32 faceGeoData29;
	f32 faceGeoData30;
	f32 faceGeoData31;
	f32 faceGeoData32;
	f32 faceGeoData33;
	f32 faceGeoData34;
	f32 faceGeoData35;
	f32 faceGeoData36;
	f32 faceGeoData37;
	f32 faceGeoData38;
	f32 faceGeoData39;
	f32 faceGeoData40;
	f32 faceGeoData41;
	f32 faceGeoData42;
	f32 faceGeoData43;
	f32 faceGeoData44;
	f32 faceGeoData45;
	f32 faceGeoData46;
	f32 faceGeoData47;
	f32 faceGeoData48;
	f32 faceGeoData49;
	f32 faceGeoData50;
	f32 faceGeoData51;
	f32 faceGeoData52;
	f32 faceGeoData53;
	f32 faceGeoData54;
	f32 faceGeoData55;
	f32 faceGeoData56;
	f32 faceGeoData57;
	f32 faceGeoData58;
	f32 faceGeoData59;
	f32 faceGeoData60;
	f32 faceTexData00;
	f32 faceTexData01;
	f32 faceTexData02;
	f32 faceTexData03;
	f32 faceTexData04;
	f32 faceTexData05;
	f32 faceTexData06;
	f32 faceTexData07;
	f32 faceTexData08;
	f32 faceTexData09;
	f32 faceTexData10;
	f32 faceTexData11;
	f32 faceTexData12;
	f32 faceTexData13;
	f32 faceTexData14;
	f32 faceTexData15;
	f32 faceTexData16;
	f32 faceTexData17;
	f32 faceTexData18;
	f32 faceTexData19;
	f32 faceTexData20;
	f32 faceTexData21;
	f32 faceTexData22;
	f32 faceTexData23;
	f32 faceTexData24;
	f32 faceTexData25;
	f32 faceTexData26;
	f32 faceTexData27;
	f32 faceTexData28;
	f32 faceTexData29;
	f32 faceTexData30;
	f32 faceTexData31;
	f32 faceTexData32;
	f32 faceTexData33;
	f32 faceTexData34;
	f32 faceTexData35;
	f32 burn_scar;
};
typedef struct _FACE_RANGE_PARAM_ST FACE_RANGE_PARAM_ST;

struct _FE_TEXT_EFFECT_PARAM_ST {
	s16 resId;
	dummy8 pad1[2];
	s32 textId;
	s32 seId;
	u8 canMixMapName: 1;
	dummy8 pad3: 7;
	dummy8 pad2[19];
};
typedef struct _FE_TEXT_EFFECT_PARAM_ST FE_TEXT_EFFECT_PARAM_ST;

struct _FINAL_DAMAGE_RATE_PARAM_ST {
	f32 physrate;
	f32 magrate;
	f32 firerate;
	f32 thunrate;
	f32 darkrate;
	f32 staminarate;
	f32 sarate;
};
typedef struct _FINAL_DAMAGE_RATE_PARAM_ST FINAL_DAMAGE_RATE_PARAM_ST;

struct _FOOT_SFX_PARAM_ST {
	u32 sfxId_00;
	u32 sfxId_01;
	u32 sfxId_02;
	u32 sfxId_03;
	u32 sfxId_04;
	u32 sfxId_05;
	u32 sfxId_06;
	u32 sfxId_07;
	u32 sfxId_08;
	u32 sfxId_09;
	u32 sfxId_10;
	u32 sfxId_11;
	u32 sfxId_12;
	u32 sfxId_13;
	u32 sfxId_14;
	u32 sfxId_15;
	u32 sfxId_16;
	u32 sfxId_17;
	u32 sfxId_18;
	u32 sfxId_19;
	u32 sfxId_20;
	u32 sfxId_21;
	u32 sfxId_22;
	u32 sfxId_23;
	u32 sfxId_24;
	u32 sfxId_25;
	u32 sfxId_26;
	u32 sfxId_27;
	u32 sfxId_28;
	u32 sfxId_29;
	u32 sfxId_30;
	u32 sfxId_31;
	u32 sfxId_32;
	u32 sfxId_33;
	u32 sfxId_34;
	u32 sfxId_35;
	u32 sfxId_36;
	u32 sfxId_37;
	u32 sfxId_38;
	u32 sfxId_39;
	u32 sfxId_40;
	u32 sfxId_41;
	u32 sfxId_42;
	u32 sfxId_43;
	u32 sfxId_44;
	u32 sfxId_45;
	u32 sfxId_46;
	u32 sfxId_47;
	u32 sfxId_48;
	u32 sfxId_49;
	u32 sfxId_50;
	u32 sfxId_51;
	u32 sfxId_52;
	u32 sfxId_53;
	u32 sfxId_54;
	u32 sfxId_55;
	u32 sfxId_56;
	u32 sfxId_57;
	u32 sfxId_58;
	u32 sfxId_59;
	u32 sfxId_60;
	u32 sfxId_61;
	u32 sfxId_62;
	u32 sfxId_63;
	u32 sfxId_64;
	u32 sfxId_65;
	u32 sfxId_66;
	u32 sfxId_67;
	u32 sfxId_68;
	u32 sfxId_69;
	u32 sfxId_70;
	u32 sfxId_71;
	u32 sfxId_72;
	u32 sfxId_73;
	u32 sfxId_74;
	u32 sfxId_75;
	u32 sfxId_76;
	u32 sfxId_77;
	u32 sfxId_78;
	u32 sfxId_79;
	u32 sfxId_80;
	u32 sfxId_81;
	u32 sfxId_82;
	u32 sfxId_83;
	u32 sfxId_84;
	u32 sfxId_85;
	u32 sfxId_86;
	u32 sfxId_87;
	u32 sfxId_88;
	u32 sfxId_89;
	u32 sfxId_90;
	u32 sfxId_91;
	u32 sfxId_92;
	u32 sfxId_93;
	u32 sfxId_94;
	u32 sfxId_95;
	u32 sfxId_96;
	u32 sfxId_97;
	u32 sfxId_98;
	u32 sfxId_99;
	u32 sfxId_100;
	u32 sfxId_101;
	u32 sfxId_102;
	u32 sfxId_103;
	u32 sfxId_104;
	u32 sfxId_105;
	u32 sfxId_106;
	u32 sfxId_107;
	u32 sfxId_108;
	u32 sfxId_109;
	u32 sfxId_110;
	u32 sfxId_111;
	u32 sfxId_112;
	u32 sfxId_113;
	u32 sfxId_114;
	u32 sfxId_115;
	u32 sfxId_116;
	u32 sfxId_117;
	u32 sfxId_118;
	u32 sfxId_119;
	u32 sfxId_120;
	u32 sfxId_121;
	u32 sfxId_122;
	u32 sfxId_123;
	u32 sfxId_124;
	u32 sfxId_125;
	u32 sfxId_126;
	u32 sfxId_127;
	u32 sfxId_128;
	u32 sfxId_129;
	u32 sfxId_130;
	u32 sfxId_131;
	u32 sfxId_132;
	u32 sfxId_133;
	u32 sfxId_134;
	u32 sfxId_135;
	u32 sfxId_136;
	u32 sfxId_137;
	u32 sfxId_138;
	u32 sfxId_139;
	u32 sfxId_140;
	u32 sfxId_141;
	u32 sfxId_142;
	u32 sfxId_143;
	u32 sfxId_144;
	u32 sfxId_145;
	u32 sfxId_146;
	u32 sfxId_147;
	u32 sfxId_148;
	u32 sfxId_149;
	u32 sfxId_150;
	u32 sfxId_151;
	u32 sfxId_152;
	u32 sfxId_153;
	u32 sfxId_154;
	u32 sfxId_155;
	u32 sfxId_156;
	u32 sfxId_157;
	u32 sfxId_158;
	u32 sfxId_159;
	u32 sfxId_160;
	u32 sfxId_161;
	u32 sfxId_162;
	u32 sfxId_163;
	u32 sfxId_164;
	u32 sfxId_165;
	u32 sfxId_166;
	u32 sfxId_167;
	u32 sfxId_168;
	u32 sfxId_169;
	u32 sfxId_170;
	u32 sfxId_171;
	u32 sfxId_172;
	u32 sfxId_173;
	u32 sfxId_174;
	u32 sfxId_175;
	u32 sfxId_176;
	u32 sfxId_177;
	u32 sfxId_178;
	u32 sfxId_179;
	u32 sfxId_180;
	u32 sfxId_181;
	u32 sfxId_182;
	u32 sfxId_183;
	u32 sfxId_184;
	u32 sfxId_185;
	u32 sfxId_186;
	u32 sfxId_187;
	u32 sfxId_188;
	u32 sfxId_189;
	u32 sfxId_190;
	u32 sfxId_191;
	u32 sfxId_192;
	u32 sfxId_193;
	u32 sfxId_194;
	u32 sfxId_195;
	u32 sfxId_196;
	u32 sfxId_197;
	u32 sfxId_198;
	u32 sfxId_199;
};
typedef struct _FOOT_SFX_PARAM_ST FOOT_SFX_PARAM_ST;

struct _GAME_AREA_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 bonusSoul_single;
	u32 bonusSoul_multi;
	u32 humanityPointCountFlagIdTop;
	u16 humanityDropPoint1;
	u16 humanityDropPoint2;
	u16 humanityDropPoint3;
	u16 humanityDropPoint4;
	u16 humanityDropPoint5;
	u16 humanityDropPoint6;
	u16 humanityDropPoint7;
	u16 humanityDropPoint8;
	u16 humanityDropPoint9;
	u16 humanityDropPoint10;
	u32 soloBreakInPoint_Min;
	u32 soloBreakInPoint_Max;
	u32 defeatBossFlagId_forSignAimList;
	u32 displayAimFlagId;
	u32 foundBossFlagId;
	s32 foundBossTextId;
	s32 notFindBossTextId;
	u32 bossChallengeFlagId;
	u32 defeatBossFlagId;
	f32 bossPosX;
	f32 bossPosY;
	f32 bossPosZ;
	u8 bossMapAreaNo;
	u8 bossMapBlockNo;
	u8 bossMapMapNo;
	dummy8 reserve[9];
};
typedef struct _GAME_AREA_PARAM_ST GAME_AREA_PARAM_ST;

struct _GAME_INFO_PARAM {
	s32 titleMsgId;
	s32 contentMsgId;
	s32 value;
	s32 sortId;
	s32 eventId;
	dummy8 Pad[12];
};
typedef struct _GAME_INFO_PARAM GAME_INFO_PARAM;

struct _GAME_SYSTEM_COMMON_PARAM_ST {
	f32 baseToughnessRecoverTime;
	s32 chrEventTrun_byLeft90;
	s32 chrEventTrun_byRight90;
	s32 chrEventTrun_byLeft180;
	s32 chrEventTrun_byRight180;
	s16 chrEventTrun_90TurnStartAngle;
	s16 chrEventTrun_180TurnStartAngle;
	f32 stealthAtkDamageRate;
	f32 flickDamageCutRateSuccessGurad;
	f32 npcTalkAnimBeginDiffAngle;
	f32 npcTalkAnimEndDiffAngle;
	s32 sleepCollectorItemActionButtonParamId;
	f32 allowUseBuddyItem_sfxInterval;
	s32 allowUseBuddyItem_sfxDmyPolyId;
	s32 allowUseBuddyItem_sfxDmyPolyId_horse;
	s32 allowUseBuddyItem_sfxId;
	f32 onBuddySummon_inActivateRange_sfxInterval;
	s32 onBuddySummon_inActivateRange_sfxDmyPolyId;
	s32 onBuddySummon_inActivateRange_sfxDmyPolyId_horse;
	s32 onBuddySummon_inActivateRange_sfxId;
	s32 onBuddySummon_inActivateRange_spEffectId_pc;
	s32 onBuddySummon_inWarnRange_spEffectId_pc;
	s32 onBuddySummon_atBuddyUnsummon_spEffectId_pc;
	s32 onBuddySummon_inWarnRange_spEffectId_buddy;
	u8 morningIngameHour;
	u8 morningIngameMinute;
	u8 morningIngameSecond;
	u8 noonIngameHour;
	u8 noonIngameMinute;
	u8 noonIngameSecond;
	u8 nightIngameHour;
	u8 nightIngameMinute;
	u8 nightIngameSecond;
	u8 aiSightRateStart_Morning_Hour;
	u8 aiSightRateStart_Morning_Minute;
	u8 aiSightRateStart_Noon_Hour;
	u8 aiSightRateStart_Noon_Minute;
	u8 aiSightRateStart_Evening_Hour;
	u8 aiSightRateStart_Evening_Minute;
	u8 aiSightRateStart_Night_Hour;
	u8 aiSightRateStart_Night_Minute;
	u8 aiSightRateStart_Midnight_Hour;
	u8 aiSightRateStart_Midnight_Minute;
	u8 saLargeDamageHitSfx_Threshold;
	s32 saLargeDamageHitSfx_SfxId;
	f32 signCreatableDistFromSafePos;
	f32 guestResummonDist;
	f32 guestLeavingMessageDistMax;
	f32 guestLeavingMessageDistMin;
	f32 guestLeaveSessionDist;
	f32 retryPointAreaRadius;
	s32 sleepCollectorSpEffectId;
	s32 recoverBelowMaxHpCompletionNoticeSpEffectId;
	s32 estusFlaskRecovery_AbsorptionProductionSfxId_byHp;
	s32 estusFlaskRecovery_AbsorptionProductionSfxId_byMp;
	s32 respawnSpecialEffectActiveCheckerSpEffectId;
	s32 onBuddySummon_inActivateRange_spEffectId_buddy;
	f32 estusFlaskRecovery_AddEstusTime;
	f32 defeatMultiModeEnemyOfSoulCorrectRate_byHost;
	f32 defeatMultiModeEnemyOfSoulCorrectRate_byTeamGhost;
	f32 defeatMultiModeBossOfSoulCorrectRate_byHost;
	f32 defeatMultiModeBossOfSoulCorrectRate_byTeamGhost;
	u16 enemyHpGaugeScreenOffset_byUp;
	u16 playRegionCollectDist;
	u16 enemyDetectionSpEffect_ShootBulletDummypolyId;
	u16 bigRuneGreaterDemonBreakInGoodsNum;
	s32 bigRuneGreaterDemonBreakInGoodsId;
	s32 rideJumpRegionDefaultSfxId;
	f32 saAttackRate_forVsRideAtk;
	s32 enemySpEffectIdAfterSleepCollectorItemLot;
	s32 afterEndingMapUid;
	u32 afterEndingReturnPointEntityId;
	s32 enemyDetectionSpEffect_BulletId_byCoopRing_RedHunter;
	s32 enemyDetectionSpEffect_BulletId_byInvadeOrb_None;
	u32 tutorialFlagOnAccessDistView;
	u32 tutorialFlagOnAccessRetryPoint;
	u32 tutorialFlagOnGetGroupReward;
	u32 tutorialFlagOnEnterRideJumpRegion;
	f32 tutorialCheckRideJumpRegionExpandRange;
	s32 retryPointActivatedPcAnimId;
	f32 retryPointActivatedDialogDelayTime;
	s32 retryPointActivatedDialogTextId;
	s32 signPuddleOpenPcAnimId;
	f32 signPuddleOpenDialogDelayTime;
	s32 activityOfDeadSpEffect_BulletId;
	s32 activityOfDeadSpEffect_ShootBulletDummypolyId;
	f32 activityOfDeadSpEffect_DeadFadeOutTime;
	f32 ignorNetStateSyncTime_ForThrow;
	u16 netPenaltyPointLanDisconnect;
	u16 netPenaltyPointProfileSignout;
	u16 netPenaltyPointReboot;
	u16 netPnaltyPointSuspend;
	f32 netPenaltyForgiveItemLimitTime;
	u16 netPenaltyPointThreshold;
	u16 uncontrolledMoveThresholdTime;
	s32 enemyDetectionSpEffect_BulletId_byNpcEnemy;
	s32 activityOfDeadTargetSearchSpEffect_OnHitSpEffect;
	f32 activityOfDeadTargetSearchSpEffect_MaxLength;
	f32 sightRangeLowerPromiseRate;
	s16 saLargeDamageHitSfx_MinDamage;
	s16 saLargeDamageHitSfx_ForceDamage;
	u32 soloBreakInMaxPoint;
	f32 npcTalkTimeOutThreshold;
	f32 sendPlayLogIntervalTime;
	u8 item370_MaxSfxNum;
	u8 chrActivateDist_forLeavePC;
	s16 summonDataCoopMatchingLevelUpperAbs;
	s16 summonDataCoopMatchingLevelUpperRel;
	s16 summonDataCoopMatchingWepLevelMul;
	s32 pickUpBerserkerSignSpEffectBulletId;
	s32 succeedBerserkerSelfKillingEffectId;
	u8 machingLevelWhiteSignUpperRel;
	u8 machingLevelWhiteSignUpperAbs;
	u8 machingLevelRedSignUpperRel;
	u8 machingLevelRedSignUpperAbs;
	u8 machingWeaponLevelUpperWhiteSign_0;
	u8 machingWeaponLevelUpperWhiteSign_1;
	u8 machingWeaponLevelUpperWhiteSign_2;
	u8 machingWeaponLevelUpperWhiteSign_3;
	u8 machingWeaponLevelUpperWhiteSign_4;
	u8 machingWeaponLevelUpperWhiteSign_5;
	u8 machingWeaponLevelUpperWhiteSign_6;
	u8 machingWeaponLevelUpperWhiteSign_7;
	u8 machingWeaponLevelUpperWhiteSign_8;
	u8 machingWeaponLevelUpperWhiteSign_9;
	u8 machingWeaponLevelUpperWhiteSign_10;
	u8 machingWeaponLevelUpperRedSign_0;
	u8 machingWeaponLevelUpperRedSign_1;
	u8 machingWeaponLevelUpperRedSign_2;
	u8 machingWeaponLevelUpperRedSign_3;
	u8 machingWeaponLevelUpperRedSign_4;
	u8 machingWeaponLevelUpperRedSign_5;
	u8 machingWeaponLevelUpperRedSign_6;
	u8 machingWeaponLevelUpperRedSign_7;
	u8 machingWeaponLevelUpperRedSign_8;
	u8 machingWeaponLevelUpperRedSign_9;
	u8 machingWeaponLevelUpperRedSign_10;
	u8 autoInvadePoint_generateDist;
	u8 autoInvadePoint_cancelDist;
	f32 sendGlobalEventLogIntervalTime;
	u16 addSoloBreakInPoint_White;
	u16 addSoloBreakInPoint_Black;
	u16 addSoloBreakInPoint_ForceJoin;
	u16 addSoloBreakInPoint_VisitorGuardian;
	u16 addSoloBreakInPoint_VisitorRedHunter;
	u8 invincibleTimer_forNetPC_initSync;
	u8 invincibleTimer_forNetPC;
	f32 redHunter_HostBossAreaGetSoulRate;
	s32 ghostFootprintDecalParamId;
	f32 leaveAroundHostWarningTime;
	s32 hostModeCostItemId;
	f32 aIJump_DecelerateParam;
	f32 buddyDisappearDelaySec;
	f32 aIJump_AnimYMoveCorrectRate_onJumpOff;
	f32 stealthSystemSightRate_NotInStealthRigid_NotSightHide_StealthMode;
	f32 stealthSystemSightRate_NotInStealthRigid_SightHide_NotStealthMode;
	f32 stealthSystemSightRate_NotInStealthRigid_SightHide_StealthMode;
	f32 stealthSystemSightRate_InStealthRigid_NotSightHide_NotStealthMode;
	f32 stealthSystemSightRate_InStealthRigid_NotSightHide_StealthMode;
	f32 stealthSystemSightRate_InStealthRigid_SightHide_NotStealthMode;
	f32 stealthSystemSightRate_InStealthRigid_SightHide_StealthMode;
	s32 msbEventGeomTreasureInfo_actionButtonParamId_corpse;
	s32 msbEventGeomTreasureInfo_itemGetAnimId_corpse;
	s32 msbEventGeomTreasureInfo_actionButtonParamId_box;
	s32 msbEventGeomTreasureInfo_itemGetAnimId_box;
	s32 msbEventGeomTreasureInfo_actionButtonParamId_shine;
	s32 msbEventGeomTreasureInfo_itemGetAnimId_shine;
	s32 signPuddleAssetId;
	s32 signPuddleAppearDmypolyId0;
	s32 signPuddleAppearDmypolyId1;
	s32 signPuddleAppearDmypolyId2;
	s32 signPuddleAppearDmypolyId3;
	f32 fallDamageRate_forRidePC;
	f32 fallDamageRate_forRideNPC;
	s32 OldMonkOfYellow_CreateSignSpEffectId;
	f32 StragglerActivateDist;
	s32 SpEffectId_EnableUseItem_StragglerActivate;
	s32 SpEffectId_StragglerWakeUp;
	s32 SpEffectId_StragglerTarget;
	s32 SpEffectId_StragglerOppose;
	f32 buddyWarp_TriggerTimeRayBlocked;
	f32 buddyWarp_TriggerDistToPlayer;
	f32 buddyWarp_ThresholdTimePathStacked;
	f32 buddyWarp_ThresholdRangePathStacked;
	f32 aiSightRate_morning;
	f32 aiSightRate_noonA;
	f32 buddyPassThroughTriggerTime;
	f32 aiSightRate_evening;
	f32 aiSightRate_night;
	f32 aiSightRate_midnightA;
	dummy8 reserve4_2[4];
	f32 aiSightRate_sunloss_light;
	f32 aiSightRate_sunloss_dark;
	f32 aiSightRate_sunloss_veryDark;
	f32 stealthSystemSightAngleReduceRate_NotInStealthRigid_NotSightHide_StealthMode;
	f32 stealthSystemSightAngleReduceRate_NotInStealthRigid_SightHide_NotStealthMode;
	f32 stealthSystemSightAngleReduceRate_NotInStealthRigid_SightHide_StealthMode;
	f32 stealthSystemSightAngleReduceRate_InStealthRigid_NotSightHide_NotStealthMode;
	f32 stealthSystemSightAngleReduceRate_InStealthRigid_NotSightHide_StealthMode;
	f32 stealthSystemSightAngleReduceRate_InStealthRigid_SightHide_NotStealthMode;
	f32 stealthSystemSightAngleReduceRate_InStealthRigid_SightHide_StealthMode;
	u8 weatherLotConditionStart_Morning_Hour;
	u8 weatherLotConditionStart_Morning_Minute;
	u8 weatherLotConditionStart_Day_Hour;
	u8 weatherLotConditionStart_Day_Minute;
	u8 weatherLotConditionStart_Evening_Hour;
	u8 weatherLotConditionStart_Evening_Minute;
	u8 weatherLotConditionStart_Night_Hour;
	u8 weatherLotConditionStart_Night_Minute;
	u8 weatherLotConditionStart_DayBreak_Hour;
	u8 weatherLotConditionStart_DayBreak_Minute;
	dummy8 weatherLotCondition_reserved[2];
	u8 pclightScaleChangeStart_Hour;
	u8 pclightScaleChangeStart_Minute;
	u8 pclightScaleChangeEnd_Hour;
	u8 pclightScaleChangeEnd_Minute;
	f32 pclightScaleByTimezone;
	s32 bigRuneGreaterDemon_SummonBuddySpecialEffectId_Buddy;
	s32 bigRuneGreaterDemon_SummonBuddySpecialEffectId_Pc;
	s32 homeBonfireParamId;
	u8 machingWeaponLevelUpperWhiteSign_11;
	u8 machingWeaponLevelUpperWhiteSign_12;
	u8 machingWeaponLevelUpperWhiteSign_13;
	u8 machingWeaponLevelUpperWhiteSign_14;
	u8 machingWeaponLevelUpperWhiteSign_15;
	u8 machingWeaponLevelUpperWhiteSign_16;
	u8 machingWeaponLevelUpperWhiteSign_17;
	u8 machingWeaponLevelUpperWhiteSign_18;
	u8 machingWeaponLevelUpperWhiteSign_19;
	u8 machingWeaponLevelUpperWhiteSign_20;
	u8 machingWeaponLevelUpperWhiteSign_21;
	u8 machingWeaponLevelUpperWhiteSign_22;
	u8 machingWeaponLevelUpperWhiteSign_23;
	u8 machingWeaponLevelUpperWhiteSign_24;
	u8 machingWeaponLevelUpperWhiteSign_25;
	u8 machingWeaponLevelUpperRedSign_11;
	u8 machingWeaponLevelUpperRedSign_12;
	u8 machingWeaponLevelUpperRedSign_13;
	u8 machingWeaponLevelUpperRedSign_14;
	u8 machingWeaponLevelUpperRedSign_15;
	u8 machingWeaponLevelUpperRedSign_16;
	u8 machingWeaponLevelUpperRedSign_17;
	u8 machingWeaponLevelUpperRedSign_18;
	u8 machingWeaponLevelUpperRedSign_19;
	u8 machingWeaponLevelUpperRedSign_20;
	u8 machingWeaponLevelUpperRedSign_21;
	u8 machingWeaponLevelUpperRedSign_22;
	u8 machingWeaponLevelUpperRedSign_23;
	u8 machingWeaponLevelUpperRedSign_24;
	u8 machingWeaponLevelUpperRedSign_25;
	u8 menuTimezoneStart_Morning_Hour;
	u8 menuTimezoneStart_Morning_Minute;
	u8 menuTimezoneStart_Day1_Hour;
	u8 menuTimezoneStart_Day1_Minute;
	u8 menuTimezoneStart_Day2_Hour;
	u8 menuTimezoneStart_Day2_Minute;
	u8 menuTimezoneStart_Evening_Hour;
	u8 menuTimezoneStart_Evening_Minute;
	u8 menuTimezoneStart_Night_Hour;
	u8 menuTimezoneStart_Night_Minute;
	u8 menuTimezoneStart_Midnight_Hour;
	u8 menuTimezoneStart_Midnight_Minute;
	u16 remotePlayerThreatLvNotify_ThreatLv;
	f32 remotePlayerThreatLvNotify_NotifyDist;
	f32 remotePlayerThreatLvNotify_EndNotifyDist;
	f32 worldMapPointDiscoveryExpandRange;
	f32 worldMapPointReentryExpandRange;
	u16 remotePlayerThreatLvNotify_NotifyTime;
	u16 breakIn_A_rebreakInGoodsNum;
	s32 breakIn_A_rebreakInGoodsId;
	s32 rideJumpoff_SfxId;
	f32 rideJumpoff_SfxHeightOffset;
	s32 rideJumpoff_SpEffectId;
	s32 rideJumpoff_SpEffectIdPc;
	u32 unlockExchangeMenuEventFlagId;
	u32 unlockMessageMenuEventFlagId;
	u16 breakInOnce_A_rebreakInGoodsNum;
	u16 breakIn_B_rebreakInGoodsNum;
	s32 breakInOnce_A_rebreakInGoodsId;
	s32 breakIn_B_rebreakInGoodsId;
	f32 actionButtonInputCancelTime;
	f32 blockClearBonusDelayTime;
	f32 bonfireCheckEnemyRange;
	dummy8 reserved_124[128];
};
typedef struct _GAME_SYSTEM_COMMON_PARAM_ST GAME_SYSTEM_COMMON_PARAM_ST;

struct _CS_AA_QUALITY_DETAIL {
	u8 enabled;
	u8 forceFXAA2;
	dummy8 dmy[2];
};
typedef struct _CS_AA_QUALITY_DETAIL CS_AA_QUALITY_DETAIL;

struct _CS_DECAL_QUALITY_DETAIL {
	u8 enabled;
	dummy8 dmy[3];
};
typedef struct _CS_DECAL_QUALITY_DETAIL CS_DECAL_QUALITY_DETAIL;

struct _CS_DOF_QUALITY_DETAIL {
	u8 enabled;
	dummy8 dmy[3];
	s32 forceHiResoBlur;
	s32 maxBlurLevel;
};
typedef struct _CS_DOF_QUALITY_DETAIL CS_DOF_QUALITY_DETAIL;

struct _CS_EFFECT_QUALITY_DETAIL {
	u8 softParticleEnabled;
	u8 glowEnabled;
	u8 distortionEnable;
	u8 cs_upScaleEnabledType;
	f32 fNumOnceEmitsScale;
	f32 fEmitSpanScale;
	f32 fLodDistance1Scale;
	f32 fLodDistance2Scale;
	f32 fLodDistance3Scale;
	f32 fLodDistance4Scale;
	f32 fScaleRenderDistanceScale;
	dummy8 dmy[4];
};
typedef struct _CS_EFFECT_QUALITY_DETAIL CS_EFFECT_QUALITY_DETAIL;

struct _CS_LIGHTING_QUALITY_DETAIL {
	f32 localLightDistFactor;
	u8 localLightShadowEnabled;
	u8 forwardPassLightingEnabled;
	u8 localLightShadowSpecLevelMax;
	dummy8 dmy[1];
};
typedef struct _CS_LIGHTING_QUALITY_DETAIL CS_LIGHTING_QUALITY_DETAIL;

struct _CS_MOTION_BLUR_QUALITY_DETAIL {
	u8 enabled;
	u8 ombEnabled;
	u8 forceScaleVelocityBuffer;
	u8 cheapFilterMode;
	s32 sampleCountBias;
	s32 recurrenceCountBias;
	f32 blurMaxLengthScale;
};
typedef struct _CS_MOTION_BLUR_QUALITY_DETAIL CS_MOTION_BLUR_QUALITY_DETAIL;

struct _CS_REFLECTION_QUALITY_DETAIL {
	u8 enabled;
	u8 localLightEnabled;
	u8 localLightForceEnabled;
	dummy8 dmy[1];
	u32 resolutionDivider;
	u8 ssrEnabled;
	u8 ssrGaussianBlurEnabled;
	dummy8 dmy2[2];
	f32 ssrDepthRejectThresholdScale;
	f32 ssrRayTraceStepScale;
	f32 ssrFadeToViewerBias;
	f32 ssrFresnelRejectBias;
};
typedef struct _CS_REFLECTION_QUALITY_DETAIL CS_REFLECTION_QUALITY_DETAIL;

struct _CS_SHADER_QUALITY_DETAIL {
	u8 sssEnabled;
	u8 tessellationEnabled;
	u8 highPrecisionNormalEnabled;
	fixstr dmy[1];
};
typedef struct _CS_SHADER_QUALITY_DETAIL CS_SHADER_QUALITY_DETAIL;

struct _CS_SHADOW_QUALITY_DETAIL {
	u8 enabled;
	u8 maxFilterLevel;
	dummy8 dmy[2];
	u32 textureSizeScaler;
	u32 textureSizeDivider;
	u32 textureMinSize;
	u32 textureMaxSize;
	s32 blurCountBias;
};
typedef struct _CS_SHADOW_QUALITY_DETAIL CS_SHADOW_QUALITY_DETAIL;

struct _CS_SSAO_QUALITY_DETAIL {
	u8 enabled;
	u8 cs_reprojEnabledType;
	u8 cs_upScaleEnabledType;
	u8 cs_useNormalEnabledType;
	dummy8 dmy[1];
};
typedef struct _CS_SSAO_QUALITY_DETAIL CS_SSAO_QUALITY_DETAIL;

struct _CS_TEXTURE_FILTER_QUALITY_DETAIL {
	u8 filter;
	dummy8 dmy[3];
	u32 maxAnisoLevel;
};
typedef struct _CS_TEXTURE_FILTER_QUALITY_DETAIL CS_TEXTURE_FILTER_QUALITY_DETAIL;

struct _CS_VOLUMETRIC_EFFECT_QUALITY_DETAIL {
	u8 fogEnabled;
	u8 fogShadowEnabled;
	dummy8 dmy[2];
	s32 fogShadowSampleCountBias;
	f32 fogLocalLightDistScale;
	u32 fogVolueSizeScaler;
	u32 fogVolueSizeDivider;
	u32 fogVolumeDepthScaler;
	u32 fogVolumeDepthDivider;
	u8 fogVolumeEnabled;
	u8 fogVolumeUpScaleType;
	u8 fogVolumeEdgeCorrectionLevel;
	s8 fogVolumeRayMarcingSampleCountOffset;
	u8 fogVolumeShadowEnabled;
	u8 fogVolumeForceShadowing;
	u8 fogVolumeResolution;
	dummy8 pad2[1];
};
typedef struct _CS_VOLUMETRIC_EFFECT_QUALITY_DETAIL CS_VOLUMETRIC_EFFECT_QUALITY_DETAIL;

struct _CS_WATER_QUALITY_DETAIL {
	u8 interactionEnabled;
	dummy8 dmy[3];
};
typedef struct _CS_WATER_QUALITY_DETAIL CS_WATER_QUALITY_DETAIL;

struct _GESTURE_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 itemId;
	s32 msgAnimId;
	u8 cannotUseRiding: 1;
	dummy8 pad2: 7;
	dummy8 pad1[3];
};
typedef struct _GESTURE_PARAM_ST GESTURE_PARAM_ST;

struct _GPARAM_GRID_REGION_INFO_PARAM_ST {
	u32 GparamGridRegionId;
	dummy8 Reserve[28];
};
typedef struct _GPARAM_GRID_REGION_INFO_PARAM_ST GPARAM_GRID_REGION_INFO_PARAM_ST;

struct _GPARAM_REF_SETTINGS_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 RefTargetMapId;
	dummy8 Reserve[24];
};
typedef struct _GPARAM_REF_SETTINGS_PARAM_ST GPARAM_REF_SETTINGS_PARAM_ST;

struct _GRAPHICS_COMMON_PARAM_ST {
	f32 hitBulletDecalOffset_HitIns;
	dummy8 reserved02[8];
	f32 charaWetDecalFadeRange;
	dummy8 reserved04[240];
};
typedef struct _GRAPHICS_COMMON_PARAM_ST GRAPHICS_COMMON_PARAM_ST;

struct _CS_GRAPHICS_CONFIG_PARAM_ST {
	u8 m_textureFilterQuality;
	u8 m_aaQuality;
	u8 m_ssaoQuality;
	u8 m_dofQuality;
	u8 m_motionBlurQuality;
	u8 m_shadowQuality;
	u8 m_lightingQuality;
	u8 m_effectQuality;
	u8 m_decalQuality;
	u8 m_reflectionQuality;
	u8 m_waterQuality;
	u8 m_shaderQuality;
	u8 m_volumetricEffectQuality;
	dummy8 m_dummy[3];
};
typedef struct _CS_GRAPHICS_CONFIG_PARAM_ST CS_GRAPHICS_CONFIG_PARAM_ST;

struct _GRASS_LOD_RANGE_PARAM_ST {
	f32 LOD0_range;
	f32 LOD0_play;
	f32 LOD1_range;
	f32 LOD1_play;
	f32 LOD2_range;
	f32 LOD2_play;
};
typedef struct _GRASS_LOD_RANGE_PARAM_ST GRASS_LOD_RANGE_PARAM_ST;

struct _GRASS_MAP_SETTINGS_PARAM_ST {
	u32 grassType0;
	u32 grassType1;
	u32 grassType2;
};
typedef struct _GRASS_MAP_SETTINGS_PARAM_ST GRASS_MAP_SETTINGS_PARAM_ST;

struct _GRASS_TYPE_PARAM_ST {
	u16 lodRange;
	u8 lod0ClusterType;
	u8 lod1ClusterType;
	u8 lod2ClusterType;
	dummy8 pad0[2];
	u8 distributionType;
	f32 baseDensity;
	fixstrW model0Name[16];
	fixstrW flatTextureName[32];
	fixstrW billboardTextureName[32];
	u8 normalInfluence;
	u8 inclinationMax;
	u8 inclinationJitter;
	u8 scaleBaseMin;
	u8 scaleBaseMax;
	u8 scaleHeightMin;
	u8 scaleHeightMax;
	u8 colorShade1_r;
	u8 colorShade1_g;
	u8 colorShade1_b;
	u8 colorShade2_r;
	u8 colorShade2_g;
	u8 colorShade2_b;
	u8 flatSplitType;
	u8 flatBladeCount;
	s8 flatSlant;
	f32 flatRadius;
	u8 castShadow;
	u8 windAmplitude;
	dummy8 pad1[1];
	u8 windCycle;
	f32 orientationAngle;
	f32 orientationRange;
	f32 spacing;
	u8 dithering;
	dummy8 pad[3];
	fixstrW simpleModelName[16];
	fixstrW model1Name[16];
};
typedef struct _GRASS_TYPE_PARAM_ST GRASS_TYPE_PARAM_ST;

struct _HIT_EFFECT_SE_PARAM_ST {
	s32 Iron_Slash_S;
	s32 Iron_Slash_L;
	s32 Iron_Slash_LL;
	s32 Iron_Thrust_S;
	s32 Iron_Thrust_L;
	s32 Iron_Thrust_LL;
	s32 Iron_Blow_S;
	s32 Iron_Blow_L;
	s32 Iron_Blow_LL;
	s32 Fire_Slash_S;
	s32 Fire_Slash_L;
	s32 Fire_Slash_LL;
	s32 Fire_Thrust_S;
	s32 Fire_Thrust_L;
	s32 Fire_Thrust_LL;
	s32 Fire_Blow_S;
	s32 Fire_Blow_L;
	s32 Fire_Blow_LL;
	s32 Wood_Slash_S;
	s32 Wood_Slash_L;
	s32 Wood_Slash_LL;
	s32 Wood_Thrust_S;
	s32 Wood_Thrust_L;
	s32 Wood_Thrust_LL;
	s32 Wood_Blow_S;
	s32 Wood_Blow_L;
	s32 Wood_Blow_LL;
	s32 Body_Slash_S;
	s32 Body_Slash_L;
	s32 Body_Slash_LL;
	s32 Body_Thrust_S;
	s32 Body_Thrust_L;
	s32 Body_Thrust_LL;
	s32 Body_Blow_S;
	s32 Body_Blow_L;
	s32 Body_Blow_LL;
	s32 Eclipse_Slash_S;
	s32 Eclipse_Slash_L;
	s32 Eclipse_Slash_LL;
	s32 Eclipse_Thrust_S;
	s32 Eclipse_Thrust_L;
	s32 Eclipse_Thrust_LL;
	s32 Eclipse_Blow_S;
	s32 Eclipse_Blow_L;
	s32 Eclipse_Blow_LL;
	s32 Energy_Slash_S;
	s32 Energy_Slash_L;
	s32 Energy_Slash_LL;
	s32 Energy_Thrust_S;
	s32 Energy_Thrust_L;
	s32 Energy_Thrust_LL;
	s32 Energy_Blow_S;
	s32 Energy_Blow_L;
	s32 Energy_Blow_LL;
	s32 None_Slash_S;
	s32 None_Slash_L;
	s32 None_Slash_LL;
	s32 None_Thrust_S;
	s32 None_Thrust_L;
	s32 None_Thrust_LL;
	s32 None_Blow_S;
	s32 None_Blow_L;
	s32 None_Blow_LL;
	s32 Dmy1_Slash_S;
	s32 Dmy1_Slash_L;
	s32 Dmy1_Slash_LL;
	s32 Dmy1_Thrust_S;
	s32 Dmy1_Thrust_L;
	s32 Dmy1_Thrust_LL;
	s32 Dmy1_Blow_S;
	s32 Dmy1_Blow_L;
	s32 Dmy1_Blow_LL;
	s32 Dmy2_Slash_S;
	s32 Dmy2_Slash_L;
	s32 Dmy2_Slash_LL;
	s32 Dmy2_Thrust_S;
	s32 Dmy2_Thrust_L;
	s32 Dmy2_Thrust_LL;
	s32 Dmy2_Blow_S;
	s32 Dmy2_Blow_L;
	s32 Dmy2_Blow_LL;
	s32 Dmy3_Slash_S;
	s32 Dmy3_Slash_L;
	s32 Dmy3_Slash_LL;
	s32 Dmy3_Thrust_S;
	s32 Dmy3_Thrust_L;
	s32 Dmy3_Thrust_LL;
	s32 Dmy3_Blow_S;
	s32 Dmy3_Blow_L;
	s32 Dmy3_Blow_LL;
	s32 Maggot_Slash_S;
	s32 Maggot_Slash_L;
	s32 Maggot_Slash_LL;
	s32 Maggot_Thrust_S;
	s32 Maggot_Thrust_L;
	s32 Maggot_Thrust_LL;
	s32 Maggot_Blow_S;
	s32 Maggot_Blow_L;
	s32 Maggot_Blow_LL;
	s32 Wax_Slash_S;
	s32 Wax_Slash_L;
	s32 Wax_Slash_LL;
	s32 Wax_Thrust_S;
	s32 Wax_Thrust_L;
	s32 Wax_Thrust_LL;
	s32 Wax_Blow_S;
	s32 Wax_Blow_L;
	s32 Wax_Blow_LL;
	s32 FireFlame_Slash_S;
	s32 FireFlame_Slash_L;
	s32 FireFlame_Slash_LL;
	s32 FireFlame_Thrust_S;
	s32 FireFlame_Thrust_L;
	s32 FireFlame_Thrust_LL;
	s32 FireFlame_Blow_S;
	s32 FireFlame_Blow_L;
	s32 FireFlame_Blow_LL;
	s32 EclipseGas_Slash_S;
	s32 EclipseGas_Slash_L;
	s32 EclipseGas_Slash_LL;
	s32 EclipseGas_Thrust_S;
	s32 EclipseGas_Thrust_L;
	s32 EclipseGas_Thrust_LL;
	s32 EclipseGas_Blow_S;
	s32 EclipseGas_Blow_L;
	s32 EclipseGas_Blow_LL;
	s32 EnergyStrong_Slash_S;
	s32 EnergyStrong_Slash_L;
	s32 EnergyStrong_Slash_LL;
	s32 EnergyStrong_Thrust_S;
	s32 EnergyStrong_Thrust_L;
	s32 EnergyStrong_Thrust_LL;
	s32 EnergyStrong_Blow_S;
	s32 EnergyStrong_Blow_L;
	s32 EnergyStrong_Blow_LL;
	dummy8 reserve[100];
};
typedef struct _HIT_EFFECT_SE_PARAM_ST HIT_EFFECT_SE_PARAM_ST;

struct _HIT_EFFECT_SFX_CONCEPT_PARAM_ST {
	s16 atkIron_1;
	s16 atkIron_2;
	s16 atkLeather_1;
	s16 atkLeather_2;
	s16 atkWood_1;
	s16 atkWood_2;
	s16 atkBody_1;
	s16 atkBody_2;
	s16 atkStone_1;
	s16 atkStone_2;
	dummy8 pad[4];
	s16 atkNone_1;
	s16 atkNone_2;
	dummy8 reserve[52];
};
typedef struct _HIT_EFFECT_SFX_CONCEPT_PARAM_ST HIT_EFFECT_SFX_CONCEPT_PARAM_ST;

struct _HIT_EFFECT_SFX_PARAM_ST {
	s32 Slash_Normal;
	s32 Slash_S;
	s32 Slash_L;
	s32 Slash_Specific1;
	s32 Slash_Specific2;
	s32 Blow_Normal;
	s32 Blow_S;
	s32 Blow_L;
	s32 Blow_Specific1;
	s32 Blow_Specific2;
	s32 Thrust_Normal;
	s32 Thrust_S;
	s32 Thrust_L;
	s32 Thrust_Specific1;
	s32 Thrust_Specific2;
	s32 Neutral_Normal;
	s32 Neutral_S;
	s32 Neutral_L;
	s32 Neutral_Specific1;
	s32 Neutral_Specific2;
};
typedef struct _HIT_EFFECT_SFX_PARAM_ST HIT_EFFECT_SFX_PARAM_ST;

struct _HIT_MTRL_PARAM_ST {
	f32 aiVolumeRate;
	s32 spEffectIdOnHit0;
	s32 spEffectIdOnHit1;
	u8 footEffectHeightType: 2;
	u8 footEffectDirType: 2;
	u8 floorHeightType: 2;
	u8 disableFallDamage: 1;
	u8 isHardnessForSoundReverb: 1;
	u8 hardnessType;
	dummy8 pad2[6];
	s32 spEffectIdOnHit0_ClearCount_2;
	s32 spEffectIdOnHit0_ClearCount_3;
	s32 spEffectIdOnHit0_ClearCount_4;
	s32 spEffectIdOnHit0_ClearCount_5;
	s32 spEffectIdOnHit0_ClearCount_6;
	s32 spEffectIdOnHit0_ClearCount_7;
	s32 spEffectIdOnHit0_ClearCount_8;
	s32 spEffectIdOnHit1_ClearCount_2;
	s32 spEffectIdOnHit1_ClearCount_3;
	s32 spEffectIdOnHit1_ClearCount_4;
	s32 spEffectIdOnHit1_ClearCount_5;
	s32 spEffectIdOnHit1_ClearCount_6;
	s32 spEffectIdOnHit1_ClearCount_7;
	s32 spEffectIdOnHit1_ClearCount_8;
	s16 replaceMateiralId_Rain;
	dummy8 pad4[2];
	s32 spEffectId_forWet00;
	s32 spEffectId_forWet01;
	s32 spEffectId_forWet02;
	s32 spEffectId_forWet03;
	s32 spEffectId_forWet04;
};
typedef struct _HIT_MTRL_PARAM_ST HIT_MTRL_PARAM_ST;

struct _ITEMLOT_PARAM_ST {
	s32 lotItemId01;
	s32 lotItemId02;
	s32 lotItemId03;
	s32 lotItemId04;
	s32 lotItemId05;
	s32 lotItemId06;
	s32 lotItemId07;
	s32 lotItemId08;
	s32 lotItemCategory01;
	s32 lotItemCategory02;
	s32 lotItemCategory03;
	s32 lotItemCategory04;
	s32 lotItemCategory05;
	s32 lotItemCategory06;
	s32 lotItemCategory07;
	s32 lotItemCategory08;
	u16 lotItemBasePoint01;
	u16 lotItemBasePoint02;
	u16 lotItemBasePoint03;
	u16 lotItemBasePoint04;
	u16 lotItemBasePoint05;
	u16 lotItemBasePoint06;
	u16 lotItemBasePoint07;
	u16 lotItemBasePoint08;
	u16 cumulateLotPoint01;
	u16 cumulateLotPoint02;
	u16 cumulateLotPoint03;
	u16 cumulateLotPoint04;
	u16 cumulateLotPoint05;
	u16 cumulateLotPoint06;
	u16 cumulateLotPoint07;
	u16 cumulateLotPoint08;
	u32 getItemFlagId01;
	u32 getItemFlagId02;
	u32 getItemFlagId03;
	u32 getItemFlagId04;
	u32 getItemFlagId05;
	u32 getItemFlagId06;
	u32 getItemFlagId07;
	u32 getItemFlagId08;
	u32 getItemFlagId;
	u32 cumulateNumFlagId;
	u8 cumulateNumMax;
	s8 lotItem_Rarity;
	u8 lotItemNum01;
	u8 lotItemNum02;
	u8 lotItemNum03;
	u8 lotItemNum04;
	u8 lotItemNum05;
	u8 lotItemNum06;
	u8 lotItemNum07;
	u8 lotItemNum08;
	u16 enableLuck01: 1;
	u16 enableLuck02: 1;
	u16 enableLuck03: 1;
	u16 enableLuck04: 1;
	u16 enableLuck05: 1;
	u16 enableLuck06: 1;
	u16 enableLuck07: 1;
	u16 enableLuck08: 1;
	u16 cumulateReset01: 1;
	u16 cumulateReset02: 1;
	u16 cumulateReset03: 1;
	u16 cumulateReset04: 1;
	u16 cumulateReset05: 1;
	u16 cumulateReset06: 1;
	u16 cumulateReset07: 1;
	u16 cumulateReset08: 1;
	s8 GameClearOffset;
	u8 canExecByFriendlyGhost: 1;
	u8 canExecByHostileGhost: 1;
	u8 PAD1: 6;
	u16 PAD2;
};
typedef struct _ITEMLOT_PARAM_ST ITEMLOT_PARAM_ST;

struct _CS_KEY_ASSIGN_MENUITEM_PARAM {
	s32 textID;
	s32 key;
	u8 enableUnassign;
	u8 enablePadConfig;
	u8 enableMouseConfig;
	u8 group;
	s32 mappingTextID;
	u8 viewPad;
	u8 viewKeyboardMouse;
	dummy8 padding[6];
};
typedef struct _CS_KEY_ASSIGN_MENUITEM_PARAM CS_KEY_ASSIGN_MENUITEM_PARAM;

struct _KEY_ASSIGN_PARAM_ST {
	s32 padKeyId;
	s32 keyboardModifyKey;
	s32 keyboardKeyId;
	s32 mouseModifyKey;
	s32 mouseKeyId;
	dummy8 reserved[12];
};
typedef struct _KEY_ASSIGN_PARAM_ST KEY_ASSIGN_PARAM_ST;

struct _KNOCKBACK_PARAM_ST {
	f32 damage_Min_ContTime;
	f32 damage_S_ContTime;
	f32 damage_M_ContTime;
	f32 damage_L_ContTime;
	f32 damage_BlowS_ContTime;
	f32 damage_BlowM_ContTime;
	f32 damage_Strike_ContTime;
	f32 damage_Uppercut_ContTime;
	f32 damage_Push_ContTime;
	f32 damage_Breath_ContTime;
	f32 damage_HeadShot_ContTime;
	f32 guard_S_ContTime;
	f32 guard_L_ContTime;
	f32 guard_LL_ContTime;
	f32 guardBrake_ContTime;
	f32 damage_Min_DecTime;
	f32 damage_S_DecTime;
	f32 damage_M_DecTime;
	f32 damage_L_DecTime;
	f32 damage_BlowS_DecTime;
	f32 damage_BlowM_DecTime;
	f32 damage_Strike_DecTime;
	f32 damage_Uppercut_DecTime;
	f32 damage_Push_DecTime;
	f32 damage_Breath_DecTime;
	f32 damage_HeadShot_DecTime;
	f32 guard_S_DecTime;
	f32 guard_L_DecTime;
	f32 guard_LL_DecTime;
	f32 guardBrake_DecTime;
	dummy8 pad[8];
};
typedef struct _KNOCKBACK_PARAM_ST KNOCKBACK_PARAM_ST;

struct _KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 unlockFlagId;
	u32 invalidFlagId;
	s32 msgId;
};
typedef struct _KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST;

struct _LEGACY_DISTANT_VIEW_PARTS_REPLACE_PARAM {
	s32 TargetMapId;
	u32 TargetEventId;
	s32 SrcAssetId;
	s32 SrcAssetPartsNo;
	s32 DstAssetId;
	s32 DstAssetPartsNo;
	s32 SrcAssetIdRangeMin;
	s32 SrcAssetIdRangeMax;
	s32 DstAssetIdRangeMin;
	s32 DstAssetIdRangeMax;
	s8 LimitedMapRegionId0;
	s8 LimitedMapRegionId1;
	s8 LimitedMapRegionId2;
	s8 LimitedMapRegionId3;
	dummy8 reserve[4];
	s32 LimitedMapRegionAssetId;
	s32 LimitedMapRegioAssetPartsNo;
	s32 LimitedMapRegioAssetIdRangeMin;
	s32 LimitedMapRegioAssetIdRangeMax;
};
typedef struct _LEGACY_DISTANT_VIEW_PARTS_REPLACE_PARAM LEGACY_DISTANT_VIEW_PARTS_REPLACE_PARAM;

struct _LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST {
	f32 Lv00;
	f32 Lv01;
	f32 Lv02;
	f32 Lv03;
	f32 Lv04;
	f32 Lv05;
	f32 Lv06;
	f32 Lv07;
	f32 Lv08;
	f32 Lv09;
	f32 Lv10;
	f32 Lv11;
	f32 Lv12;
	f32 Lv13;
	f32 Lv14;
	f32 Lv15;
	f32 Lv16;
	f32 Lv17;
	f32 Lv18;
	f32 Lv19;
	f32 Lv20;
	dummy8 reserve[44];
};
typedef struct _LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST;

struct _LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST {
	u8 DrawDist_LvBegin;
	u8 DrawDist_LvEnd;
	dummy8 reserve0[2];
	f32 DrawDist_ScaleBegin;
	f32 DrawDist_ScaleEnd;
	u8 ShadwDrawDist_LvBegin;
	u8 ShadwDrawDist_LvEnd;
	dummy8 reserve1[2];
	f32 ShadwDrawDist_ScaleBegin;
	f32 ShadwDrawDist_ScaleEnd;
	dummy8 reserve2[24];
};
typedef struct _LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST;

struct _LOAD_BALANCER_PARAM_ST {
	f32 lowerFpsThreshold;
	f32 upperFpsThreshold;
	u32 lowerFpsContinousCount;
	u32 upperFpsContinousCount;
	u32 downAfterChangeSleep;
	u32 upAfterChangeSleep;
	u8 postProcessLightShaft;
	u8 postProcessBloom;
	u8 postProcessGlow;
	u8 postProcessAA;
	u8 postProcessSSAO;
	u8 postProcessDOF;
	u8 postProcessMotionBlur;
	u8 postProcessMotionBlurIteration;
	dummy8 reserve0[1];
	u8 shadowBlur;
	u8 sfxParticleHalf;
	u8 sfxReflection;
	u8 sfxWaterInteraction;
	u8 sfxGlow;
	u8 sfxDistortion;
	u8 sftSoftSprite;
	u8 sfxLightShaft;
	u8 sfxScaleRenderDistanceScale;
	u8 dynamicResolution;
	u8 shadowCascade0ResolutionHalf;
	u8 shadowCascade1ResolutionHalf;
	u8 chrWetDisablePlayer;
	u8 chrWetDisableRemotePlayer;
	u8 chrWetDisableEnemy;
	u8 dynamicResolutionPercentageMin;
	u8 dynamicResolutionPercentageMax;
	dummy8 reserve1[30];
};
typedef struct _LOAD_BALANCER_PARAM_ST LOAD_BALANCER_PARAM_ST;

struct _LOCK_CAM_PARAM_ST {
	f32 camDistTarget;
	f32 rotRangeMinX;
	f32 lockRotXShiftRatio;
	f32 chrOrgOffset_Y;
	f32 chrLockRangeMaxRadius;
	f32 camFovY;
	f32 chrLockRangeMaxRadius_forD;
	f32 chrLockRangeMaxRadius_forPD;
	f32 closeMaxHeight;
	f32 closeMinHeight;
	f32 closeAngRange;
	f32 closeMaxRadius;
	f32 closeMaxRadius_forD;
	f32 closeMaxRadius_forPD;
	f32 bulletMaxRadius;
	f32 bulletMaxRadius_forD;
	f32 bulletMaxRadius_forPD;
	f32 bulletAngRange;
	f32 lockTgtKeepTime;
	f32 chrTransChaseRateForNormal;
	dummy8 pad[48];
};
typedef struct _LOCK_CAM_PARAM_ST LOCK_CAM_PARAM_ST;

struct _MAGIC_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 yesNoDialogMessageId;
	s32 limitCancelSpEffectId;
	s16 sortId;
	u8 requirementLuck;
	u8 aiNotifyType;
	s16 mp;
	s16 stamina;
	s16 iconId;
	s16 behaviorId;
	s16 mtrlItemId;
	s16 replaceMagicId;
	s16 maxQuantity;
	u8 refCategory1;
	u8 overDexterity;
	u8 refCategory2;
	u8 slotLength;
	u8 requirementIntellect;
	u8 requirementFaith;
	u8 analogDexterityMin;
	u8 analogDexterityMax;
	u8 ezStateBehaviorType;
	u8 refCategory3;
	u8 spEffectCategory;
	u8 refType;
	u8 opmeMenuType;
	u8 refCategory4;
	u16 hasSpEffectType;
	u8 replaceCategory;
	u8 useLimitCategory;
	u8 vowType0: 1;
	u8 vowType1: 1;
	u8 vowType2: 1;
	u8 vowType3: 1;
	u8 vowType4: 1;
	u8 vowType5: 1;
	u8 vowType6: 1;
	u8 vowType7: 1;
	u8 enable_multi: 1;
	u8 enable_multi_only: 1;
	u8 isEnchant: 1;
	u8 isShieldEnchant: 1;
	u8 enable_live: 1;
	u8 enable_gray: 1;
	u8 enable_white: 1;
	u8 enable_black: 1;
	u8 disableOffline: 1;
	u8 castResonanceMagic: 1;
	u8 isValidTough_ProtSADmg: 1;
	u8 isWarpMagic: 1;
	u8 enableRiding: 1;
	u8 disableRiding: 1;
	u8 isUseNoAttackRegion: 1;
	dummy8 pad_1: 1;
	u8 vowType8: 1;
	u8 vowType9: 1;
	u8 vowType10: 1;
	u8 vowType11: 1;
	u8 vowType12: 1;
	u8 vowType13: 1;
	u8 vowType14: 1;
	u8 vowType15: 1;
	s32 castSfxId;
	s32 fireSfxId;
	s32 effectSfxId;
	f32 toughnessCorrectRate;
	u8 ReplacementStatusType;
	s8 ReplacementStatus1;
	s8 ReplacementStatus2;
	s8 ReplacementStatus3;
	s8 ReplacementStatus4;
	u8 refCategory5;
	s16 consumeSA;
	s32 ReplacementMagic1;
	s32 ReplacementMagic2;
	s32 ReplacementMagic3;
	s32 ReplacementMagic4;
	s16 mp_charge;
	s16 stamina_charge;
	u8 createLimitGroupId;
	u8 refCategory6;
	u8 subCategory1;
	u8 subCategory2;
	u8 refCategory7;
	u8 refCategory8;
	u8 refCategory9;
	u8 refCategory10;
	s32 refId1;
	s32 refId2;
	s32 refId3;
	s32 aiUseJudgeId;
	s32 refId4;
	s32 refId5;
	s32 refId6;
	s32 refId7;
	s32 refId8;
	s32 refId9;
	s32 refId10;
	u8 consumeType1;
	u8 consumeType2;
	u8 consumeType3;
	u8 consumeType4;
	u8 consumeType5;
	u8 consumeType6;
	u8 consumeType7;
	u8 consumeType8;
	u8 consumeType9;
	u8 consumeType10;
	s16 consumeLoopMP_forMenu;
	dummy8 pad[8];
};
typedef struct _MAGIC_PARAM_ST MAGIC_PARAM_ST;

struct _MAP_DEFAULT_INFO_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 EnableFastTravelEventFlagId;
	s32 WeatherLotTimeOffsetIngameSeconds;
	s8 WeatherCreateAssetLimitId;
	u8 MapAiSightType;
	u8 SoundIndoorType;
	s8 ReverbDefaultType;
	s16 BgmPlaceInfo;
	s16 EnvPlaceInfo;
	s32 MapAdditionalSoundBankId;
	s16 MapHeightForSound;
	u8 IsEnableBlendTimezoneEnvmap;
	s8 OverrideGIResolution_XSS;
	f32 MapLoHiChangeBorderDist_XZ;
	f32 MapLoHiChangeBorderDist_Y;
	f32 MapLoHiChangePlayDist;
	u32 MapAutoDrawGroupBackFacePixelNum;
	f32 PlayerLigntScale;
	u8 IsEnableTimezonnePlayerLigntScale;
	u8 isDisableAutoCliffWind;
	s16 OpenChrActivateThreshold;
	s32 MapMimicryEstablishmentParamId;
	s8 OverrideGIResolution_XSX;
	dummy8 Reserve[7];
};
typedef struct _MAP_DEFAULT_INFO_PARAM_ST MAP_DEFAULT_INFO_PARAM_ST;

struct _MAP_GD_REGION_DRAW_PARAM {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	f32 overrideIVLocalLightScale;
};
typedef struct _MAP_GD_REGION_DRAW_PARAM MAP_GD_REGION_DRAW_PARAM;

struct _MAP_GD_REGION_ID_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 mapRegionId;
	dummy8 Reserve[24];
};
typedef struct _MAP_GD_REGION_ID_PARAM_ST MAP_GD_REGION_ID_PARAM_ST;

struct _MAP_GRID_CREATE_HEIGHT_LIMIT_INFO_PARAM_ST {
	f32 GridEnableCreateHeightMin;
	f32 GridEnableCreateHeightMax;
	dummy8 Reserve[24];
};
typedef struct _MAP_GRID_CREATE_HEIGHT_LIMIT_INFO_PARAM_ST MAP_GRID_CREATE_HEIGHT_LIMIT_INFO_PARAM_ST;

struct _MAP_MIMICRY_ESTABLISHMENT_PARAM_ST {
	f32 mimicryEstablishment0;
	f32 mimicryEstablishment1;
	f32 mimicryEstablishment2;
	s32 mimicryBeginSfxId0;
	s32 mimicrySfxId0;
	s32 mimicryEndSfxId0;
	s32 mimicryBeginSfxId1;
	s32 mimicrySfxId1;
	s32 mimicryEndSfxId1;
	s32 mimicryBeginSfxId2;
	s32 mimicrySfxId2;
	s32 mimicryEndSfxId2;
	dummy8 pad1[16];
};
typedef struct _MAP_MIMICRY_ESTABLISHMENT_PARAM_ST MAP_MIMICRY_ESTABLISHMENT_PARAM_ST;

struct _MAP_NAME_TEX_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 srcR;
	u8 srcG;
	u8 srcB;
	dummy8 pad1[1];
	s32 mapNameId;
	dummy8 pad2[4];
};
typedef struct _MAP_NAME_TEX_PARAM_ST MAP_NAME_TEX_PARAM_ST;

struct _MAP_PIECE_TEX_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 srcR;
	u8 srcG;
	u8 srcB;
	dummy8 pad1[1];
	s32 saveMapNameId;
	s32 multiPlayAreaId;
};
typedef struct _MAP_PIECE_TEX_PARAM_ST MAP_PIECE_TEX_PARAM_ST;

struct _MATERIAL_EX_PARAM_ST {
	fixstrW paramName[32];
	s32 materialId;
	f32 materialParamValue0;
	f32 materialParamValue1;
	f32 materialParamValue2;
	f32 materialParamValue3;
	f32 materialParamValue4;
	dummy8 pad[8];
};
typedef struct _MATERIAL_EX_PARAM_ST MATERIAL_EX_PARAM_ST;

struct _MENU_COMMON_PARAM_ST {
	f32 soloPlayDeath_ToFadeOutTime;
	f32 partyGhostDeath_ToFadeOutTime;
	s32 playerMaxHpLimit;
	s32 playerMaxMpLimit;
	s32 playerMaxSpLimit;
	f32 actionPanelChangeThreshold_Vel;
	f32 actionPanelChangeThreshold_PassTime;
	s32 kgIconVspace;
	f32 worldMapCursorSelectRadius;
	dummy8 reserved8[4];
	s32 decalPosOffsetX;
	s32 decalPosOffsetY;
	f32 targetStateSearchDurationTime;
	f32 targetStateBattleDurationTime;
	f32 worldMapCursorSpeed;
	f32 worldMapCursorFirstDistance;
	f32 worldMapCursorFirstDelay;
	f32 worldMapCursorWaitTime;
	f32 worldMapCursorSnapRadius;
	f32 worldMapCursorSnapTime;
	f32 itemGetLogAliveTime;
	s32 playerMaxSaLimit;
	u32 worldMap_IsChangeableLayerEventFlagId;
	f32 worldMap_TravelMargin;
	f32 systemAnnounceScrollBufferTime;
	s32 systemAnnounceScrollSpeed;
	f32 systemAnnounceNoScrollWaitTime;
	u8 systemAnnounceScrollCount;
	dummy8 reserved17[3];
	f32 compassMemoDispDistance;
	f32 compassBonfireDispDistance;
	f32 markerGoalThreshold;
	f32 svSliderStep;
	f32 preOpeningMovie_WaitSec;
	f32 kgIconScale;
	f32 kgIconScale_forTable;
	s32 kgIconVspace_forTable;
	f32 kgIconScale_forConfig;
	s32 kgIconVspace_forConfig;
	f32 worldMap_SearchRadius;
	f32 tutorialDisplayTime;
	f32 compassFriendHostInnerDistance;
	f32 compassEnemyHostInnerDistance;
	f32 compassFriendGuestInnerDistance;
	f32 cutsceneKeyGuideAliveTime;
	f32 autoHideHpThresholdRatio;
	s32 autoHideHpThresholdValue;
	f32 autoHideMpThresholdRatio;
	s32 autoHideMpThresholdValue;
	f32 autoHideSpThresholdRatio;
	s32 autoHideSpThresholdValue;
	f32 worldMapZoomAnimationTime;
	f32 worldMapIconScaleMin;
	f32 worldMap_TravelMargin_Point;
	u16 enemyTagSafeLeft;
	u16 enemyTagSafeRight;
	u16 enemyTagSafeTop;
	u16 enemyTagSafeBottom;
	u32 pcHorseHpRecoverDispThreshold;
	dummy8 reserved33[32];
};
typedef struct _MENU_COMMON_PARAM_ST MENU_COMMON_PARAM_ST;

struct _MENU_OFFSCR_REND_PARAM_ST {
	f32 camAtPosX;
	f32 camAtPosY;
	f32 camAtPosZ;
	f32 camDist;
	f32 camRotX;
	f32 camRotY;
	f32 camFov;
	f32 camDistMin;
	f32 camDistMax;
	f32 camRotXMin;
	f32 camRotXMax;
	u32 GparamID;
	u32 envTexId;
	u32 Grapm_ID_forPS4;
	u32 Grapm_ID_forXB1;
	dummy8 pad[4];
};
typedef struct _MENU_OFFSCR_REND_PARAM_ST MENU_OFFSCR_REND_PARAM_ST;

struct _MENU_PARAM_COLOR_TABLE_ST {
	u8 lerpMode;
	dummy8 pad1[3];
	u16 h;
	dummy8 pad2[2];
	f32 s1;
	f32 v1;
	f32 s2;
	f32 v2;
	f32 s3;
	f32 v3;
};
typedef struct _MENU_PARAM_COLOR_TABLE_ST MENU_PARAM_COLOR_TABLE_ST;

struct _MENUPROPERTY_LAYOUT {
	fixstr LayoutPath[16];
	s32 PropertyID;
	s32 CaptionTextID;
	s32 HelpTextID;
	dummy8 reserved[4];
};
typedef struct _MENUPROPERTY_LAYOUT MENUPROPERTY_LAYOUT;

struct _MENUPROPERTY_SPEC {
	s32 CaptionTextID;
	s32 IconID;
	u32 RequiredPropertyID;
	s8 CompareType;
	dummy8 pad2[1];
	u16 FormatType;
	dummy8 pad[16];
};
typedef struct _MENUPROPERTY_SPEC MENUPROPERTY_SPEC;

struct _MENU_VALUE_TABLE_SPEC {
	s32 value;
	s32 textId;
	s8 compareType;
	dummy8 padding[3];
};
typedef struct _MENU_VALUE_TABLE_SPEC MENU_VALUE_TABLE_SPEC;

struct _MIMICRY_ESTABLISHMENT_TEX_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 srcR;
	u8 srcG;
	u8 srcB;
	dummy8 pad1[1];
	s32 mimicryEstablishmentParamId;
	dummy8 pad2[4];
};
typedef struct _MIMICRY_ESTABLISHMENT_TEX_PARAM_ST MIMICRY_ESTABLISHMENT_TEX_PARAM_ST;

struct _MISSILE_PARAM_ST {
	s32 FFXID;
	u16 LifeTime;
	u16 HitSphereRadius;
	u16 HitDamage;
	dummy8 reserve0[6];
	f32 InitVelocity;
	f32 distance;
	f32 gravityInRange;
	f32 gravityOutRange;
	s32 mp;
	f32 accelInRange;
	f32 accelOutRange;
	dummy8 reserve1[20];
	u16 HitMissileID;
	u8 DiedNaturaly;
	u8 ExplosionDie;
	s32 behaviorId;
	dummy8 reserve_last[56];
};
typedef struct _MISSILE_PARAM_ST MISSILE_PARAM_ST;

struct _MODEL_SFX_PARAM_ST {
	s32 sfxId_0;
	s32 dmypolyId_0;
	dummy8 reserve_0[8];
	s32 sfxId_1;
	s32 dmypolyId_1;
	dummy8 reserve_1[8];
	s32 sfxId_2;
	s32 dmypolyId_2;
	dummy8 reserve_2[8];
	s32 sfxId_3;
	s32 dmypolyId_3;
	dummy8 reserve_3[8];
	s32 sfxId_4;
	s32 dmypolyId_4;
	dummy8 reserve_4[8];
	s32 sfxId_5;
	s32 dmypolyId_5;
	dummy8 reserve_5[8];
	s32 sfxId_6;
	s32 dmypolyId_6;
	dummy8 reserve_6[8];
	s32 sfxId_7;
	s32 dmypolyId_7;
	dummy8 reserve_7[8];
};
typedef struct _MODEL_SFX_PARAM_ST MODEL_SFX_PARAM_ST;

struct _MOVE_PARAM_ST {
	s32 stayId;
	s32 walkF;
	s32 walkB;
	s32 walkL;
	s32 walkR;
	s32 dashF;
	s32 dashB;
	s32 dashL;
	s32 dashR;
	s32 superDash;
	s32 escapeF;
	s32 escapeB;
	s32 escapeL;
	s32 escapeR;
	s32 turnL;
	s32 trunR;
	s32 largeTurnL;
	s32 largeTurnR;
	s32 stepMove;
	s32 flyStay;
	s32 flyWalkF;
	s32 flyWalkFL;
	s32 flyWalkFR;
	s32 flyWalkFL2;
	s32 flyWalkFR2;
	s32 flyDashF;
	s32 flyDashFL;
	s32 flyDashFR;
	s32 flyDashFL2;
	s32 flyDashFR2;
	s32 dashEscapeF;
	s32 dashEscapeB;
	s32 dashEscapeL;
	s32 dashEscapeR;
	s32 analogMoveParamId;
	u8 turnNoAnimAngle;
	u8 turn45Angle;
	u8 turn90Angle;
	u8 turnWaitNoAnimAngle;
};
typedef struct _MOVE_PARAM_ST MOVE_PARAM_ST;

struct _MULTI_ESTUS_FLASK_BONUS_PARAM_ST {
	u8 host;
	u8 WhiteGhost_None;
	u8 WhiteGhost_Umbasa;
	u8 WhiteGhost_Berserker;
	u8 BlackGhost_None_Sign;
	u8 BlackGhost_Umbasa_Sign;
	u8 BlackGhost_Berserker_Sign;
	u8 BlackGhost_None_Invade;
	u8 BlackGhost_Umbasa_Invade;
	u8 BlackGhost_Berserker_Invade;
	u8 RedHunter1;
	u8 RedHunter2;
	u8 GuardianOfForest;
	u8 GuardianOfAnor;
	u8 BattleRoyal;
	u8 YellowMonk;
	dummy8 pad1[48];
};
typedef struct _MULTI_ESTUS_FLASK_BONUS_PARAM_ST MULTI_ESTUS_FLASK_BONUS_PARAM_ST;

struct _MULTI_PLAY_CORRECTION_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 client1SpEffectId;
	s32 client2SpEffectId;
	s32 client3SpEffectId;
	u8 bOverrideSpEffect;
	dummy8 pad3[15];
};
typedef struct _MULTI_PLAY_CORRECTION_PARAM_ST MULTI_PLAY_CORRECTION_PARAM_ST;

struct _MULTI_SOUL_BONUS_RATE_PARAM_ST {
	f32 host;
	f32 WhiteGhost_None;
	f32 WhiteGhost_Umbasa;
	f32 WhiteGhost_Berserker;
	f32 BlackGhost_None_Sign;
	f32 BlackGhost_Umbasa_Sign;
	f32 BlackGhost_Berserker_Sign;
	f32 BlackGhost_None_Invade;
	f32 BlackGhost_Umbasa_Invade;
	f32 BlackGhost_Berserker_Invade;
	f32 RedHunter1;
	f32 RedHunter2;
	f32 GuardianOfForest;
	f32 GuardianOfAnor;
	f32 BattleRoyal;
	f32 YellowMonk;
	dummy8 pad1[64];
};
typedef struct _MULTI_SOUL_BONUS_RATE_PARAM_ST MULTI_SOUL_BONUS_RATE_PARAM_ST;

struct _NETWORK_AREA_PARAM_ST {
	f32 cellSizeX;
	f32 cellSizeY;
	f32 cellSizeZ;
	f32 cellOffsetX;
	f32 cellOffsetY;
	f32 cellOffsetZ;
	u8 enableBloodstain: 1;
	u8 enableBloodMessage: 1;
	u8 enableGhost: 1;
	u8 enableMultiPlay: 1;
	u8 enableRingSearch: 1;
	u8 enableBreakInSearch: 1;
	dummy8 dummy[3];
};
typedef struct _NETWORK_AREA_PARAM_ST NETWORK_AREA_PARAM_ST;

struct _NETWORK_MSG_PARAM_ST {
	u16 priority;
	u8 forcePlay;
	dummy8 pad1[1];
	s32 normalWhite;
	s32 umbasaWhite;
	s32 berserkerWhite;
	s32 sinnerHeroWhite;
	s32 normalBlack;
	s32 umbasaBlack;
	s32 berserkerBlack;
	s32 forceJoinBlack;
	s32 forceJoinUmbasaBlack;
	s32 forceJoinBerserkerBlack;
	s32 sinnerHunterVisitor;
	s32 redHunterVisitor;
	s32 guardianOfBossVisitor;
	s32 guardianOfForestMapVisitor;
	s32 guardianOfAnolisVisitor;
	s32 rosaliaBlack;
	s32 forceJoinRosaliaBlack;
	s32 redHunterVisitor2;
	s32 npc1;
	s32 npc2;
	s32 npc3;
	s32 npc4;
	s32 battleRoyal;
	s32 npc5;
	s32 npc6;
	s32 npc7;
	s32 npc8;
	s32 npc9;
	s32 npc10;
	s32 npc11;
	s32 npc12;
	s32 npc13;
	s32 npc14;
	s32 npc15;
	s32 npc16;
	s32 forceJoinBlack_B;
	s32 normalWhite_Npc;
	s32 forceJoinBlack_Npc;
	s32 forceJoinBlack_B_Npc;
	s32 forceJoinBlack_C_Npc;
	dummy8 pad2[28];
};
typedef struct _NETWORK_MSG_PARAM_ST NETWORK_MSG_PARAM_ST;

struct _NETWORK_PARAM_ST {
	f32 signVerticalOffset;
	f32 maxSignPosCorrectionRange;
	f32 summonTimeoutTime;
	dummy8 pad_0[4];
	f32 signPuddleActiveMessageIntervalSec;
	f32 keyGuideHeight_0;
	f32 reloadSignIntervalTime1;
	f32 reloadSignIntervalTime2;
	u32 reloadSignTotalCount_0;
	u32 reloadSignCellCount_0;
	f32 updateSignIntervalTime;
	f32 basicExclusiveRange_0;
	f32 basicExclusiveHeight_0;
	f32 previewChrWaitingTime;
	f32 signVisibleRange_0;
	u32 cellGroupHorizontalRange_0;
	u32 cellGroupTopRange_0;
	u32 cellGroupBottomRange_0;
	f32 minWhitePhantomLimitTimeScale;
	f32 minSmallPhantomLimitTimeScale;
	f32 whiteKeywordLimitTimeScale;
	f32 smallKeywordLimitTimeScale;
	f32 blackKeywordLimitTimeScale;
	f32 dragonKeywordLimitTimeScale;
	u32 singGetMax;
	f32 signDownloadSpan;
	f32 signUpdateSpan;
	dummy8 signPad[4];
	u32 maxBreakInTargetListCount;
	f32 breakInRequestIntervalTimeSec;
	f32 breakInRequestTimeOutSec;
	dummy8 pad_1[4];
	f32 keyGuideRange;
	f32 keyGuideHeight_1;
	u32 reloadSignTotalCount_1;
	u32 reloadNewSignCellCount;
	u32 reloadRandomSignCellCount;
	u32 maxSignTotalCount_0;
	u32 maxSignCellCount_0;
	f32 basicExclusiveRange_1;
	f32 basicExclusiveHeight_1;
	f32 signVisibleRange_1;
	u32 maxWriteSignCount;
	u32 maxReadSignCount;
	f32 reloadSignIntervalTime_0;
	u32 cellGroupHorizontalRange_1;
	u32 cellGroupTopRange_1;
	u32 cellGroupBottomRange_1;
	u32 lifeTime_0;
	f32 downloadSpan_0;
	f32 downloadEvaluationSpan;
	dummy8 pad_2[4];
	f32 deadingGhostStartPosThreshold;
	f32 keyGuideHeight_2;
	f32 keyGuideRangePlayer;
	f32 keyGuideHeightPlayer;
	u32 reloadSignTotalCount_2;
	u32 reloadSignCellCount_1;
	u32 maxSignTotalCount_1;
	u32 maxSignCellCount_1;
	f32 reloadSignIntervalTime_1;
	f32 signVisibleRange_2;
	f32 basicExclusiveRange_2;
	f32 basicExclusiveHeight_2;
	u32 cellGroupHorizontalRange_2;
	u32 cellGroupTopRange_2;
	u32 cellGroupBottomRange_2;
	u32 lifeTime_1;
	f32 recordDeadingGhostTotalTime;
	f32 recordDeadingGhostMinTime;
	f32 downloadSpan_1;
	f32 statueCreatableDistance;
	u32 reloadGhostTotalCount;
	u32 reloadGhostCellCount;
	u32 maxGhostTotalCount;
	f32 distanceOfBeginRecordVersus;
	f32 distanceOfEndRecordVersus;
	f32 updateWanderGhostIntervalTime;
	f32 updateVersusGhostIntervalTime;
	f32 recordWanderingGhostTime;
	f32 recordWanderingGhostMinTime;
	f32 updateBonfireGhostIntervalTime;
	f32 replayGhostRangeOnView;
	f32 replayGhostRangeOutView;
	f32 replayBonfireGhostTime;
	f32 minBonfireGhostValidRange;
	f32 maxBonfireGhostValidRange;
	f32 minReplayIntervalTime;
	f32 maxReplayIntervalTime;
	f32 reloadGhostIntervalTime;
	u32 cellGroupHorizontalRange_3;
	u32 cellGroupTopRange_3;
	s32 replayBonfirePhantomParamIdForCodename;
	f32 replayBonfireModeRange;
	s32 replayBonfirePhantomParamId;
	dummy8 ghostpad[4];
	f32 reloadVisitListCoolTime;
	u32 maxCoopBlueSummonCount;
	u32 maxBellGuardSummonCount;
	u32 maxVisitListCount;
	f32 reloadSearch_CoopBlue_Min;
	f32 reloadSearch_CoopBlue_Max;
	f32 reloadSearch_BellGuard_Min;
	f32 reloadSearch_BellGuard_Max;
	f32 reloadSearch_RatKing_Min;
	f32 reloadSearch_RatKing_Max;
	dummy8 visitpad00[8];
	f32 srttMaxLimit;
	f32 srttMeanLimit;
	f32 srttMeanDeviationLimit;
	f32 darkPhantomLimitBoostTime;
	f32 darkPhantomLimitBoostScale;
	f32 multiplayDisableLifeTime;
	u8 abyssMultiplayLimit;
	u8 phantomWarpMinimumTime;
	u8 phantomReturnDelayTime;
	u8 terminateTimeoutTime;
	u16 penaltyPointLanDisconnect;
	u16 penaltyPointSignout;
	u16 penaltyPointReboot;
	u16 penaltyPointBeginPenalize;
	f32 penaltyForgiveItemLimitTime;
	u8 allAreaSearchRate_CoopBlue;
	u8 allAreaSearchRate_VsBlue;
	u8 allAreaSearchRate_BellGuard;
	u8 bloodMessageEvalHealRate;
	u32 smallGoldSuccessHostRewardId;
	f32 doorInvalidPlayAreaExtents;
	u8 signDisplayMax;
	u8 bloodStainDisplayMax;
	u8 bloodMessageDisplayMax;
	dummy8 pad00[9];
	dummy8 pad10[32];
	f32 summonMessageInterval;
	f32 hostRegisterUpdateTime;
	f32 hostTimeOutTime;
	f32 guestUpdateTime;
	f32 guestPlayerNoTimeOutTime;
	f32 hostPlayerNoTimeOutTime;
	u32 requestSearchQuickMatchLimit;
	u32 AvatarMatchSearchMax;
	u32 BattleRoyalMatchSearchMin;
	u32 BattleRoyalMatchSearchMax;
	dummy8 pad11[8];
	u32 VisitorListMax;
	f32 VisitorTimeOutTime;
	f32 DownloadSpan;
	f32 VisitorGuestRequestMessageIntervalSec;
	f32 wanderGhostIntervalLifeTime;
	dummy8 pad13[12];
	f32 YellowMonkTimeOutTime;
	f32 YellowMonkDownloadSpan;
	f32 YellowMonkOverallFlowTimeOutTime;
	dummy8 pad14_0[4];
	dummy8 pad14_1[8];
};
typedef struct _NETWORK_PARAM_ST NETWORK_PARAM_ST;

struct _NPC_AI_ACTION_PARAM_ST {
	u8 moveDir;
	u8 key1;
	u8 key2;
	u8 key3;
	u8 bMoveDirHold;
	u8 bKeyHold1;
	u8 bKeyHold2;
	u8 bKeyHold3;
	s32 gestureId;
	u8 bLifeEndSuccess;
	dummy8 pad1[3];
};
typedef struct _NPC_AI_ACTION_PARAM_ST NPC_AI_ACTION_PARAM_ST;

struct _NPC_AI_BEHAVIOR_PROBABILITY_PARAM_ST {
	s16 param000;
	s16 param001;
	s16 param002;
	s16 param003;
	s16 param004;
	s16 param005;
	s16 param006;
	s16 param007;
	s16 param008;
	s16 param009;
	s16 param010;
	s16 param011;
	s16 param012;
	s16 param013;
	s16 param014;
	s16 param015;
	s16 param016;
	s16 param017;
	s16 param018;
	s16 param019;
	s16 param020;
	s16 param021;
	s16 param022;
	s16 param023;
	s16 param024;
	s16 param025;
	s16 param026;
	s16 param027;
	s16 param028;
	s16 param029;
	s16 param030;
	s16 param031;
	s16 param032;
	s16 param033;
	s16 param034;
	s16 param035;
	s16 param036;
	s16 param037;
	s16 param038;
	s16 param039;
	s16 param040;
	s16 param041;
	s16 param042;
	s16 param043;
	s16 param044;
	s16 param045;
	s16 param046;
	s16 param047;
	s16 param048;
	s16 param049;
	s16 param050;
	s16 param051;
	s16 param052;
	s16 param053;
	s16 param054;
	s16 param055;
	s16 param056;
	s16 param057;
	s16 param058;
	s16 param059;
	s16 param060;
	s16 param061;
	s16 param062;
	s16 param063;
	s16 param064;
	s16 param065;
	s16 param066;
	s16 param067;
	s16 param068;
	s16 param069;
	s16 param070;
	s16 param071;
	s16 param072;
	s16 param073;
	s16 param074;
	s16 param075;
	s16 param076;
	s16 param077;
	s16 param078;
	s16 param079;
	s16 param080;
	s16 param081;
	s16 param082;
	s16 param083;
	s16 param084;
	s16 param085;
	s16 param086;
	s16 param087;
	s16 param088;
	s16 param089;
	s16 param090;
	s16 param091;
	s16 param092;
	s16 param093;
	s16 param094;
	s16 param095;
	s16 param096;
	s16 param097;
	s16 param098;
	s16 param099;
	s16 param100;
	s16 param101;
	s16 param102;
	s16 param103;
	s16 param104;
	s16 param105;
	s16 param106;
	s16 param107;
	s16 param108;
	s16 param109;
	s16 param110;
	s16 param111;
	s16 param112;
	s16 param113;
	s16 param114;
	s16 param115;
	s16 param116;
	s16 param117;
	s16 param118;
	s16 param119;
	s16 param120;
	s16 param121;
	s16 param122;
	s16 param123;
	s16 param124;
	s16 param125;
	s16 param126;
	s16 param127;
	s16 param128;
	s16 param129;
	s16 param130;
	s16 param131;
	s16 param132;
	s16 param133;
	s16 param134;
	s16 param135;
	s16 param136;
	s16 param137;
	s16 param138;
	s16 param139;
	s16 param140;
	s16 param141;
	s16 param142;
	s16 param143;
	s16 param144;
	s16 param145;
	s16 param146;
	s16 param147;
	s16 param148;
	s16 param149;
	s16 param150;
	s16 param151;
	s16 param152;
	s16 param153;
	s16 param154;
	s16 param155;
	s16 param156;
	s16 param157;
	s16 param158;
	s16 param159;
	s16 param160;
	s16 param161;
	s16 param162;
	s16 param163;
	s16 param164;
	s16 param165;
	s16 param166;
	s16 param167;
	s16 param168;
	s16 param169;
	s16 param170;
	s16 param171;
	s16 param172;
	s16 param173;
	s16 param174;
	s16 param175;
	s16 param176;
	s16 param177;
	s16 param178;
	s16 param179;
	s16 param180;
	s16 param181;
	s16 param182;
	s16 param183;
	s16 param184;
	s16 param185;
	s16 param186;
	s16 param187;
	s16 param188;
	s16 param189;
	s16 param190;
	s16 param191;
	s16 param192;
	s16 param193;
	s16 param194;
	s16 param195;
	s16 param196;
	s16 param197;
	s16 param198;
	s16 param199;
};
typedef struct _NPC_AI_BEHAVIOR_PROBABILITY_PARAM_ST NPC_AI_BEHAVIOR_PROBABILITY_PARAM_ST;

struct _NPC_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 behaviorVariationId;
	s32 resistCorrectId_poison;
	s32 nameId;
	f32 turnVellocity;
	f32 hitHeight;
	f32 hitRadius;
	u32 weight;
	f32 hitYOffset;
	u32 hp;
	u32 mp;
	u32 getSoul;
	s32 itemLotId_enemy;
	s32 itemLotId_map;
	f32 maxAnkleRollAngle;
	u8 chrHitGroupAndNavimesh;
	u8 faceIconId;
	s16 deactivateDist;
	u32 chrActivateConditionParamId;
	f32 footIkErrorHeightLimit;
	s32 humanityLotId;
	s32 spEffectID0;
	s32 spEffectID1;
	s32 spEffectID2;
	s32 spEffectID3;
	s32 spEffectID4;
	s32 spEffectID5;
	s32 spEffectID6;
	s32 spEffectID7;
	s32 GameClearSpEffectID;
	f32 physGuardCutRate;
	f32 magGuardCutRate;
	f32 fireGuardCutRate;
	f32 thunGuardCutRate;
	s32 animIdOffset;
	s16 lockGazePoint0;
	s16 lockGazePoint1;
	s16 lockGazePoint2;
	s16 lockGazePoint3;
	s16 lockGazePoint4;
	s16 lockGazePoint5;
	f32 networkWarpDist;
	s32 dbgBehaviorR1;
	s32 dbgBehaviorL1;
	s32 dbgBehaviorR2;
	s32 dbgBehaviorL2;
	s32 dbgBehaviorRL;
	s32 dbgBehaviorRR;
	s32 dbgBehaviorRD;
	s32 dbgBehaviorRU;
	s32 dbgBehaviorLL;
	s32 dbgBehaviorLR;
	s32 dbgBehaviorLD;
	s32 dbgBehaviorLU;
	s32 animIdOffset2;
	f32 partsDamageRate1;
	f32 partsDamageRate2;
	f32 partsDamageRate3;
	f32 partsDamageRate4;
	f32 partsDamageRate5;
	f32 partsDamageRate6;
	f32 partsDamageRate7;
	f32 partsDamageRate8;
	f32 weakPartsDamageRate;
	f32 superArmorRecoverCorrection;
	f32 superArmorBrakeKnockbackDist;
	u16 stamina;
	u16 staminaRecoverBaseVel;
	u16 def_phys;
	s16 def_slash;
	s16 def_blow;
	s16 def_thrust;
	u16 def_mag;
	u16 def_fire;
	u16 def_thunder;
	u16 defFlickPower;
	u16 resist_poison;
	u16 resist_desease;
	u16 resist_blood;
	u16 resist_curse;
	s16 ghostModelId;
	s16 normalChangeResouceId;
	s16 guardAngle;
	s16 slashGuardCutRate;
	s16 blowGuardCutRate;
	s16 thrustGuardCutRate;
	s16 lockGazePoint6;
	s16 normalChangeTexChrId;
	u16 dropType;
	u8 knockbackRate;
	u8 knockbackParamId;
	u8 fallDamageDump;
	u8 staminaGuardDef;
	u16 resist_sleep;
	u16 resist_madness;
	s8 sleepGuardResist;
	s8 madnessGuardResist;
	s16 lockGazePoint7;
	u8 mpRecoverBaseVel;
	u8 flickDamageCutRate;
	s8 defaultLodParamId;
	s8 drawType;
	u8 npcType;
	u8 teamType;
	u8 moveType;
	u8 lockDist;
	u16 materialSe_Weak1;
	u16 materialSfx_Weak1;
	u8 partsDamageType;
	u8 vowType;
	s8 guardLevel;
	u8 burnSfxType;
	s8 poisonGuardResist;
	s8 diseaseGuardResist;
	s8 bloodGuardResist;
	s8 curseGuardResist;
	u8 parryAttack;
	u8 parryDefence;
	u8 sfxSize;
	u8 pushOutCamRegionRadius;
	u8 hitStopType;
	u8 ladderEndChkOffsetTop;
	u8 ladderEndChkOffsetLow;
	u8 useRagdollCamHit: 1;
	u8 disableClothRigidHit: 1;
	u8 useUndulationAddAnimFB: 1;
	u8 isWeakA: 1;
	u8 isGhost: 1;
	u8 isNoDamageMotion: 1;
	u8 isUnduration: 1;
	u8 isChangeWanderGhost: 1;
	u8 modelDispMask0: 1;
	u8 modelDispMask1: 1;
	u8 modelDispMask2: 1;
	u8 modelDispMask3: 1;
	u8 modelDispMask4: 1;
	u8 modelDispMask5: 1;
	u8 modelDispMask6: 1;
	u8 modelDispMask7: 1;
	u8 modelDispMask8: 1;
	u8 modelDispMask9: 1;
	u8 modelDispMask10: 1;
	u8 modelDispMask11: 1;
	u8 modelDispMask12: 1;
	u8 modelDispMask13: 1;
	u8 modelDispMask14: 1;
	u8 modelDispMask15: 1;
	u8 isEnableNeckTurn: 1;
	u8 disableRespawn: 1;
	u8 isMoveAnimWait: 1;
	u8 isCrowd: 1;
	u8 isWeakB: 1;
	u8 isWeakC: 1;
	u8 isWeakD: 1;
	u8 doesAlwaysUseSpecialTurn: 1;
	u8 isRideAtkTarget: 1;
	u8 isEnableStepDispInterpolate: 1;
	u8 isStealthTarget: 1;
	u8 disableInitializeDead: 1;
	u8 isHitRumble: 1;
	u8 isSmoothTurn: 1;
	u8 isWeakE: 1;
	u8 isWeakF: 1;
	u8 modelDispMask16: 1;
	u8 modelDispMask17: 1;
	u8 modelDispMask18: 1;
	u8 modelDispMask19: 1;
	u8 modelDispMask20: 1;
	u8 modelDispMask21: 1;
	u8 modelDispMask22: 1;
	u8 modelDispMask23: 1;
	u8 modelDispMask24: 1;
	u8 modelDispMask25: 1;
	u8 modelDispMask26: 1;
	u8 modelDispMask27: 1;
	u8 modelDispMask28: 1;
	u8 modelDispMask29: 1;
	u8 modelDispMask30: 1;
	u8 modelDispMask31: 1;
	f32 itemSearchRadius;
	f32 chrHitHeight;
	f32 chrHitRadius;
	u8 specialTurnType;
	u8 isSoulGetByBoss: 1;
	u8 isBulletOwner_byObject: 1;
	u8 isUseLowHitFootIk: 1;
	u8 isCalculatePvPDamage: 1;
	u8 isHostSyncChr: 1;
	u8 isSkipWeakDamageAnim: 1;
	u8 isKeepHitOnRide: 1;
	u8 isSpCollide: 1;
	u16 def_dark;
	u32 threatLv;
	f32 specialTurnDistanceThreshold;
	s32 autoFootEffectSfxId;
	u16 materialSe1;
	u16 materialSfx1;
	u16 materialSe_Weak2;
	u16 materialSfx_Weak2;
	u16 materialSe2;
	u16 materialSfx2;
	s32 spEffectID8;
	s32 spEffectID9;
	s32 spEffectID10;
	s32 spEffectID11;
	s32 spEffectID12;
	s32 spEffectID13;
	s32 spEffectID14;
	s32 spEffectID15;
	s32 autoFootEffectDecalBaseId1;
	u32 toughness;
	f32 toughnessRecoverCorrection;
	f32 neutralDamageCutRate;
	f32 slashDamageCutRate;
	f32 blowDamageCutRate;
	f32 thrustDamageCutRate;
	f32 magicDamageCutRate;
	f32 fireDamageCutRate;
	f32 thunderDamageCutRate;
	f32 darkDamageCutRate;
	f32 darkGuardCutRate;
	s8 clothUpdateOffset;
	u8 npcPlayerWeightType;
	s16 normalChangeModelId;
	s16 normalChangeAnimChrId;
	u16 paintRenderTargetSize;
	s32 resistCorrectId_disease;
	s32 phantomShaderId;
	s32 multiPlayCorrectionParamId;
	f32 maxAnklePitchAngle;
	u16 resist_freeze;
	s8 freezeGuardResist;
	dummy8 pad1[1];
	s32 lockCameraParamId;
	s32 spEffectID16;
	s32 spEffectID17;
	s32 spEffectID18;
	s32 spEffectID19;
	s32 spEffectID20;
	s32 spEffectID21;
	s32 spEffectID22;
	s32 spEffectID23;
	s32 spEffectID24;
	s32 spEffectID25;
	s32 spEffectID26;
	s32 spEffectID27;
	s32 spEffectID28;
	s32 spEffectID29;
	s32 spEffectID30;
	s32 spEffectID31;
	f32 disableLockOnAng;
	s8 clothOffLodLevel;
	u8 isUseFootIKNormalByUnduration: 1;
	u8 attachHitInitializeDead: 1;
	u8 excludeGroupRewardCheck: 1;
	u8 enableAILockDmyPoly_212: 1;
	u8 enableAILockDmyPoly_213: 1;
	u8 enableAILockDmyPoly_214: 1;
	u8 disableActivateOpen_xb1: 1;
	u8 disableActivateLegacy_xb1: 1;
	s16 estusFlaskRecoveryParamId;
	s32 roleNameId;
	u16 estusFlaskLotPoint;
	u16 hpEstusFlaskLotPoint;
	u16 mpEstusFlaskLotPoint;
	u16 estusFlaskRecovery_failedLotPointAdd;
	u16 hpEstusFlaskRecovery_failedLotPointAdd;
	u16 mpEstusFlaskRecovery_failedLotPointAdd;
	s32 WanderGhostPhantomId;
	f32 hearingHeadSize;
	s16 SoundBankId;
	u8 forwardUndulationLimit;
	u8 sideUndulationLimit;
	f32 deactiveMoveSpeed;
	f32 deactiveMoveDist;
	f32 enableSoundObjDist;
	f32 undulationCorrectGain;
	s16 autoFootEffectDecalBaseId2;
	s16 autoFootEffectDecalBaseId3;
	s16 RetargetReferenceChrId;
	s16 SfxResBankId;
	f32 updateActivatePriolity;
	u8 chrNavimeshFlag_Alive;
	u8 chrNavimeshFlag_Dead;
	dummy8 pad7[1];
	u8 wheelRotType;
	f32 wheelRotRadius;
	f32 retargetMoveRate;
	f32 ladderWarpOffset;
	s32 loadAssetId;
	s32 overlapCameraDmypolyId;
	s32 residentMaterialExParamId00;
	s32 residentMaterialExParamId01;
	s32 residentMaterialExParamId02;
	s32 residentMaterialExParamId03;
	s32 residentMaterialExParamId04;
	s32 sleepCollectorItemLotId_enemy;
	s32 sleepCollectorItemLotId_map;
	f32 footIkErrorOnGain;
	f32 footIkErrorOffGain;
	s16 SoundAddBankId;
	u8 materialVariationValue;
	u8 materialVariationValue_Weak;
	f32 superArmorDurability;
	f32 saRecoveryRate;
	f32 saGuardCutRate;
	s32 resistCorrectId_blood;
	s32 resistCorrectId_curse;
	s32 resistCorrectId_freeze;
	s32 resistCorrectId_sleep;
	s32 resistCorrectId_madness;
	u32 chrDeadTutorialFlagId;
	f32 stepDispInterpolateTime;
	f32 stepDispInterpolateTriggerValue;
	f32 lockScoreOffset;
	dummy8 pad12[8];
};
typedef struct _NPC_PARAM_ST NPC_PARAM_ST;

struct _NPC_THINK_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 logicId;
	s32 battleGoalID;
	u16 searchEye_dist;
	u8 searchEye_angY;
	u8 isNoAvoidHugeEnemy: 1;
	u8 enableWeaponOnOff: 1;
	u8 targetAILockDmyPoly: 1;
	dummy8 pad8: 5;
	s32 spEffectId_RangedAttack;
	f32 searchTargetLv1ForgetTime;
	f32 searchTargetLv2ForgetTime;
	f32 BackHomeLife_OnHitEneWal;
	f32 SightTargetForgetTime;
	s32 idAttackCannotMove;
	f32 ear_dist;
	s32 callHelp_ActionAnimId;
	s32 callHelp_CallActionId;
	u16 eye_dist;
	u8 isGuard_Act;
	dummy8 pad6[1];
	u16 ear_soundcut_dist;
	u16 nose_dist;
	u16 maxBackhomeDist;
	u16 backhomeDist;
	u16 backhomeBattleDist;
	u16 nonBattleActLife;
	u16 BackHome_LookTargetTime;
	u16 BackHome_LookTargetDist;
	f32 SoundTargetForgetTime;
	u16 BattleStartDist;
	u16 callHelp_MyPeerId;
	u16 callHelp_CallPeerId;
	u16 targetSys_DmgEffectRate;
	u8 TeamAttackEffectivity;
	u8 eye_angX;
	u8 eye_angY;
	u8 disableDark;
	u8 caravanRole;
	u8 callHelp_CallValidMinDistTarget;
	u8 callHelp_CallValidRange;
	u8 callHelp_ForgetTimeByArrival;
	u8 callHelp_MinWaitTime;
	u8 callHelp_MaxWaitTime;
	u8 goalAction_ToCaution;
	u8 ear_listenLevel;
	u8 callHelp_ReplyBehaviorType;
	u8 disablePathMove;
	u8 skipArrivalVisibleCheck;
	u8 thinkAttr_doAdmirer;
	u8 enableNaviFlg_Edge: 1;
	u8 enableNaviFlg_LargeSpace: 1;
	u8 enableNaviFlg_Ladder: 1;
	u8 enableNaviFlg_Hole: 1;
	u8 enableNaviFlg_Door: 1;
	u8 enableNaviFlg_InSideWall: 1;
	u8 enableNaviFlg_Lava: 1;
	u8 enableNaviFlg_Edge_Ordinary: 1;
	dummy8 enableNaviFlg_reserve1[3];
	s32 searchThreshold_Lv0toLv1;
	s32 searchThreshold_Lv1toLv2;
	f32 platoonReplyTime;
	f32 platoonReplyAddRandomTime;
	u8 searchEye_angX;
	u8 isUpdateBattleSight;
	u16 battleEye_updateDist;
	u8 battleEye_updateAngX;
	u8 battleEye_updateAngY;
	dummy8 pad4[16];
	u16 eye_BackOffsetDist;
	u16 eye_BeginDist;
	u8 actTypeOnFailedPath;
	u8 goalAction_ToCautionImportant;
	s32 shiftAnimeId_RangedAttack;
	u8 actTypeOnNonBtlFailedPath;
	u8 isBuddyAI;
	u8 goalAction_ToSearchLv1;
	u8 goalAction_ToSearchLv2;
	u8 enableJumpMove;
	u8 disableLocalSteering;
	u8 goalAction_ToDisappear;
	u8 changeStateAction_ToNormal;
	f32 MemoryTargetForgetTime;
	s32 rangedAttackId;
	u8 useFall_onNormalCaution;
	u8 useFall_onSearchBattle;
	u8 enableJumpMove_onBattle;
	u8 backToHomeStuckAct;
	dummy8 pad3[4];
	s32 soundBehaviorId01;
	s32 soundBehaviorId02;
	s32 soundBehaviorId03;
	s32 soundBehaviorId04;
	s32 soundBehaviorId05;
	s32 soundBehaviorId06;
	s32 soundBehaviorId07;
	s32 soundBehaviorId08;
	s32 weaponOffSpecialEffectId;
	s32 weaponOnSpecialEffectId;
	s32 weaponOffAnimId;
	s32 weaponOnAnimId;
	s32 surpriseAnimId;
};
typedef struct _NPC_THINK_PARAM_ST NPC_THINK_PARAM_ST;

struct _OBJ_ACT_PARAM_ST {
	s32 actionEnableMsgId;
	s32 actionFailedMsgId;
	u32 spQualifiedPassEventFlag;
	u32 playerAnimId;
	u32 chrAnimId;
	u16 validDist;
	u16 spQualifiedId;
	u16 spQualifiedId2;
	u8 objDummyId;
	u8 isEventKickSync;
	u32 objAnimId;
	u8 validPlayerAngle;
	u8 spQualifiedType;
	u8 spQualifiedType2;
	u8 validObjAngle;
	u8 chrSorbType;
	u8 eventKickTiming;
	dummy8 pad1[2];
	s32 actionButtonParamId;
	f32 enableTreasureDelaySec;
	s32 preActionSfxDmypolyId;
	s32 preActionSfxId;
	dummy8 pad2[40];
};
typedef struct _OBJ_ACT_PARAM_ST OBJ_ACT_PARAM_ST;

struct _OBJECT_MATERIAL_SFX_PARAM_ST {
	u32 sfxId_00;
	u32 sfxId_01;
	u32 sfxId_02;
	u32 sfxId_03;
	u32 sfxId_04;
	u32 sfxId_05;
	u32 sfxId_06;
	u32 sfxId_07;
	u32 sfxId_08;
	u32 sfxId_09;
	u32 sfxId_10;
	u32 sfxId_11;
	u32 sfxId_12;
	u32 sfxId_13;
	u32 sfxId_14;
	u32 sfxId_15;
	u32 sfxId_16;
	u32 sfxId_17;
	u32 sfxId_18;
	u32 sfxId_19;
	u32 sfxId_20;
	u32 sfxId_21;
	u32 sfxId_22;
	u32 sfxId_23;
	u32 sfxId_24;
	u32 sfxId_25;
	u32 sfxId_26;
	u32 sfxId_27;
	u32 sfxId_28;
	u32 sfxId_29;
	u32 sfxId_30;
	u32 sfxId_31;
};
typedef struct _OBJECT_MATERIAL_SFX_PARAM_ST OBJECT_MATERIAL_SFX_PARAM_ST;

struct _OBJECT_PARAM_ST {
	s16 hp;
	u16 defense;
	s16 extRefTexId;
	s16 materialId;
	u8 animBreakIdMax;
	u8 isCamHit: 1;
	u8 isBreakByPlayerCollide: 1;
	u8 isAnimBreak: 1;
	u8 isPenetrationBulletHit: 1;
	u8 isChrHit: 1;
	u8 isAttackBacklash: 1;
	u8 isDisableBreakForFirstAppear: 1;
	u8 isLadder: 1;
	u8 isAnimPauseOnRemoPlay: 1;
	u8 isDamageNoHit: 1;
	u8 isMoveObj: 1;
	u8 isRopeBridge: 1;
	u8 isAddRigidImpulse_ByDamage: 1;
	u8 isBreak_ByChrRide: 1;
	u8 isBurn: 1;
	u8 isBreakByEnemyCollide: 1;
	s8 defaultLodParamId;
	s32 breakSfxId;
	s32 breakSfxCpId;
	s32 breakBulletBehaviorId;
	s32 breakBulletCpId;
	u8 breakFallHeight;
	u8 windEffectType_0;
	u8 windEffectType_1;
	u8 camAvoidType;
	f32 windEffectRate_0;
	f32 windEffectRate_1;
	f32 breakStopTime;
	f32 burnTime;
	f32 burnBraekRate;
	s32 burnSfxId;
	s32 burnSfxId_1;
	s32 burnSfxId_2;
	s32 burnSfxId_3;
	s32 burnBulletBehaviorId;
	s32 burnBulletBehaviorId_1;
	s32 burnBulletBehaviorId_2;
	s32 burnBulletBehaviorId_3;
	u16 burnBulletInterval;
	u8 navimeshFlag;
	u8 collisionType;
	f32 burnBulletDelayTime;
	f32 burnSfxDelayTimeMin;
	f32 burnSfxDelayTimeMin_1;
	f32 burnSfxDelayTimeMin_2;
	f32 burnSfxDelayTimeMin_3;
	f32 burnSfxDelayTimeMax;
	f32 burnSfxDelayTimeMax_1;
	f32 burnSfxDelayTimeMax_2;
	f32 burnSfxDelayTimeMax_3;
	s32 BreakAiSoundID;
	f32 FragmentInvisibleWaitTime;
	f32 FragmentInvisibleTime;
	dummy8 pad_3[16];
	f32 RigidPenetrationScale_Soft;
	f32 RigidPenetrationScale_Normal;
	f32 RigidPenetrationScale_Hard;
	s32 LandTouchSfxId;
	u8 isDamageCover: 1;
	dummy8 pad_4[1];
	u16 paintDecalTargetTextureSize;
	f32 lifeTime_forDC;
	f32 clothUpdateDist;
	s32 contactSeId;
	s32 breakLandingSfxId;
	s32 waypointDummyPolyId_0;
	s32 waypointParamId_0;
	s32 soundBankId;
	s32 refDrawParamId;
	f32 autoCreateDynamicOffsetHeight;
	s32 reserved0;
	s32 soundBreakSEId;
	dummy8 pad_5[40];
};
typedef struct _OBJECT_PARAM_ST OBJECT_PARAM_ST;

struct _PARTS_DRAW_PARAM_ST {
	f32 lv01_BorderDist;
	f32 lv01_PlayDist;
	f32 lv12_BorderDist;
	f32 lv12_PlayDist;
	f32 lv23_BorderDist;
	f32 lv23_PlayDist;
	f32 lv34_BorderDist;
	f32 lv34_PlayDist;
	f32 lv45_BorderDist;
	f32 lv45_PlayDist;
	f32 tex_lv01_BorderDist;
	f32 tex_lv01_PlayDist;
	u32 enableCrossFade: 1;
	f32 drawDist;
	f32 drawFadeRange;
	f32 shadowDrawDist;
	f32 shadowFadeRange;
	f32 motionBlur_BorderDist;
	s8 isPointLightShadowSrc;
	s8 isDirLightShadowSrc;
	s8 isShadowDst;
	s8 isShadowOnly;
	s8 drawByReflectCam;
	s8 drawOnlyReflectCam;
	s8 IncludeLodMapLv;
	u8 isNoFarClipDraw;
	u8 lodType;
	s8 shadowDrawLodOffset;
	u8 isTraceCameraXZ;
	u8 isSkydomeDrawPhase;
	f32 DistantViewModel_BorderDist;
	f32 DistantViewModel_PlayDist;
	f32 LimtedActivate_BorderDist_forGrid;
	f32 LimtedActivate_PlayDist_forGrid;
	f32 zSortOffsetForNoFarClipDraw;
	f32 shadowDrawAlphaTestDist;
	u8 fowardDrawEnvmapBlendType;
	u8 LBDrawDistScaleParamID;
	dummy8 resereve[34];
};
typedef struct _PARTS_DRAW_PARAM_ST PARTS_DRAW_PARAM_ST;

struct _PERFORMANCE_CHECK_PARAM {
	u8 workTag;
	u8 categoryTag;
	u8 compareType;
	dummy8 dummy1[1];
	f32 compareValue;
	dummy8 dummy2[8];
	fixstrW userTag[16];
};
typedef struct _PERFORMANCE_CHECK_PARAM PERFORMANCE_CHECK_PARAM;

struct _PHANTOM_PARAM_ST {
	f32 edgeColorA;
	f32 frontColorA;
	f32 diffMulColorA;
	f32 specMulColorA;
	f32 lightColorA;
	u8 edgeColorR;
	u8 edgeColorG;
	u8 edgeColorB;
	u8 frontColorR;
	u8 frontColorG;
	u8 frontColorB;
	u8 diffMulColorR;
	u8 diffMulColorG;
	u8 diffMulColorB;
	u8 specMulColorR;
	u8 specMulColorG;
	u8 specMulColorB;
	u8 lightColorR;
	u8 lightColorG;
	u8 lightColorB;
	dummy8 reserve[1];
	f32 alpha;
	f32 blendRate;
	u8 blendType;
	u8 isEdgeSubtract;
	u8 isFrontSubtract;
	u8 isNo2Pass;
	f32 edgePower;
	f32 glowScale;
};
typedef struct _PHANTOM_PARAM_ST PHANTOM_PARAM_ST;

struct _PLAYER_COMMON_PARAM_ST {
	s32 playerFootEffect_bySFX;
	f32 snipeModeDrawAlpha_FadeTime;
	f32 toughnessRecoverCorrection;
	u8 baseMagicSlotSize;
	u8 baseAccSlotNum;
	dummy8 reserved02[2];
	s32 animeID_DropItemPick;
	f32 resistRecoverPoint_Sleep_Player;
	s32 flareOverrideHomingAngle;
	f32 flareOverrideHomingStopRange;
	s32 animeID_SleepCollectorItemPick;
	u32 unlockEventFlagBaseId_forWepAttr;
	s32 systemEnchant_BigRune;
	f32 lowStatus_AtkPowDown;
	f32 lowStatus_ConsumeStaminaRate;
	s16 lowStatus_AtkGuardBreak;
	s16 guardStatusCorrect_MaxStatusVal;
	u16 unlockEventFlagStepNum_forWepAttr;
	u16 retributionMagic_damageCountNum;
	u16 retributionMagic_damageCountRemainTime;
	u16 retributionMagic_burstDmypolyId;
	s32 retributionMagic_burstMagicParamId;
	f32 chrAimCam_rideOffsetHeight;
	dummy8 reserved23[4];
	s32 arrowCaseWepBindDmypolyId;
	s32 boltPouchWepBindDmypolyId;
	f32 estusFlaskAllocateRate;
	dummy8 reserved38[2];
	u8 kickAcceptanceDeg;
	u8 npcPlayerAnalogWeightRate_Light;
	u8 npcPlayerAnalogWeightRate_Normal;
	u8 npcPlayerAnalogWeightRate_Heavy;
	u8 npcPlayerAnalogWeightRate_WeightOver;
	u8 npcPlayerAnalogWeightRate_SuperLight;
	dummy8 reserved45[4];
	s32 clearCountCorrectBaseSpEffectId;
	s32 arrowBoltModelIdOffset;
	s8 arrowBoltRemainingNumModelMaskThreshold1;
	s8 arrowBoltRemainingNumModelMaskThreshold2;
	dummy8 reserved27[2];
	f32 resistRecoverPoint_Poision_Player;
	f32 resistRecoverPoint_Desease_Player;
	f32 resistRecoverPoint_Blood_Player;
	f32 resistRecoverPoint_Curse_Player;
	f32 resistRecoverPoint_Freeze_Player;
	f32 resistRecoverPoint_Poision_Enemy;
	f32 resistRecoverPoint_Desease_Enemy;
	f32 resistRecoverPoint_Blood_Enemy;
	f32 resistRecoverPoint_Curse_Enemy;
	f32 resistRecoverPoint_Freeze_Enemy;
	f32 requestTimeLeftBothHand;
	f32 resistRecoverPoint_Madness_Player;
	s32 animeID_MaterialItemPick;
	f32 hpEstusFlaskAllocateRateForYellowMonk;
	s32 hpEstusFlaskAllocateOffsetForYellowMonk;
	f32 mpEstusFlaskAllocateRateForYellowMonk;
	s32 mpEstusFlaskAllocateOffsetForYellowMonk;
	f32 resistRecoverPoint_Sleep_Enemy;
	f32 resistRecoverPoint_Madness_Enemy;
	s32 resistCurseItemId;
	u8 resistCurseItemMaxNum;
	dummy8 reserved_123[3];
	s32 resistCurseItemSpEffectBaseId;
	s32 resistCurseItemLotParamId_map;
	dummy8 reserved41[52];
};
typedef struct _PLAYER_COMMON_PARAM_ST PLAYER_COMMON_PARAM_ST;

struct _PLAY_REGION_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 matchAreaId;
	u32 multiPlayStartLimitEventFlagId;
	f32 otherDisableDistance;
	u32 pcPositionSaveLimitEventFlagId;
	u32 bossAreaId;
	s16 cultNpcWhiteGhostEntityId_byFree;
	u8 bMapGuradianRegion;
	u8 bYellowCostumeRegion: 1;
	u8 multiPlayStartLimitEventFlagId_targetFlagState: 1;
	u8 breakInLimitEventFlagId_1_targetFlagState: 1;
	u8 whiteSignLimitEventFlagId_1_targetFlagState: 1;
	u8 redSignLimitEventFlagId_1_targetFlagState: 1;
	u8 breakInLimitEventFlagId_2_targetFlagState: 1;
	u8 breakInLimitEventFlagId_3_targetFlagState: 1;
	u8 whiteSignLimitEventFlagId_2_targetFlagState: 1;
	u32 warpItemUsePermitBonfireId_1;
	u32 warpItemUsePermitBonfireId_2;
	u32 warpItemUsePermitBonfireId_3;
	u32 warpItemUsePermitBonfireId_4;
	u32 warpItemUsePermitBonfireId_5;
	u32 warpItemProhibitionEventFlagId_1;
	u32 warpItemProhibitionEventFlagId_2;
	u32 warpItemProhibitionEventFlagId_3;
	u32 warpItemProhibitionEventFlagId_4;
	u32 warpItemProhibitionEventFlagId_5;
	u8 enableBloodstain: 1;
	u8 enableBloodMessage: 1;
	u8 enableGhost: 1;
	u8 dispMask00: 1;
	u8 dispMask01: 1;
	u8 whiteSignLimitEventFlagId_3_targetFlagState: 1;
	u8 redSignLimitEventFlagId_2_targetFlagState: 1;
	u8 redSignLimitEventFlagId_3_targetFlagState: 1;
	u8 isAutoIntrudePoint: 1;
	dummy8 pad1: 7;
	dummy8 pad2[2];
	u32 multiPlayHASHostLimitEventFlagId;
	f32 otherMaxDistance;
	u32 signPuddleOpenEventFlagId;
	u8 areaNo;
	u8 gridXNo;
	u8 gridZNo;
	dummy8 pad4[1];
	f32 posX;
	f32 posY;
	f32 posZ;
	u32 breakInLimitEventFlagId_1;
	u32 whiteSignLimitEventFlagId_1;
	u32 matchAreaSignCreateLimitEventFlagId;
	u32 signAimId_1;
	u32 signAimId_2;
	u32 signAimId_3;
	u32 signAimId_4;
	u32 signAimId_5;
	u32 signAimId_6;
	u32 signAimId_7;
	u32 signAimId_8;
	u32 redSignLimitEventFlagId_1;
	u32 breakInLimitEventFlagId_2;
	u32 breakInLimitEventFlagId_3;
	u32 whiteSignLimitEventFlagId_2;
	u32 whiteSignLimitEventFlagId_3;
	u32 redSignLimitEventFlagId_2;
	u32 redSignLimitEventFlagId_3;
	u32 bossId_1;
	u32 bossId_2;
	u32 bossId_3;
	u32 bossId_4;
	u32 bossId_5;
	u32 bossId_6;
	u32 bossId_7;
	u32 bossId_8;
	u32 bossId_9;
	u32 bossId_10;
	u32 bossId_11;
	u32 bossId_12;
	u32 bossId_13;
	u32 bossId_14;
	u32 bossId_15;
	u32 bossId_16;
	u32 mapMenuUnlockEventId;
	dummy8 pad5[32];
};
typedef struct _PLAY_REGION_PARAM_ST PLAY_REGION_PARAM_ST;

struct _POSTURE_CONTROL_PARAM_GENDER_ST {
	s16 a000_rightElbowIO;
	s16 a000_leftElbowIO;
	s16 a000_bothLegsIO;
	s16 a002_rightElbowIO;
	s16 a002_leftElbowIO;
	s16 a002_bothLegsIO;
	s16 a003_rightElbowIO;
	s16 a003_leftElbowIO;
	s16 a003_bothLegsIO;
	s16 a010_rightElbowIO;
	s16 a010_leftElbowIO;
	s16 a010_bothLegsIO;
	s16 a012_rightElbowIO;
	s16 a012_leftElbowIO;
	s16 a012_bothLegsIO;
	s16 a013_rightElbowIO;
	s16 a013_leftElbowIO;
	s16 a013_bothLegsIO;
	s16 a014_rightElbowIO;
	s16 a014_leftElbowIO;
	s16 a014_bothLegsIO;
	s16 a015_rightElbowIO;
	s16 a015_leftElbowIO;
	s16 a015_bothLegsIO;
	s16 a016_rightElbowIO;
	s16 a016_leftElbowIO;
	s16 a016_bothLegsIO;
	dummy8 pad[10];
};
typedef struct _POSTURE_CONTROL_PARAM_GENDER_ST POSTURE_CONTROL_PARAM_GENDER_ST;

struct _POSTURE_CONTROL_PARAM_PRO_ST {
	s16 a000_rightArmIO;
	s16 a000_rightArmFB;
	s16 a000_leftArmIO;
	s16 a000_leftArmFB;
	s16 a002_rightArmIO;
	s16 a002_rightArmFB;
	s16 a002_leftArmIO;
	s16 a002_leftArmFB;
	s16 a003_rightArmIO;
	s16 a003_rightArmFB;
	s16 a003_leftArmIO;
	s16 a003_leftArmFB;
	s16 a010_rightArmIO;
	s16 a010_rightArmFB;
	s16 a010_leftArmIO;
	s16 a010_leftArmFB;
	s16 a012_rightArmIO;
	s16 a012_rightArmFB;
	s16 a012_leftArmIO;
	s16 a012_leftArmFB;
	s16 a013_rightArmIO;
	s16 a013_rightArmFB;
	s16 a013_leftArmIO;
	s16 a013_leftArmFB;
	s16 a014_rightArmIO;
	s16 a014_rightArmFB;
	s16 a014_leftArmIO;
	s16 a014_leftArmFB;
	s16 a015_rightArmIO;
	s16 a015_rightArmFB;
	s16 a015_leftArmIO;
	s16 a015_leftArmFB;
	s16 a016_rightArmIO;
	s16 a016_rightArmFB;
	s16 a016_leftArmIO;
	s16 a016_leftArmFB;
	dummy8 pad[8];
};
typedef struct _POSTURE_CONTROL_PARAM_PRO_ST POSTURE_CONTROL_PARAM_PRO_ST;

struct _POSTURE_CONTROL_PARAM_WEP_LEFT_ST {
	s16 a000_leftArmFB;
	s16 a000_leftWristFB;
	s16 a000_leftWristIO;
	s16 a002_leftArmFB;
	s16 a002_leftWristFB;
	s16 a002_leftWristIO;
	s16 a003_leftArmFB;
	s16 a003_leftWristFB;
	s16 a003_leftWristIO;
	dummy8 pad[14];
};
typedef struct _POSTURE_CONTROL_PARAM_WEP_LEFT_ST POSTURE_CONTROL_PARAM_WEP_LEFT_ST;

struct _POSTURE_CONTROL_PARAM_WEP_RIGHT_ST {
	s16 a000_rightArmFB;
	s16 a000_rightWristFB;
	s16 a000_rightWristIO;
	s16 a000_leftArmFB;
	s16 a000_leftWristFB;
	s16 a000_leftWristIO;
	s16 a002_rightArmFB;
	s16 a002_rightWristFB;
	s16 a002_rightWristIO;
	s16 a002_leftArmFB;
	s16 a002_leftWristFB;
	s16 a002_leftWristIO;
	s16 a003_rightArmFB;
	s16 a003_rightWristFB;
	s16 a003_rightWristIO;
	s16 a003_leftArmFB;
	s16 a003_leftWristFB;
	s16 a003_leftWristIO;
	s16 a010_rightArmFB;
	s16 a010_rightWristFB;
	s16 a010_rightWristIO;
	s16 a010_leftArmFB;
	s16 a010_leftWristFB;
	s16 a010_leftWristIO;
	s16 a012_rightArmFB;
	s16 a012_rightWristFB;
	s16 a012_rightWristIO;
	s16 a012_leftArmFB;
	s16 a012_leftWristFB;
	s16 a012_leftWristIO;
	s16 a013_rightArmFB;
	s16 a013_rightWristFB;
	s16 a013_rightWristIO;
	s16 a013_leftArmFB;
	s16 a013_leftWristFB;
	s16 a013_leftWristIO;
	s16 a014_rightArmFB;
	s16 a014_rightWristFB;
	s16 a014_rightWristIO;
	s16 a014_leftArmFB;
	s16 a014_leftWristFB;
	s16 a014_leftWristIO;
	s16 a015_rightArmFB;
	s16 a015_rightWristFB;
	s16 a015_rightWristIO;
	s16 a015_leftArmFB;
	s16 a015_leftWristFB;
	s16 a015_leftWristIO;
	s16 a016_rightArmFB;
	s16 a016_rightWristFB;
	s16 a016_rightWristIO;
	s16 a016_leftArmFB;
	s16 a016_leftWristFB;
	s16 a016_leftWristIO;
	dummy8 pad[4];
};
typedef struct _POSTURE_CONTROL_PARAM_WEP_RIGHT_ST POSTURE_CONTROL_PARAM_WEP_RIGHT_ST;

struct _RANDOM_APPEAR_EDIT_PARAM_ST {
	u32 appearNum;
	s32 paramId1;
	u32 rate1;
	s32 paramId2;
	u32 rate2;
	s32 paramId3;
	u32 rate3;
	s32 paramId4;
	u32 rate4;
	s32 paramId5;
	u32 rate5;
	s32 paramId6;
	u32 rate6;
	s32 paramId7;
	u32 rate7;
	s32 paramId8;
	u32 rate8;
	s32 paramId9;
	u32 rate9;
	s32 paramId10;
	u32 rate10;
	s32 paramId11;
	u32 rate11;
	s32 paramId12;
	u32 rate12;
	s32 paramId13;
	u32 rate13;
	s32 paramId14;
	u32 rate14;
	s32 paramId15;
	u32 rate15;
	s32 paramId16;
	u32 rate16;
	s32 paramId17;
	u32 rate17;
	s32 paramId18;
	u32 rate18;
	s32 paramId19;
	u32 rate19;
	s32 paramId20;
	u32 rate20;
	s32 paramId21;
	u32 rate21;
	s32 paramId22;
	u32 rate22;
	s32 paramId23;
	u32 rate23;
	s32 paramId24;
	u32 rate24;
};
typedef struct _RANDOM_APPEAR_EDIT_PARAM_ST RANDOM_APPEAR_EDIT_PARAM_ST;

struct _RANDOM_APPEAR_PARAM_ST {
	u8 slot0: 1;
	u8 slot1: 1;
	u8 slot2: 1;
	u8 slot3: 1;
	u8 slot4: 1;
	u8 slot5: 1;
	u8 slot6: 1;
	u8 slot7: 1;
	u8 slot8: 1;
	u8 slot9: 1;
	u8 slot10: 1;
	u8 slot11: 1;
	u8 slot12: 1;
	u8 slot13: 1;
	u8 slot14: 1;
	u8 slot15: 1;
	u8 slot16: 1;
	u8 slot17: 1;
	u8 slot18: 1;
	u8 slot19: 1;
	u8 slot20: 1;
	u8 slot21: 1;
	u8 slot22: 1;
	u8 slot23: 1;
	u8 slot24: 1;
	u8 slot25: 1;
	u8 slot26: 1;
	u8 slot27: 1;
	u8 slot28: 1;
	u8 slot29: 1;
	u8 slot30: 1;
	u8 slot31: 1;
	u8 slot32: 1;
	u8 slot33: 1;
	u8 slot34: 1;
	u8 slot35: 1;
	u8 slot36: 1;
	u8 slot37: 1;
	u8 slot38: 1;
	u8 slot39: 1;
	u8 slot40: 1;
	u8 slot41: 1;
	u8 slot42: 1;
	u8 slot43: 1;
	u8 slot44: 1;
	u8 slot45: 1;
	u8 slot46: 1;
	u8 slot47: 1;
	u8 slot48: 1;
	u8 slot49: 1;
	u8 slot50: 1;
	u8 slot51: 1;
	u8 slot52: 1;
	u8 slot53: 1;
	u8 slot54: 1;
	u8 slot55: 1;
	u8 slot56: 1;
	u8 slot57: 1;
	u8 slot58: 1;
	u8 slot59: 1;
	u8 slot60: 1;
	u8 slot61: 1;
	u8 slot62: 1;
	u8 slot63: 1;
	u8 slot64: 1;
	u8 slot65: 1;
	u8 slot66: 1;
	u8 slot67: 1;
	u8 slot68: 1;
	u8 slot69: 1;
	u8 slot70: 1;
	u8 slot71: 1;
	u8 slot72: 1;
	u8 slot73: 1;
	u8 slot74: 1;
	u8 slot75: 1;
	u8 slot76: 1;
	u8 slot77: 1;
	u8 slot78: 1;
	u8 slot79: 1;
	u8 slot80: 1;
	u8 slot81: 1;
	u8 slot82: 1;
	u8 slot83: 1;
	u8 slot84: 1;
	u8 slot85: 1;
	u8 slot86: 1;
	u8 slot87: 1;
	u8 slot88: 1;
	u8 slot89: 1;
	u8 slot90: 1;
	u8 slot91: 1;
	u8 slot92: 1;
	u8 slot93: 1;
	u8 slot94: 1;
	u8 slot95: 1;
	u8 slot96: 1;
	u8 slot97: 1;
	u8 slot98: 1;
	u8 slot99: 1;
	dummy8 pad: 4;
};
typedef struct _RANDOM_APPEAR_PARAM_ST RANDOM_APPEAR_PARAM_ST;

struct _REINFORCE_PARAM_PROTECTOR_ST {
	f32 physicsDefRate;
	f32 magicDefRate;
	f32 fireDefRate;
	f32 thunderDefRate;
	f32 slashDefRate;
	f32 blowDefRate;
	f32 thrustDefRate;
	f32 resistPoisonRate;
	f32 resistDiseaseRate;
	f32 resistBloodRate;
	f32 resistCurseRate;
	u8 residentSpEffectId1;
	u8 residentSpEffectId2;
	u8 residentSpEffectId3;
	u8 materialSetId;
	f32 darkDefRate;
	f32 resistFreezeRate;
	f32 resistSleepRate;
	f32 resistMadnessRate;
};
typedef struct _REINFORCE_PARAM_PROTECTOR_ST REINFORCE_PARAM_PROTECTOR_ST;

struct _REINFORCE_PARAM_WEAPON_ST {
	f32 physicsAtkRate;
	f32 magicAtkRate;
	f32 fireAtkRate;
	f32 thunderAtkRate;
	f32 staminaAtkRate;
	f32 saWeaponAtkRate;
	f32 saDurabilityRate;
	f32 correctStrengthRate;
	f32 correctAgilityRate;
	f32 correctMagicRate;
	f32 correctFaithRate;
	f32 physicsGuardCutRate;
	f32 magicGuardCutRate;
	f32 fireGuardCutRate;
	f32 thunderGuardCutRate;
	f32 poisonGuardResistRate;
	f32 diseaseGuardResistRate;
	f32 bloodGuardResistRate;
	f32 curseGuardResistRate;
	f32 staminaGuardDefRate;
	u8 spEffectId1;
	u8 spEffectId2;
	u8 spEffectId3;
	u8 residentSpEffectId1;
	u8 residentSpEffectId2;
	u8 residentSpEffectId3;
	u8 materialSetId;
	u8 maxReinforceLevel;
	f32 darkAtkRate;
	f32 darkGuardCutRate;
	f32 correctLuckRate;
	f32 freezeGuardDefRate;
	f32 reinforcePriceRate;
	f32 baseChangePriceRate;
	s8 enableGemRank;
	dummy8 pad2[3];
	f32 sleepGuardDefRate;
	f32 madnessGuardDefRate;
	f32 baseAtkRate;
};
typedef struct _REINFORCE_PARAM_WEAPON_ST REINFORCE_PARAM_WEAPON_ST;

struct _RESIST_CORRECT_PARAM_ST {
	f32 addPoint1;
	f32 addPoint2;
	f32 addPoint3;
	f32 addPoint4;
	f32 addPoint5;
	f32 addRate1;
	f32 addRate2;
	f32 addRate3;
	f32 addRate4;
	f32 addRate5;
};
typedef struct _RESIST_CORRECT_PARAM_ST RESIST_CORRECT_PARAM_ST;

struct _REVERB_AUX_SEND_BUS_PARAM_ST {
	fixstr ReverbAuxSendBusName[32];
};
typedef struct _REVERB_AUX_SEND_BUS_PARAM_ST REVERB_AUX_SEND_BUS_PARAM_ST;

struct _RIDE_PARAM_ST {
	u32 atkChrId;
	u32 defChrId;
	s32 rideCamParamId;
	u32 atkChrAnimId;
	u32 defChrAnimId;
	s32 defAdjustDmyId;
	s32 defCheckDmyId;
	f32 diffAngMyToDef;
	f32 dist;
	f32 upperYRange;
	f32 lowerYRange;
	f32 diffAngMin;
	f32 diffAngMax;
	dummy8 pad[12];
};
typedef struct _RIDE_PARAM_ST RIDE_PARAM_ST;

struct _ROLE_PARAM_ST {
	u8 teamType;
	dummy8 pad10[3];
	s32 phantomParamId;
	s32 spEffectID0;
	s32 spEffectID1;
	s32 spEffectID2;
	s32 spEffectID3;
	s32 spEffectID4;
	s32 spEffectID5;
	s32 spEffectID6;
	s32 spEffectID7;
	s32 spEffectID8;
	s32 spEffectID9;
	s32 sosSignSfxId;
	s32 mySosSignSfxId;
	s32 summonStartAnimId;
	s32 itemlotParamId;
	u8 voiceChatGroup;
	u8 roleNameColor;
	dummy8 pad1[2];
	s32 roleNameId;
	u32 threatLv;
	s32 phantomParamId_vowRank1;
	s32 phantomParamId_vowRank2;
	s32 phantomParamId_vowRank3;
	s32 spEffectID_vowRank0;
	s32 spEffectID_vowRank1;
	s32 spEffectID_vowRank2;
	s32 spEffectID_vowRank3;
	s32 signPhantomId;
	s32 nonPlayerSummonStartAnimId;
	dummy8 pad2[16];
};
typedef struct _ROLE_PARAM_ST ROLE_PARAM_ST;

struct _ROLLING_OBJ_LOT_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 AssetId_0;
	s32 AssetId_1;
	s32 AssetId_2;
	s32 AssetId_3;
	s32 AssetId_4;
	s32 AssetId_5;
	s32 AssetId_6;
	s32 AssetId_7;
	u8 CreateWeight_0;
	u8 CreateWeight_1;
	u8 CreateWeight_2;
	u8 CreateWeight_3;
	u8 CreateWeight_4;
	u8 CreateWeight_5;
	u8 CreateWeight_6;
	u8 CreateWeight_7;
	dummy8 Reserve_0[20];
};
typedef struct _ROLLING_OBJ_LOT_PARAM_ST ROLLING_OBJ_LOT_PARAM_ST;

struct _RUNTIME_BONE_CONTROL_PARAM_ST {
	u32 chrId;
	u8 ctrlType;
	dummy8 pad[11];
	fixstr applyBone[32];
	fixstr targetBone1[32];
	fixstr targetBone2[32];
};
typedef struct _RUNTIME_BONE_CONTROL_PARAM_ST RUNTIME_BONE_CONTROL_PARAM_ST;

struct _SE_ACTIVATION_RANGE_PARAM_ST {
	f32 activateRange;
};
typedef struct _SE_ACTIVATION_RANGE_PARAM_ST SE_ACTIVATION_RANGE_PARAM_ST;

struct _SE_MATERIAL_CONVERT_PARAM_ST {
	u8 seMaterialId;
	dummy8 pad[3];
};
typedef struct _SE_MATERIAL_CONVERT_PARAM_ST SE_MATERIAL_CONVERT_PARAM_ST;

struct _SFX_BLOCK_RES_SHARE_PARAM {
	u32 shareBlockRsMapUidVal;
};
typedef struct _SFX_BLOCK_RES_SHARE_PARAM SFX_BLOCK_RES_SHARE_PARAM;

struct _SHOP_LINEUP_PARAM {
	s32 equipId;
	s32 value;
	s32 mtrlId;
	u32 eventFlag_forStock;
	u32 eventFlag_forRelease;
	s16 sellQuantity;
	dummy8 pad3[1];
	u8 equipType;
	u8 costType;
	dummy8 pad1[1];
	u16 setNum;
	s32 value_Add;
	f32 value_Magnification;
	s32 iconId;
	s32 nameMsgId;
	s32 menuTitleMsgId;
	s16 menuIconId;
	dummy8 pad2[2];
};
typedef struct _SHOP_LINEUP_PARAM SHOP_LINEUP_PARAM;

struct _SIGN_PUDDLE_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 matchAreaId;
	dummy8 pad1[24];
};
typedef struct _SIGN_PUDDLE_PARAM_ST SIGN_PUDDLE_PARAM_ST;

struct _SOUND_ASSET_SOUND_OBJ_ENABLE_DIST_PARAM_ST {
	f32 SoundObjEnableDist;
};
typedef struct _SOUND_ASSET_SOUND_OBJ_ENABLE_DIST_PARAM_ST SOUND_ASSET_SOUND_OBJ_ENABLE_DIST_PARAM_ST;

struct _SOUND_AUTO_ENV_SOUND_GROUP_PARAM_ST {
	s32 SoundNo;
	f32 ExpandRange;
	f32 FollowSpeed;
	f32 FollowRate;
};
typedef struct _SOUND_AUTO_ENV_SOUND_GROUP_PARAM_ST SOUND_AUTO_ENV_SOUND_GROUP_PARAM_ST;

struct _SOUND_AUTO_REVERB_EVALUATION_DIST_PARAM_ST {
	f32 NoHitDist;
	u8 isCollectNoHitPoint;
	u8 isCollectOutdoorPoint;
	u8 isCollectFloorPoint;
	u8 distValCalcType;
	f32 enableLifeTime;
	u32 maxDistRecordNum;
	u32 ignoreDistNumForMax;
};
typedef struct _SOUND_AUTO_REVERB_EVALUATION_DIST_PARAM_ST SOUND_AUTO_REVERB_EVALUATION_DIST_PARAM_ST;

struct _SOUND_AUTO_REVERB_SELECT_PARAM_ST {
	u32 reverbType;
	s32 AreaNo;
	s8 IndoorOutdoor;
	s8 useDistNoA;
	s8 useDistNoB;
	dummy8 pad0[1];
	f32 DistMinA;
	f32 DistMaxA;
	f32 DistMinB;
	f32 DistMaxB;
	s32 NoHitNumMin;
};
typedef struct _SOUND_AUTO_REVERB_SELECT_PARAM_ST SOUND_AUTO_REVERB_SELECT_PARAM_ST;

struct _SOUND_CHR_PHYSICS_SE_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 ContactLandSeId;
	s32 ContactLandAddSeId;
	s32 ContactLandPlayNum;
	u8 IsEnablePlayCountPerRigid;
	dummy8 pad[3];
	f32 ContactLandMinImpuse;
	f32 ContactLandMinSpeed;
	s32 ContactPlayerSeId;
	f32 ContactPlayerMinImpuse;
	f32 ContactPlayerMinSpeed;
	s8 ContactCheckRigidIdx0;
	s8 ContactCheckRigidIdx1;
	s8 ContactCheckRigidIdx2;
	s8 ContactCheckRigidIdx3;
	s8 ContactCheckRigidIdx4;
	s8 ContactCheckRigidIdx5;
	s8 ContactCheckRigidIdx6;
	s8 ContactCheckRigidIdx7;
	s8 ContactCheckRigidIdx8;
	s8 ContactCheckRigidIdx9;
	s8 ContactCheckRigidIdx10;
	s8 ContactCheckRigidIdx11;
	s8 ContactCheckRigidIdx12;
	s8 ContactCheckRigidIdx13;
	s8 ContactCheckRigidIdx14;
	s8 ContactCheckRigidIdx15;
};
typedef struct _SOUND_CHR_PHYSICS_SE_PARAM_ST SOUND_CHR_PHYSICS_SE_PARAM_ST;

struct _SOUND_COMMON_INGAME_PARAM_ST {
	fixstr ParamKeyStr[32];
	fixstr ParamValueStr[32];
};
typedef struct _SOUND_COMMON_INGAME_PARAM_ST SOUND_COMMON_INGAME_PARAM_ST;

struct _SOUND_COMMON_SYSTEM_PARAM_ST {
	fixstr ParamKeyStr[32];
	fixstr ParamValueStr[32];
};
typedef struct _SOUND_COMMON_SYSTEM_PARAM_ST SOUND_COMMON_SYSTEM_PARAM_ST;

struct _SOUND_CUTSCENE_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 ReverbType;
	dummy8 pad0[3];
	s16 BgmBehaviorTypeOnStart;
	s16 OneShotBgmBehaviorOnStart;
	s32 PostPlaySeId;
	s32 PostPlaySeIdForSkip;
	f32 EnterMapMuteStopTimeOnDrawCutscene;
	dummy8 reserved[12];
};
typedef struct _SOUND_CUTSCENE_PARAM_ST SOUND_CUTSCENE_PARAM_ST;

struct _SPEEDTREE_MODEL_PARAM_ST {
	f32 MinFadeLeaf;
	f32 MinFadeFrond;
	f32 MinFadeBranch;
	f32 MinTranslucencyLeaf;
	f32 MaxTranslucencyLeaf;
	f32 MinTranslucencyFrond;
	f32 MaxTranslucencyFrond;
	f32 MinTranslucencyBranch;
	f32 MaxTranslucencyBranch;
	f32 BillboardBackSpecularWeakenParam;
};
typedef struct _SPEEDTREE_MODEL_PARAM_ST SPEEDTREE_MODEL_PARAM_ST;

struct _SP_EFFECT_PARAM_ST {
	s32 iconId;
	f32 conditionHp;
	f32 effectEndurance;
	f32 motionInterval;
	f32 maxHpRate;
	f32 maxMpRate;
	f32 maxStaminaRate;
	f32 slashDamageCutRate;
	f32 blowDamageCutRate;
	f32 thrustDamageCutRate;
	f32 neutralDamageCutRate;
	f32 magicDamageCutRate;
	f32 fireDamageCutRate;
	f32 thunderDamageCutRate;
	f32 physicsAttackRate;
	f32 magicAttackRate;
	f32 fireAttackRate;
	f32 thunderAttackRate;
	f32 physicsAttackPowerRate;
	f32 magicAttackPowerRate;
	f32 fireAttackPowerRate;
	f32 thunderAttackPowerRate;
	s32 physicsAttackPower;
	s32 magicAttackPower;
	s32 fireAttackPower;
	s32 thunderAttackPower;
	f32 physicsDiffenceRate;
	f32 magicDiffenceRate;
	f32 fireDiffenceRate;
	f32 thunderDiffenceRate;
	s32 physicsDiffence;
	s32 magicDiffence;
	s32 fireDiffence;
	s32 thunderDiffence;
	f32 NoGuardDamageRate;
	f32 vitalSpotChangeRate;
	f32 normalSpotChangeRate;
	f32 lookAtTargetPosOffset;
	s32 behaviorId;
	f32 changeHpRate;
	s32 changeHpPoint;
	f32 changeMpRate;
	s32 changeMpPoint;
	s32 mpRecoverChangeSpeed;
	f32 changeStaminaRate;
	s32 changeStaminaPoint;
	s32 staminaRecoverChangeSpeed;
	f32 magicEffectTimeChange;
	s32 insideDurability;
	s32 maxDurability;
	f32 staminaAttackRate;
	s32 poizonAttackPower;
	s32 diseaseAttackPower;
	s32 bloodAttackPower;
	s32 curseAttackPower;
	f32 fallDamageRate;
	f32 soulRate;
	f32 equipWeightChangeRate;
	f32 allItemWeightChangeRate;
	s32 soul;
	s32 animIdOffset;
	f32 haveSoulRate;
	f32 targetPriority;
	f32 sightSearchEnemyRate;
	f32 hearingSearchEnemyRate;
	f32 grabityRate;
	f32 registPoizonChangeRate;
	f32 registDiseaseChangeRate;
	f32 registBloodChangeRate;
	f32 registCurseChangeRate;
	f32 soulStealRate;
	f32 lifeReductionRate;
	f32 hpRecoverRate;
	s32 replaceSpEffectId;
	s32 cycleOccurrenceSpEffectId;
	s32 atkOccurrenceSpEffectId;
	f32 guardDefFlickPowerRate;
	f32 guardStaminaCutRate;
	s16 rayCastPassedTime;
	u8 magicSubCategoryChange1;
	u8 magicSubCategoryChange2;
	s16 bowDistRate;
	u16 spCategory;
	u8 categoryPriority;
	s8 saveCategory;
	u8 changeMagicSlot;
	u8 changeMiracleSlot;
	s8 heroPointDamage;
	u8 defFlickPower;
	u8 flickDamageCutRate;
	u8 bloodDamageRate;
	s8 dmgLv_None;
	s8 dmgLv_S;
	s8 dmgLv_M;
	s8 dmgLv_L;
	s8 dmgLv_BlowM;
	s8 dmgLv_Push;
	s8 dmgLv_Strike;
	s8 dmgLv_BlowS;
	s8 dmgLv_Min;
	s8 dmgLv_Uppercut;
	s8 dmgLv_BlowLL;
	s8 dmgLv_Breath;
	u8 atkAttribute;
	u8 spAttribute;
	u16 stateInfo;
	u8 wepParamChange;
	u8 moveType;
	u16 lifeReductionType;
	u8 throwCondition;
	s8 addBehaviorJudgeId_condition;
	u8 freezeDamageRate;
	u8 effectTargetSelf: 1;
	u8 effectTargetFriend: 1;
	u8 effectTargetEnemy: 1;
	u8 effectTargetPlayer: 1;
	u8 effectTargetAI: 1;
	u8 effectTargetLive: 1;
	u8 effectTargetGhost: 1;
	u8 disableSleep: 1;
	u8 disableMadness: 1;
	u8 effectTargetAttacker: 1;
	u8 dispIconNonactive: 1;
	u8 regainGaugeDamage: 1;
	u8 bAdjustMagicAblity: 1;
	u8 bAdjustFaithAblity: 1;
	u8 bGameClearBonus: 1;
	u8 magParamChange: 1;
	u8 miracleParamChange: 1;
	u8 clearSoul: 1;
	u8 requestSOS: 1;
	u8 requestBlackSOS: 1;
	u8 requestForceJoinBlackSOS: 1;
	u8 requestKickSession: 1;
	u8 requestLeaveSession: 1;
	u8 requestNpcInveda: 1;
	u8 noDead: 1;
	u8 bCurrHPIndependeMaxHP: 1;
	u8 corrosionIgnore: 1;
	u8 sightSearchCutIgnore: 1;
	u8 hearingSearchCutIgnore: 1;
	u8 antiMagicIgnore: 1;
	u8 fakeTargetIgnore: 1;
	u8 fakeTargetIgnoreUndead: 1;
	u8 fakeTargetIgnoreAnimal: 1;
	u8 grabityIgnore: 1;
	u8 disablePoison: 1;
	u8 disableDisease: 1;
	u8 disableBlood: 1;
	u8 disableCurse: 1;
	u8 enableCharm: 1;
	u8 enableLifeTime: 1;
	u8 bAdjustStrengthAblity: 1;
	u8 bAdjustAgilityAblity: 1;
	u8 eraseOnBonfireRecover: 1;
	u8 throwAttackParamChange: 1;
	u8 requestLeaveColiseumSession: 1;
	u8 isExtendSpEffectLife: 1;
	u8 hasTarget: 1;
	u8 replanningOnFire: 1;
	u8 vowType0: 1;
	u8 vowType1: 1;
	u8 vowType2: 1;
	u8 vowType3: 1;
	u8 vowType4: 1;
	u8 vowType5: 1;
	u8 vowType6: 1;
	u8 vowType7: 1;
	u8 vowType8: 1;
	u8 vowType9: 1;
	u8 vowType10: 1;
	u8 vowType11: 1;
	u8 vowType12: 1;
	u8 vowType13: 1;
	u8 vowType14: 1;
	u8 vowType15: 1;
	s8 repAtkDmgLv;
	f32 sightSearchRate;
	u8 effectTargetOpposeTarget: 1;
	u8 effectTargetFriendlyTarget: 1;
	u8 effectTargetSelfTarget: 1;
	u8 effectTargetPcHorse: 1;
	u8 effectTargetPcDeceased: 1;
	u8 isContractSpEffectLife: 1;
	u8 isWaitModeDelete: 1;
	u8 isIgnoreNoDamage: 1;
	s8 changeTeamType;
	s16 dmypolyId;
	s32 vfxId;
	s32 accumuOverFireId;
	s32 accumuOverVal;
	s32 accumuUnderFireId;
	s32 accumuUnderVal;
	s32 accumuVal;
	u8 eye_angX;
	u8 eye_angY;
	s16 addDeceasedLv;
	s32 vfxId1;
	s32 vfxId2;
	s32 vfxId3;
	s32 vfxId4;
	s32 vfxId5;
	s32 vfxId6;
	s32 vfxId7;
	s32 freezeAttackPower;
	s32 AppearAiSoundId;
	s16 addFootEffectSfxId;
	s8 dexterityCancelSystemOnlyAddDexterity;
	s8 teamOffenseEffectivity;
	f32 toughnessDamageCutRate;
	f32 weakDmgRateA;
	f32 weakDmgRateB;
	f32 weakDmgRateC;
	f32 weakDmgRateD;
	f32 weakDmgRateE;
	f32 weakDmgRateF;
	f32 darkDamageCutRate;
	f32 darkDiffenceRate;
	s32 darkDiffence;
	f32 darkAttackRate;
	f32 darkAttackPowerRate;
	s32 darkAttackPower;
	f32 antiDarkSightRadius;
	s32 antiDarkSightDmypolyId;
	f32 conditionHpRate;
	f32 consumeStaminaRate;
	f32 itemDropRate;
	s32 changePoisonResistPoint;
	s32 changeDiseaseResistPoint;
	s32 changeBloodResistPoint;
	s32 changeCurseResistPoint;
	s32 changeFreezeResistPoint;
	f32 slashAttackRate;
	f32 blowAttackRate;
	f32 thrustAttackRate;
	f32 neutralAttackRate;
	f32 slashAttackPowerRate;
	f32 blowAttackPowerRate;
	f32 thrustAttackPowerRate;
	f32 neutralAttackPowerRate;
	s32 slashAttackPower;
	s32 blowAttackPower;
	s32 thrustAttackPower;
	s32 neutralAttackPower;
	s32 changeStrengthPoint;
	s32 changeAgilityPoint;
	s32 changeMagicPoint;
	s32 changeFaithPoint;
	s32 changeLuckPoint;
	s8 recoverArtsPoint_Str;
	s8 recoverArtsPoint_Dex;
	s8 recoverArtsPoint_Magic;
	s8 recoverArtsPoint_Miracle;
	u8 madnessDamageRate;
	u8 isUseStatusAilmentAtkPowerCorrect: 1;
	u8 isUseAtkParamAtkPowerCorrect: 1;
	u8 dontDeleteOnDead: 1;
	u8 disableFreeze: 1;
	u8 isDisableNetSync: 1;
	u8 shamanParamChange: 1;
	u8 isStopSearchedNotify: 1;
	u8 isCheckAboveShadowTest: 1;
	u16 addBehaviorJudgeId_add;
	f32 saReceiveDamageRate;
	f32 defPlayerDmgCorrectRate_Physics;
	f32 defPlayerDmgCorrectRate_Magic;
	f32 defPlayerDmgCorrectRate_Fire;
	f32 defPlayerDmgCorrectRate_Thunder;
	f32 defPlayerDmgCorrectRate_Dark;
	f32 defEnemyDmgCorrectRate_Physics;
	f32 defEnemyDmgCorrectRate_Magic;
	f32 defEnemyDmgCorrectRate_Fire;
	f32 defEnemyDmgCorrectRate_Thunder;
	f32 defEnemyDmgCorrectRate_Dark;
	f32 defObjDmgCorrectRate;
	f32 atkPlayerDmgCorrectRate_Physics;
	f32 atkPlayerDmgCorrectRate_Magic;
	f32 atkPlayerDmgCorrectRate_Fire;
	f32 atkPlayerDmgCorrectRate_Thunder;
	f32 atkPlayerDmgCorrectRate_Dark;
	f32 atkEnemyDmgCorrectRate_Physics;
	f32 atkEnemyDmgCorrectRate_Magic;
	f32 atkEnemyDmgCorrectRate_Fire;
	f32 atkEnemyDmgCorrectRate_Thunder;
	f32 atkEnemyDmgCorrectRate_Dark;
	f32 registFreezeChangeRate;
	u16 invocationConditionsStateChange1;
	u16 invocationConditionsStateChange2;
	u16 invocationConditionsStateChange3;
	s16 hearingAiSoundLevel;
	f32 chrProxyHeightRate;
	f32 addAwarePointCorrectValue_forMe;
	f32 addAwarePointCorrectValue_forTarget;
	f32 sightSearchEnemyAdd;
	f32 sightSearchAdd;
	f32 hearingSearchAdd;
	f32 hearingSearchRate;
	f32 hearingSearchEnemyAdd;
	f32 value_Magnification;
	f32 artsConsumptionRate;
	f32 magicConsumptionRate;
	f32 shamanConsumptionRate;
	f32 miracleConsumptionRate;
	s32 changeHpEstusFlaskRate;
	s32 changeHpEstusFlaskPoint;
	s32 changeMpEstusFlaskRate;
	s32 changeMpEstusFlaskPoint;
	f32 changeHpEstusFlaskCorrectRate;
	f32 changeMpEstusFlaskCorrectRate;
	s32 applyIdOnGetSoul;
	f32 extendLifeRate;
	f32 contractLifeRate;
	f32 defObjectAttackPowerRate;
	s16 effectEndDeleteDecalGroupId;
	s8 addLifeForceStatus;
	s8 addWillpowerStatus;
	s8 addEndureStatus;
	s8 addVitalityStatus;
	s8 addStrengthStatus;
	s8 addDexterityStatus;
	s8 addMagicStatus;
	s8 addFaithStatus;
	s8 addLuckStatus;
	u8 deleteCriteriaDamage;
	u8 magicSubCategoryChange3;
	u8 spAttributeVariationValue;
	u8 atkFlickPower;
	u8 wetConditionDepth;
	f32 changeSaRecoveryVelocity;
	f32 regainRate;
	f32 saAttackPowerRate;
	s32 sleepAttackPower;
	s32 madnessAttackPower;
	f32 registSleepChangeRate;
	f32 registMadnessChangeRate;
	s32 changeSleepResistPoint;
	s32 changeMadnessResistPoint;
	u8 sleepDamageRate;
	u8 applyPartsGroup;
	u8 clearTarget: 1;
	u8 fakeTargetIgnoreAjin: 1;
	u8 fakeTargetIgnoreMirageArts: 1;
	u8 requestForceJoinBlackSOS_B: 1;
	u8 unk353_4: 1;
	dummy8 pad2[1];
	f32 changeSuperArmorPoint;
	f32 changeSaPoint;
	f32 hugeEnemyPickupHeightOverwrite;
	f32 poisonDefDamageRate;
	f32 diseaseDefDamageRate;
	f32 bloodDefDamageRate;
	f32 curseDefDamageRate;
	f32 freezeDefDamageRate;
	f32 sleepDefDamageRate;
	f32 madnessDefDamageRate;
	u16 overwrite_maxBackhomeDist;
	u16 overwrite_backhomeDist;
	u16 overwrite_backhomeBattleDist;
	u16 overwrite_BackHome_LookTargetDist;
	f32 goodsConsumptionRate;
	f32 unk2;
	dummy8 unk3[4];
};
typedef struct _SP_EFFECT_PARAM_ST SP_EFFECT_PARAM_ST;

struct _SP_EFFECT_SET_PARAM_ST {
	s32 spEffectId1;
	s32 spEffectId2;
	s32 spEffectId3;
	s32 spEffectId4;
};
typedef struct _SP_EFFECT_SET_PARAM_ST SP_EFFECT_SET_PARAM_ST;

struct _SP_EFFECT_VFX_PARAM_ST {
	s32 midstSfxId;
	s32 midstSeId;
	s32 initSfxId;
	s32 initSeId;
	s32 finishSfxId;
	s32 finishSeId;
	f32 camouflageBeginDist;
	f32 camouflageEndDist;
	s32 transformProtectorId;
	s16 midstDmyId;
	s16 initDmyId;
	s16 finishDmyId;
	u8 effectType;
	u8 soulParamIdForWepEnchant;
	u8 playCategory;
	u8 playPriority;
	u8 existEffectForLarge: 1;
	u8 existEffectForSoul: 1;
	u8 effectInvisibleAtCamouflage: 1;
	u8 useCamouflage: 1;
	u8 invisibleAtFriendCamouflage: 1;
	u8 isHideFootEffect_forCamouflage: 1;
	u8 halfCamouflage: 1;
	u8 isFullBodyTransformProtectorId: 1;
	u8 isInvisibleWeapon: 1;
	u8 isSilence: 1;
	u8 isMidstFullbody: 1;
	u8 isInitFullbody: 1;
	u8 isFinishFullbody: 1;
	u8 isVisibleDeadChr: 1;
	u8 isUseOffsetEnchantSfxSize: 1;
	dummy8 pad_1: 1;
	s32 decalId1;
	s32 decalId2;
	u8 footEffectPriority;
	u8 footEffectOffset;
	u8 traceSfxIdOffsetType;
	u8 forceDeceasedType;
	s32 enchantStartDmyId_0;
	s32 enchantEndDmyId_0;
	s32 enchantStartDmyId_1;
	s32 enchantEndDmyId_1;
	s32 enchantStartDmyId_2;
	s32 enchantEndDmyId_2;
	s32 enchantStartDmyId_3;
	s32 enchantEndDmyId_3;
	s32 enchantStartDmyId_4;
	s32 enchantEndDmyId_4;
	s32 enchantStartDmyId_5;
	s32 enchantEndDmyId_5;
	s32 enchantStartDmyId_6;
	s32 enchantEndDmyId_6;
	s32 enchantStartDmyId_7;
	s32 enchantEndDmyId_7;
	u8 SfxIdOffsetType;
	u8 phantomParamOverwriteType;
	u8 camouflageMinAlpha;
	u8 wetAspectType;
	s32 phantomParamOverwriteId;
	s32 materialParamId;
	f32 materialParamInitValue;
	f32 materialParamTargetValue;
	f32 materialParamFadeTime;
	s16 footDecalMaterialOffsetOverwriteId;
	dummy8 pad[14];
};
typedef struct _SP_EFFECT_VFX_PARAM_ST SP_EFFECT_VFX_PARAM_ST;

struct _SWORD_ARTS_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 swordArtsType;
	u8 artsSpeedType;
	s8 refStatus;
	u8 isRefRightArts: 1;
	u8 isGrayoutLeftHand: 1;
	u8 isGrayoutRightHand: 1;
	u8 isGrayoutBothHand: 1;
	dummy8 reserve2: 4;
	s8 usePoint_L1;
	s8 usePoint_L2;
	s8 usePoint_R1;
	s8 usePoint_R2;
	s32 textId;
	s16 useMagicPoint_L1;
	s16 useMagicPoint_L2;
	s16 useMagicPoint_R1;
	s16 useMagicPoint_R2;
	u8 swordArtsTypeNew;
	dummy8 pad[1];
	u16 iconId;
	s32 aiUsageId;
};
typedef struct _SWORD_ARTS_PARAM_ST SWORD_ARTS_PARAM_ST;

struct _TALK_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 msgId;
	s32 voiceId;
	s32 spEffectId0;
	s32 motionId0;
	s32 spEffectId1;
	s32 motionId1;
	s32 returnPos;
	s32 reactionId;
	s32 eventId;
	s32 msgId_female;
	s32 voiceId_female;
	s16 lipSyncStart;
	s16 lipSyncTime;
	dummy8 pad2[4];
	f32 timeout;
	s32 talkAnimationId;
	u8 isForceDisp: 1;
	dummy8 pad3: 7;
	dummy8 pad1[31];
};
typedef struct _TALK_PARAM_ST TALK_PARAM_ST;

struct _THROW_DIRECTION_SFX_PARAM_ST {
	s32 sfxId_00;
	s32 sfxId_01;
	s32 sfxId_02;
	s32 sfxId_03;
	s32 sfxId_04;
	s32 sfxId_05;
	s32 sfxId_06;
	s32 sfxId_07;
	s32 sfxId_08;
	s32 sfxId_09;
	s32 sfxId_10;
	s32 sfxId_11;
	s32 sfxId_12;
	s32 sfxId_13;
	s32 sfxId_14;
	s32 sfxId_15;
	s32 sfxId_16;
	s32 sfxId_17;
	s32 sfxId_18;
	s32 sfxId_19;
	s32 sfxId_20;
	s32 sfxId_21;
	s32 sfxId_22;
	s32 sfxId_23;
	s32 sfxId_24;
	s32 sfxId_25;
	s32 sfxId_26;
	s32 sfxId_27;
	s32 sfxId_28;
	s32 sfxId_29;
	s32 sfxId_30;
	dummy8 pad1[20];
};
typedef struct _THROW_DIRECTION_SFX_PARAM_ST THROW_DIRECTION_SFX_PARAM_ST;

struct _THROW_PARAM_ST {
	s32 AtkChrId;
	s32 DefChrId;
	f32 Dist;
	f32 DiffAngMin;
	f32 DiffAngMax;
	f32 upperYRange;
	f32 lowerYRange;
	f32 diffAngMyToDef;
	s32 throwTypeId;
	s32 atkAnimId;
	s32 defAnimId;
	u16 escHp;
	u16 selfEscCycleTime;
	u16 sphereCastRadiusRateTop;
	u16 sphereCastRadiusRateLow;
	u8 PadType;
	u8 AtkEnableState;
	u8 throwFollowingType;
	dummy8 pad2[1];
	u8 throwType;
	u8 selfEscCycleCnt;
	u8 dmyHasChrDirType;
	u8 isTurnAtker: 1;
	u8 isSkipWepCate: 1;
	u8 isSkipSphereCast: 1;
	u8 isEnableCorrectPos_forThrowAdjust: 1;
	u8 isEnableThrowFollowingFallAssist: 1;
	u8 isEnableThrowFollowingFeedback: 1;
	dummy8 pad0: 2;
	s16 atkSorbDmyId;
	s16 defSorbDmyId;
	f32 Dist_start;
	f32 DiffAngMin_start;
	f32 DiffAngMax_start;
	f32 upperYRange_start;
	f32 lowerYRange_start;
	f32 diffAngMyToDef_start;
	s32 judgeRangeBasePosDmyId1;
	s32 judgeRangeBasePosDmyId2;
	f32 adsrobModelPosInterpolationTime;
	f32 throwFollowingEndEasingTime;
	dummy8 pad1[24];
};
typedef struct _THROW_PARAM_ST THROW_PARAM_ST;

struct _TOUGHNESS_PARAM_ST {
	f32 correctionRate;
	u16 minToughness;
	u8 isNonEffectiveCorrectionForMin;
	dummy8 pad2[1];
	s32 spEffectId;
	f32 proCorrectionRate;
	dummy8 pad1[16];
};
typedef struct _TOUGHNESS_PARAM_ST TOUGHNESS_PARAM_ST;

struct _TUTORIAL_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 menuType;
	u8 triggerType;
	u8 repeatType;
	dummy8 pad1[1];
	u16 imageId;
	dummy8 pad2[2];
	u32 unlockEventFlagId;
	s32 textId;
	f32 displayMinTime;
	f32 displayTime;
	dummy8 pad3[4];
};
typedef struct _TUTORIAL_PARAM_ST TUTORIAL_PARAM_ST;

struct _WAYPOINT_PARAM_ST {
	s16 attribute1;
	s16 attribute2;
	s16 attribute3;
	s16 attribute4;
	dummy8 padding4[8];
};
typedef struct _WAYPOINT_PARAM_ST WAYPOINT_PARAM_ST;

struct _WEATHER_ASSET_CREATE_PARAM_ST {
	u32 AssetId;
	u32 SlotNo;
	u8 CreateConditionType;
	dummy8 padding0[3];
	s16 TransitionSrcWeather;
	s16 TransitionDstWeather;
	s16 ElapsedTimeCheckweather;
	dummy8 padding1[2];
	f32 ElapsedTime;
	f32 CreateDelayTime;
	u32 CreateProbability;
	f32 LifeTime;
	f32 FadeTime;
	f32 EnableCreateTimeMin;
	f32 EnableCreateTimeMax;
	s16 CreatePoint0;
	s16 CreatePoint1;
	s16 CreatePoint2;
	s16 CreatePoint3;
	s8 CreateAssetLimitId0;
	s8 CreateAssetLimitId1;
	s8 CreateAssetLimitId2;
	s8 CreateAssetLimitId3;
	dummy8 Reserved2[4];
};
typedef struct _WEATHER_ASSET_CREATE_PARAM_ST WEATHER_ASSET_CREATE_PARAM_ST;

struct _WEATHER_ASSET_REPLACE_PARAM_ST {
	u32 mapId;
	s16 TransitionSrcWeather;
	dummy8 padding0[2];
	u8 isFireAsh;
	dummy8 padding1[3];
	u32 reserved2;
	s32 AssetId0;
	s32 AssetId1;
	s32 AssetId2;
	s32 AssetId3;
	s32 AssetId4;
	s32 AssetId5;
	s32 AssetId6;
	s32 AssetId7;
	dummy8 reserved0[8];
	s8 CreateAssetLimitId0;
	s8 CreateAssetLimitId1;
	s8 CreateAssetLimitId2;
	s8 CreateAssetLimitId3;
	dummy8 reserved1[4];
};
typedef struct _WEATHER_ASSET_REPLACE_PARAM_ST WEATHER_ASSET_REPLACE_PARAM_ST;

struct _WEATHER_LOT_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s16 weatherType0;
	s16 weatherType1;
	s16 weatherType2;
	s16 weatherType3;
	s16 weatherType4;
	s16 weatherType5;
	s16 weatherType6;
	s16 weatherType7;
	s16 weatherType8;
	s16 weatherType9;
	s16 weatherType10;
	s16 weatherType11;
	s16 weatherType12;
	s16 weatherType13;
	s16 weatherType14;
	s16 weatherType15;
	u16 lotteryWeight0;
	u16 lotteryWeight1;
	u16 lotteryWeight2;
	u16 lotteryWeight3;
	u16 lotteryWeight4;
	u16 lotteryWeight5;
	u16 lotteryWeight6;
	u16 lotteryWeight7;
	u16 lotteryWeight8;
	u16 lotteryWeight9;
	u16 lotteryWeight10;
	u16 lotteryWeight11;
	u16 lotteryWeight12;
	u16 lotteryWeight13;
	u16 lotteryWeight14;
	u16 lotteryWeight15;
	u8 timezoneLimit;
	u8 timezoneStartHour;
	u8 timezoneStartMinute;
	u8 timezoneEndHour;
	u8 timezoneEndMinute;
	dummy8 reserve[9];
};
typedef struct _WEATHER_LOT_PARAM_ST WEATHER_LOT_PARAM_ST;

struct _WEATHER_LOT_TEX_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 srcR;
	u8 srcG;
	u8 srcB;
	dummy8 pad1[1];
	s32 weatherLogId;
	dummy8 pad2[4];
};
typedef struct _WEATHER_LOT_TEX_PARAM_ST WEATHER_LOT_TEX_PARAM_ST;

struct _WEATHER_PARAM_ST {
	s32 SfxId;
	s32 WindSfxId;
	s32 GroundHitSfxId;
	s32 SoundId;
	f32 WetTime;
	u32 GparamId;
	u32 NextLotIngameSecondsMin;
	u32 NextLotIngameSecondsMax;
	s32 WetSpEffectId00;
	s32 WetSpEffectId01;
	s32 WetSpEffectId02;
	s32 WetSpEffectId03;
	s32 WetSpEffectId04;
	s32 SfxIdInoor;
	s32 SfxIdOutdoor;
	f32 aiSightRate;
	f32 DistViewWeatherGparamOverrideWeight;
};
typedef struct _WEATHER_PARAM_ST WEATHER_PARAM_ST;

struct _WEP_ABSORP_POS_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 hangPosType;
	u8 isSkeletonBind;
	dummy8 pad0[2];
	s16 right_0;
	s16 left_0;
	s16 both_0;
	s16 leftHang_0;
	s16 rightHang_0;
	s16 right_1;
	s16 left_1;
	s16 both_1;
	s16 leftHang_1;
	s16 rightHang_1;
	s16 right_2;
	s16 left_2;
	s16 both_2;
	s16 leftHang_2;
	s16 rightHang_2;
	s16 right_3;
	s16 left_3;
	s16 both_3;
	s16 leftHang_3;
	s16 rightHang_3;
	u8 wepInvisibleType_0;
	u8 wepInvisibleType_1;
	u8 wepInvisibleType_2;
	u8 wepInvisibleType_3;
	s16 leftBoth_0;
	s16 leftBoth_1;
	s16 leftBoth_2;
	s16 leftBoth_3;
	u8 dispPosType_right_0;
	u8 dispPosType_left_0;
	u8 dispPosType_rightBoth_0;
	u8 dispPosType_leftBoth_0;
	u8 dispPosType_rightHang_0;
	u8 dispPosType_leftHang_0;
	u8 dispPosType_right_1;
	u8 dispPosType_left_1;
	u8 dispPosType_rightBoth_1;
	u8 dispPosType_leftBoth_1;
	u8 dispPosType_rightHang_1;
	u8 dispPosType_leftHang_1;
	u8 dispPosType_right_2;
	u8 dispPosType_left_2;
	u8 dispPosType_rightBoth_2;
	u8 dispPosType_leftBoth_2;
	u8 dispPosType_rightHang_2;
	u8 dispPosType_leftHang_2;
	u8 dispPosType_right_3;
	u8 dispPosType_left_3;
	u8 dispPosType_rightBoth_3;
	u8 dispPosType_leftBoth_3;
	u8 dispPosType_rightHang_3;
	u8 dispPosType_leftHang_3;
	dummy8 reserve[12];
};
typedef struct _WEP_ABSORP_POS_PARAM_ST WEP_ABSORP_POS_PARAM_ST;

struct _WET_ASPECT_PARAM_ST {
	u8 baseColorR;
	u8 baseColorG;
	u8 baseColorB;
	dummy8 reserve_0[1];
	f32 baseColorA;
	u8 metallic;
	dummy8 reserve_1[1];
	dummy8 reserve_2[1];
	dummy8 reserve_3[1];
	f32 metallicRate;
	f32 shininessRate;
	u8 shininess;
	dummy8 reserve_4[11];
};
typedef struct _WET_ASPECT_PARAM_ST WET_ASPECT_PARAM_ST;

struct _WHITE_SIGN_COOL_TIME_PARAM_ST {
	f32 limitationTime_Normal;
	f32 limitationTime_NormalDriedFinger;
	f32 limitationTime_Guardian;
	f32 limitationTime_GuardianDriedFinger;
};
typedef struct _WHITE_SIGN_COOL_TIME_PARAM_ST WHITE_SIGN_COOL_TIME_PARAM_ST;

struct _WORLD_MAP_LEGACY_CONV_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u8 srcAreaNo;
	u8 srcGridXNo;
	u8 srcGridZNo;
	dummy8 pad1[1];
	f32 srcPosX;
	f32 srcPosY;
	f32 srcPosZ;
	u8 dstAreaNo;
	u8 dstGridXNo;
	u8 dstGridZNo;
	dummy8 pad2[1];
	f32 dstPosX;
	f32 dstPosY;
	f32 dstPosZ;
	u8 isBasePoint: 1;
	dummy8 pad3: 7;
	dummy8 pad4[11];
};
typedef struct _WORLD_MAP_LEGACY_CONV_PARAM_ST WORLD_MAP_LEGACY_CONV_PARAM_ST;

struct _WORLD_MAP_PIECE_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 openEventFlagId;
	f32 openTravelAreaLeft;
	f32 openTravelAreaRight;
	f32 openTravelAreaTop;
	f32 openTravelAreaBottom;
	u32 acquisitionEventFlagId;
	f32 acquisitionEventScale;
	f32 acquisitionEventCenterX;
	f32 acquisitionEventCenterY;
	f32 acquisitionEventResScale;
	f32 acquisitionEventResOffsetX;
	f32 acquisitionEventResOffsetY;
	dummy8 pad[12];
};
typedef struct _WORLD_MAP_PIECE_PARAM_ST WORLD_MAP_PIECE_PARAM_ST;

struct _WORLD_MAP_PLACE_NAME_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	s32 worldMapPieceId;
	s32 textId;
	dummy8 pad1[4];
	u8 areaNo;
	u8 gridXNo;
	u8 gridZNo;
	dummy8 pad2[1];
	f32 posX;
	f32 posY;
	f32 posZ;
};
typedef struct _WORLD_MAP_PLACE_NAME_PARAM_ST WORLD_MAP_PLACE_NAME_PARAM_ST;

struct _WORLD_MAP_POINT_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	u32 eventFlagId;
	u32 distViewEventFlagId;
	u16 iconId;
	s16 bgmPlaceType;
	u8 isAreaIcon: 1;
	u8 isOverrideDistViewMarkPos: 1;
	u8 isEnableNoText: 1;
	dummy8 pad3: 5;
	u8 areaNo_forDistViewMark;
	u8 gridXNo_forDistViewMark;
	u8 gridZNo_forDistViewMark;
	u32 clearedEventFlagId;
	u8 dispMask00: 1;
	u8 dispMask01: 1;
	dummy8 pad2_0: 6;
	dummy8 pad2[1];
	u16 distViewIconId;
	f32 angle;
	u8 areaNo;
	u8 gridXNo;
	u8 gridZNo;
	dummy8 pad[1];
	f32 posX;
	f32 posY;
	f32 posZ;
	s32 textId1;
	u32 textEnableFlagId1;
	u32 textDisableFlagId1;
	s32 textId2;
	u32 textEnableFlagId2;
	u32 textDisableFlagId2;
	s32 textId3;
	u32 textEnableFlagId3;
	u32 textDisableFlagId3;
	s32 textId4;
	u32 textEnableFlagId4;
	u32 textDisableFlagId4;
	s32 textId5;
	u32 textEnableFlagId5;
	u32 textDisableFlagId5;
	s32 textId6;
	u32 textEnableFlagId6;
	u32 textDisableFlagId6;
	s32 textId7;
	u32 textEnableFlagId7;
	u32 textDisableFlagId7;
	s32 textId8;
	u32 textEnableFlagId8;
	u32 textDisableFlagId8;
	u8 textType1;
	u8 textType2;
	u8 textType3;
	u8 textType4;
	u8 textType5;
	u8 textType6;
	u8 textType7;
	u8 textType8;
	s32 distViewId;
	f32 posX_forDistViewMark;
	f32 posY_forDistViewMark;
	f32 posZ_forDistViewMark;
	s32 distViewId1;
	s32 distViewId2;
	s32 distViewId3;
	u8 dispMinZoomStep;
	u8 selectMinZoomStep;
	u8 entryFEType;
	dummy8 pad4[9];
	s32 unkC0;
	s32 unkC4;
	s32 unkC8;
	s32 unkCC;
	s32 unkD0;
	s32 unkD4;
	s32 unkD8;
	s32 unkDC;
	s32 unkE0;
	s32 unkE4;
	s32 unkE8;
	s32 unkEC;
	s32 unkF0;
	s32 unkF4;
	s32 unkF8;
	s32 unkFC;
};
typedef struct _WORLD_MAP_POINT_PARAM_ST WORLD_MAP_POINT_PARAM_ST;

struct _WWISE_VALUE_TO_STR_CONVERT_PARAM_ST {
	u8 disableParam_NT: 1;
	dummy8 disableParamReserve1: 7;
	dummy8 disableParamReserve2[3];
	fixstr ParamStr[32];
};
typedef struct _WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WWISE_VALUE_TO_STR_CONVERT_PARAM_ST;

typedef ACTIONBUTTON_PARAM_ST ActionButtonParam;
typedef AI_SOUND_PARAM_ST AiSoundParam;
typedef ASSET_GEOMETORY_PARAM_ST AssetEnvironmentGeometryParam;
typedef ASSET_MATERIAL_SFX_PARAM_ST AssetMaterialSfxParam;
typedef ASSET_MODEL_SFX_PARAM_ST AssetModelSfxParam;
typedef ATK_PARAM_ST AtkParam_Npc;
typedef ATK_PARAM_ST AtkParam_Pc;
typedef ATTACK_ELEMENT_CORRECT_PARAM_ST AttackElementCorrectParam;
typedef AUTO_CREATE_ENV_SOUND_PARAM_ST AutoCreateEnvSoundParam;
typedef BASECHR_SELECT_MENU_PARAM_ST BaseChrSelectMenuParam;
typedef BEHAVIOR_PARAM_ST BehaviorParam;
typedef BEHAVIOR_PARAM_ST BehaviorParam_PC;
typedef BONFIRE_WARP_PARAM_ST BonfireWarpParam;
typedef BONFIRE_WARP_SUB_CATEGORY_PARAM_ST BonfireWarpSubCategoryParam;
typedef BONFIRE_WARP_TAB_PARAM_ST BonfireWarpTabParam;
typedef BUDDY_PARAM_ST BuddyParam;
typedef BUDDY_STONE_PARAM_ST BuddyStoneParam;
typedef BUDGET_PARAM_ST BudgetParam;
typedef BULLET_PARAM_ST Bullet;
typedef BULLET_CREATE_LIMIT_PARAM_ST BulletCreateLimitParam;
typedef CACL_CORRECT_GRAPH_ST CalcCorrectGraph;
typedef CEREMONY_PARAM_ST Ceremony;
typedef CHARACTER_INIT_PARAM CharaInitParam;
typedef CHARMAKEMENU_LISTITEM_PARAM_ST CharMakeMenuListItemParam;
typedef CHARMAKEMENUTOP_PARAM_ST CharMakeMenuTopParam;
typedef CHR_ACTIVATE_CONDITION_PARAM_ST ChrActivateConditionParam;
typedef CHR_MODEL_PARAM_ST ChrModelParam;
typedef CLEAR_COUNT_CORRECT_PARAM_ST ClearCountCorrectParam;
typedef COOL_TIME_PARAM_ST CoolTimeParam;
typedef CUTSCENE_GPARAM_TIME_PARAM_ST CutsceneGparamTimeParam;
typedef CUTSCENE_GPARAM_WEATHER_PARAM_ST CutsceneGparamWeatherParam;
typedef CUTSCENE_MAP_ID_PARAM_ST CutsceneMapIdParam;
typedef CUTSCENE_TEXTURE_LOAD_PARAM_ST CutSceneTextureLoadParam;
typedef CUTSCENE_TIMEZONE_CONVERT_PARAM_ST CutsceneTimezoneConvertParam;
typedef CUTSCENE_WEATHER_OVERRIDE_GPARAM_ID_CONVERT_PARAM_ST CutsceneWeatherOverrideGparamConvertParam;
typedef DECAL_PARAM_ST DecalParam;
typedef DIRECTION_CAMERA_PARAM_ST DirectionCameraParam;
typedef ENEMY_COMMON_PARAM_ST EnemyCommonParam;
typedef ENV_OBJ_LOT_PARAM_ST EnvObjLotParam;
typedef EQUIP_MTRL_SET_PARAM_ST EquipMtrlSetParam;
typedef EQUIP_PARAM_ACCESSORY_ST EquipParamAccessory;
typedef EQUIP_PARAM_CUSTOM_WEAPON_ST EquipParamCustomWeapon;
typedef EQUIP_PARAM_GEM_ST EquipParamGem;
typedef EQUIP_PARAM_GOODS_ST EquipParamGoods;
typedef EQUIP_PARAM_PROTECTOR_ST EquipParamProtector;
typedef EQUIP_PARAM_WEAPON_ST EquipParamWeapon;
typedef FACE_PARAM_ST FaceParam;
typedef FACE_RANGE_PARAM_ST FaceRangeParam;
typedef FE_TEXT_EFFECT_PARAM_ST FeTextEffectParam;
typedef FINAL_DAMAGE_RATE_PARAM_ST FinalDamageRateParam;
typedef FOOT_SFX_PARAM_ST FootSfxParam;
typedef GAME_AREA_PARAM_ST GameAreaParam;
typedef GAME_SYSTEM_COMMON_PARAM_ST GameSystemCommonParam;
typedef GESTURE_PARAM_ST GestureParam;
typedef GPARAM_REF_SETTINGS_PARAM_ST GparamRefSettings;
typedef GRAPHICS_COMMON_PARAM_ST GraphicsCommonParam;
typedef CS_GRAPHICS_CONFIG_PARAM_ST GraphicsConfig;
typedef GRASS_LOD_RANGE_PARAM_ST GrassLodRangeParam;
typedef GRASS_TYPE_PARAM_ST GrassTypeParam;
typedef GRASS_TYPE_PARAM_ST GrassTypeParam_Lv1;
typedef GRASS_TYPE_PARAM_ST GrassTypeParam_Lv2;
typedef HIT_EFFECT_SE_PARAM_ST HitEffectSeParam;
typedef HIT_EFFECT_SFX_CONCEPT_PARAM_ST HitEffectSfxConceptParam;
typedef HIT_EFFECT_SFX_PARAM_ST HitEffectSfxParam;
typedef HIT_MTRL_PARAM_ST HitMtrlParam;
typedef ESTUS_FLASK_RECOVERY_PARAM_ST HPEstusFlaskRecoveryParam;
typedef ITEMLOT_PARAM_ST ItemLotParam_enemy;
typedef ITEMLOT_PARAM_ST ItemLotParam_map;
typedef CS_KEY_ASSIGN_MENUITEM_PARAM KeyAssignMenuItemParam;
typedef KEY_ASSIGN_PARAM_ST KeyAssignParam_TypeA;
typedef KEY_ASSIGN_PARAM_ST KeyAssignParam_TypeB;
typedef KEY_ASSIGN_PARAM_ST KeyAssignParam_TypeC;
typedef KNOCKBACK_PARAM_ST KnockBackParam;
typedef KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST KnowledgeLoadScreenItemParam;
typedef LEGACY_DISTANT_VIEW_PARTS_REPLACE_PARAM LegacyDistantViewPartsReplaceParam;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam_ps4;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam_ps5;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam_xb1;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam_xb1x;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam_xss;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam_xsx;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_ps4;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_ps5;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_win64;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_xb1;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_xb1x;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_xss;
typedef LOAD_BALANCER_NEW_DRAW_DIST_SCALE_PARAM_ST LoadBalancerNewDrawDistScaleParam_xsx;
typedef LOAD_BALANCER_PARAM_ST LoadBalancerParam;
typedef LOCK_CAM_PARAM_ST LockCamParam;
typedef MAGIC_PARAM_ST Magic;
typedef MAP_DEFAULT_INFO_PARAM_ST MapDefaultInfoParam;
typedef MAP_GD_REGION_DRAW_PARAM MapGdRegionDrawParam;
typedef MAP_GD_REGION_ID_PARAM_ST MapGdRegionInfoParam;
typedef MAP_GRID_CREATE_HEIGHT_LIMIT_INFO_PARAM_ST MapGridCreateHeightLimitInfoParam;
typedef MAP_MIMICRY_ESTABLISHMENT_PARAM_ST MapMimicryEstablishmentParam;
typedef MAP_NAME_TEX_PARAM_ST MapNameTexParam;
typedef MAP_PIECE_TEX_PARAM_ST MapPieceTexParam;
typedef MATERIAL_EX_PARAM_ST MaterialExParam;
typedef MENU_PARAM_COLOR_TABLE_ST MenuColorTableParam;
typedef MENU_COMMON_PARAM_ST MenuCommonParam;
typedef MENU_OFFSCR_REND_PARAM_ST MenuOffscrRendParam;
typedef MENUPROPERTY_LAYOUT MenuPropertyLayoutParam;
typedef MENUPROPERTY_SPEC MenuPropertySpecParam;
typedef MENU_VALUE_TABLE_SPEC MenuValueTableParam;
typedef MIMICRY_ESTABLISHMENT_TEX_PARAM_ST MimicryEstablishmentTexParam;
typedef MOVE_PARAM_ST MoveParam;
typedef ESTUS_FLASK_RECOVERY_PARAM_ST MPEstusFlaskRecoveryParam;
typedef MULTI_ESTUS_FLASK_BONUS_PARAM_ST MultiHPEstusFlaskBonusParam;
typedef MULTI_ESTUS_FLASK_BONUS_PARAM_ST MultiMPEstusFlaskBonusParam;
typedef MULTI_PLAY_CORRECTION_PARAM_ST MultiPlayCorrectionParam;
typedef MULTI_SOUL_BONUS_RATE_PARAM_ST MultiSoulBonusRateParam;
typedef NETWORK_AREA_PARAM_ST NetworkAreaParam;
typedef NETWORK_MSG_PARAM_ST NetworkMsgParam;
typedef NETWORK_PARAM_ST NetworkParam;
typedef NPC_AI_ACTION_PARAM_ST NpcAiActionParam;
typedef NPC_AI_BEHAVIOR_PROBABILITY_PARAM_ST NpcAiBehaviorProbability;
typedef NPC_PARAM_ST NpcParam;
typedef NPC_THINK_PARAM_ST NpcThinkParam;
typedef OBJ_ACT_PARAM_ST ObjActParam;
typedef PARTS_DRAW_PARAM_ST PartsDrawParam;
typedef PHANTOM_PARAM_ST PhantomParam;
typedef PLAYER_COMMON_PARAM_ST PlayerCommonParam;
typedef PLAY_REGION_PARAM_ST PlayRegionParam;
typedef POSTURE_CONTROL_PARAM_GENDER_ST PostureControlParam_Gender;
typedef POSTURE_CONTROL_PARAM_PRO_ST PostureControlParam_Pro;
typedef POSTURE_CONTROL_PARAM_WEP_LEFT_ST PostureControlParam_WepLeft;
typedef POSTURE_CONTROL_PARAM_WEP_RIGHT_ST PostureControlParam_WepRight;
typedef RANDOM_APPEAR_PARAM_ST RandomAppearParam;
typedef REINFORCE_PARAM_PROTECTOR_ST ReinforceParamProtector;
typedef REINFORCE_PARAM_WEAPON_ST ReinforceParamWeapon;
typedef RESIST_CORRECT_PARAM_ST ResistCorrectParam;
typedef RIDE_PARAM_ST RideParam;
typedef ROLE_PARAM_ST RoleParam;
typedef ROLLING_OBJ_LOT_PARAM_ST RollingObjLotParam;
typedef RUNTIME_BONE_CONTROL_PARAM_ST RuntimeBoneControlParam;
typedef SE_ACTIVATION_RANGE_PARAM_ST SeActivationRangeParam;
typedef SE_MATERIAL_CONVERT_PARAM_ST SeMaterialConvertParam;
typedef SFX_BLOCK_RES_SHARE_PARAM SfxBlockResShareParam;
typedef SHOP_LINEUP_PARAM ShopLineupParam;
typedef SHOP_LINEUP_PARAM ShopLineupParam_Recipe;
typedef SIGN_PUDDLE_PARAM_ST SignPuddleParam;
typedef SOUND_ASSET_SOUND_OBJ_ENABLE_DIST_PARAM_ST SoundAssetSoundObjEnableDistParam;
typedef SOUND_AUTO_ENV_SOUND_GROUP_PARAM_ST SoundAutoEnvSoundGroupParam;
typedef SOUND_AUTO_REVERB_EVALUATION_DIST_PARAM_ST SoundAutoReverbEvaluationDistParam;
typedef SOUND_AUTO_REVERB_SELECT_PARAM_ST SoundAutoReverbSelectParam;
typedef SOUND_CHR_PHYSICS_SE_PARAM_ST SoundChrPhysicsSeParam;
typedef SOUND_COMMON_INGAME_PARAM_ST SoundCommonIngameParam;
typedef SOUND_CUTSCENE_PARAM_ST SoundCutsceneParam;
typedef SPEEDTREE_MODEL_PARAM_ST SpeedtreeParam;
typedef SP_EFFECT_PARAM_ST SpEffectParam;
typedef SP_EFFECT_SET_PARAM_ST SpEffectSetParam;
typedef SP_EFFECT_VFX_PARAM_ST SpEffectVfxParam;
typedef SWORD_ARTS_PARAM_ST SwordArtsParam;
typedef TALK_PARAM_ST TalkParam;
typedef THROW_DIRECTION_SFX_PARAM_ST ThrowDirectionSfxParam;
typedef THROW_PARAM_ST ThrowParam;
typedef TOUGHNESS_PARAM_ST ToughnessParam;
typedef TUTORIAL_PARAM_ST TutorialParam;
typedef WAYPOINT_PARAM_ST WaypointParam;
typedef WEATHER_ASSET_CREATE_PARAM_ST WeatherAssetCreateParam;
typedef WEATHER_ASSET_REPLACE_PARAM_ST WeatherAssetReplaceParam;
typedef WEATHER_LOT_PARAM_ST WeatherLotParam;
typedef WEATHER_LOT_TEX_PARAM_ST WeatherLotTexParam;
typedef WEATHER_PARAM_ST WeatherParam;
typedef WEP_ABSORP_POS_PARAM_ST WepAbsorpPosParam;
typedef WET_ASPECT_PARAM_ST WetAspectParam;
typedef WHITE_SIGN_COOL_TIME_PARAM_ST WhiteSignCoolTimeParam;
typedef WORLD_MAP_LEGACY_CONV_PARAM_ST WorldMapLegacyConvParam;
typedef WORLD_MAP_PIECE_PARAM_ST WorldMapPieceParam;
typedef WORLD_MAP_PLACE_NAME_PARAM_ST WorldMapPlaceNameParam;
typedef WORLD_MAP_POINT_PARAM_ST WorldMapPointParam;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_BgmBossChrIdConv;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_EnvPlaceType;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_AttackStrength;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_AttackType;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_DamageAmount;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_DeffensiveMaterial;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_GrassHitType;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_HitStop;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_OffensiveMaterial;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_PlayerEquipmentBottoms;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_PlayerEquipmentTops;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_PlayerShoes;
typedef WWISE_VALUE_TO_STR_CONVERT_PARAM_ST WwiseValueToStrParam_Switch_PlayerVoiceType;
#endif
